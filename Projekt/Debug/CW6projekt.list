
CW6projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009830  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  080099d0  080099d0  0000a9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a640  0800a640  0000f6e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a640  0800a640  0000b640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a648  0800a648  0000f6e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a648  0800a648  0000b648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a64c  0800a64c  0000b64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000036e8  20000000  0800a650  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200036e8  0800dd38  0000f6e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003904  0800dd38  0000f904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f6e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f8f  00000000  00000000  0000f718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cce  00000000  00000000  000196a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0001b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c1  00000000  00000000  0001bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001711d  00000000  00000000  0001c579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d270  00000000  00000000  00033696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a6e9  00000000  00000000  00040906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cafef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000417c  00000000  00000000  000cb034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000cf1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200036e8 	.word	0x200036e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080099b8 	.word	0x080099b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200036ec 	.word	0x200036ec
 80001dc:	080099b8 	.word	0x080099b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <apds9960_init>:
#include "apds9960.h"

int apds9960_init(I2C_HandleTypeDef *hi2c) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]

	// Pyta o ID
	uint8_t id;
	status = HAL_I2C_Mem_Read(hi2c, APDS9960_ADDR, APDS9960_REG_ID, 1, &id, 1, HAL_MAX_DELAY);
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	f107 030e 	add.w	r3, r7, #14
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	2292      	movs	r2, #146	@ 0x92
 8001014:	2172      	movs	r1, #114	@ 0x72
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f001 fcfe 	bl	8002a18 <HAL_I2C_Mem_Read>
 800101c:	4603      	mov	r3, r0
 800101e:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) return 1;
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <apds9960_init+0x36>
 8001026:	2301      	movs	r3, #1
 8001028:	e061      	b.n	80010ee <apds9960_init+0xfa>

	if (id != 0xA8) return 2;
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	2ba8      	cmp	r3, #168	@ 0xa8
 800102e:	d001      	beq.n	8001034 <apds9960_init+0x40>
 8001030:	2302      	movs	r3, #2
 8001032:	e05c      	b.n	80010ee <apds9960_init+0xfa>

	// Odłącza zasilanie i resetuje
	uint8_t tx = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Mem_Write(hi2c, APDS9960_ADDR, APDS9960_REG_ENABLE, 1, &tx, 1, HAL_MAX_DELAY);
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	f107 030d 	add.w	r3, r7, #13
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	2280      	movs	r2, #128	@ 0x80
 800104c:	2172      	movs	r1, #114	@ 0x72
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f001 fbe8 	bl	8002824 <HAL_I2C_Mem_Write>
 8001054:	4603      	mov	r3, r0
 8001056:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) return 1;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <apds9960_init+0x6e>
 800105e:	2301      	movs	r3, #1
 8001060:	e045      	b.n	80010ee <apds9960_init+0xfa>

	// Zasilanie/ALS/Przerwania
	tx = APDS9960_ENABLE_POWER | APDS9960_ENABLE_ALS | APDS9960_ENABLE_ALS_INT;
 8001062:	2313      	movs	r3, #19
 8001064:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Mem_Write(hi2c, APDS9960_ADDR, APDS9960_REG_ENABLE, 1, &tx, 1, HAL_MAX_DELAY);
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2301      	movs	r3, #1
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	f107 030d 	add.w	r3, r7, #13
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	2280      	movs	r2, #128	@ 0x80
 800107a:	2172      	movs	r1, #114	@ 0x72
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f001 fbd1 	bl	8002824 <HAL_I2C_Mem_Write>
 8001082:	4603      	mov	r3, r0
 8001084:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) return 1;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <apds9960_init+0x9c>
 800108c:	2301      	movs	r3, #1
 800108e:	e02e      	b.n	80010ee <apds9960_init+0xfa>

	// Czas integracji
	tx = APDS9960_INTEGRATION_TIME_100MS;
 8001090:	23db      	movs	r3, #219	@ 0xdb
 8001092:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Mem_Write(hi2c, APDS9960_ADDR, APDS9960_REG_ATIME, 1, &tx, 1, HAL_MAX_DELAY);
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	2301      	movs	r3, #1
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	f107 030d 	add.w	r3, r7, #13
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	2281      	movs	r2, #129	@ 0x81
 80010a8:	2172      	movs	r1, #114	@ 0x72
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f001 fbba 	bl	8002824 <HAL_I2C_Mem_Write>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) return 1;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <apds9960_init+0xca>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e017      	b.n	80010ee <apds9960_init+0xfa>

	// wzmacnia odbierany sygnał
	tx = APDS9960_GAIN_16X;
 80010be:	2303      	movs	r3, #3
 80010c0:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Mem_Write(hi2c, APDS9960_ADDR, APDS9960_REG_CONTROL, 1, &tx, 1, HAL_MAX_DELAY);
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	2301      	movs	r3, #1
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	f107 030d 	add.w	r3, r7, #13
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	228f      	movs	r2, #143	@ 0x8f
 80010d6:	2172      	movs	r1, #114	@ 0x72
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f001 fba3 	bl	8002824 <HAL_I2C_Mem_Write>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) return 1;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <apds9960_init+0xf8>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <apds9960_init+0xfa>

	return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <apds9960_read_colors>:
	if (status != HAL_OK) return 1;

	return 0;
}

int apds9960_read_colors(I2C_HandleTypeDef *hi2c, uint16_t *r, uint16_t *g, uint16_t *b) {
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b08a      	sub	sp, #40	@ 0x28
 80010fa:	af04      	add	r7, sp, #16
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	603b      	str	r3, [r7, #0]
	uint8_t rx[6];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, APDS9960_ADDR, APDS9960_REG_RGBDATA_START, 1, &rx[0], 6, HAL_MAX_DELAY);
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	2306      	movs	r3, #6
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	2296      	movs	r2, #150	@ 0x96
 8001118:	2172      	movs	r1, #114	@ 0x72
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f001 fc7c 	bl	8002a18 <HAL_I2C_Mem_Read>
 8001120:	4603      	mov	r3, r0
 8001122:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return 1;
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <apds9960_read_colors+0x38>
 800112a:	2301      	movs	r3, #1
 800112c:	e01e      	b.n	800116c <apds9960_read_colors+0x76>

	// łączenie bitów 2x8 -> 16
	*r = rx[0] | (rx[1] << 8);
 800112e:	7c3b      	ldrb	r3, [r7, #16]
 8001130:	b21a      	sxth	r2, r3
 8001132:	7c7b      	ldrb	r3, [r7, #17]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21b      	sxth	r3, r3
 800113c:	b29a      	uxth	r2, r3
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	801a      	strh	r2, [r3, #0]
	*g = rx[2] | (rx[3] << 8);
 8001142:	7cbb      	ldrb	r3, [r7, #18]
 8001144:	b21a      	sxth	r2, r3
 8001146:	7cfb      	ldrb	r3, [r7, #19]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21b      	sxth	r3, r3
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	801a      	strh	r2, [r3, #0]
	*b = rx[4] | (rx[5] << 8);
 8001156:	7d3b      	ldrb	r3, [r7, #20]
 8001158:	b21a      	sxth	r2, r3
 800115a:	7d7b      	ldrb	r3, [r7, #21]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21b      	sxth	r3, r3
 8001160:	4313      	orrs	r3, r2
 8001162:	b21b      	sxth	r3, r3
 8001164:	b29a      	uxth	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	801a      	strh	r2, [r3, #0]

	return 0;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <ST7735_Reset>:
#define ST7735_COMMAND_MODE HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
#define ST7735_DATA_MODE HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);



static void ST7735_Reset() { //Resetowanie do stanu początkowego
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800117e:	4807      	ldr	r0, [pc, #28]	@ (800119c <ST7735_Reset+0x28>)
 8001180:	f001 f9d8 	bl	8002534 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001184:	2005      	movs	r0, #5
 8001186:	f000 ff47 	bl	8002018 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <ST7735_Reset+0x28>)
 8001192:	f001 f9cf 	bl	8002534 <HAL_GPIO_WritePin>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40020400 	.word	0x40020400

080011a0 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {//Wysłanie komendy do wyświetlacza(1 bit)
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	ST7735_COMMAND_MODE;
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b0:	4806      	ldr	r0, [pc, #24]	@ (80011cc <ST7735_WriteCommand+0x2c>)
 80011b2:	f001 f9bf 	bl	8002534 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80011b6:	1df9      	adds	r1, r7, #7
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	2201      	movs	r2, #1
 80011be:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <ST7735_WriteCommand+0x30>)
 80011c0:	f002 fedd 	bl	8003f7e <HAL_SPI_Transmit>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020400 	.word	0x40020400
 80011d0:	20003758 	.word	0x20003758

080011d4 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) { //Wysłanie informacji graficznych(kilka bitów)
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
	ST7735_DATA_MODE;
 80011de:	2201      	movs	r2, #1
 80011e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011e4:	4807      	ldr	r0, [pc, #28]	@ (8001204 <ST7735_WriteData+0x30>)
 80011e6:	f001 f9a5 	bl	8002534 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	4804      	ldr	r0, [pc, #16]	@ (8001208 <ST7735_WriteData+0x34>)
 80011f6:	f002 fec2 	bl	8003f7e <HAL_SPI_Transmit>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40020400 	.word	0x40020400
 8001208:	20003758 	.word	0x20003758

0800120c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) { //funckja do wysłania wszystkich dyrektyw wyświetlacza
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800121e:	e024      	b.n	800126a <ST7735_ExecuteCommandList+0x5e>
        uint8_t cmd = *addr++;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	73bb      	strb	r3, [r7, #14]

        if (cmd == DELAY) {
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	2b80      	cmp	r3, #128	@ 0x80
 800122e:	d10a      	bne.n	8001246 <ST7735_ExecuteCommandList+0x3a>
        	ms = (*addr++)*2;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	817b      	strh	r3, [r7, #10]
        	HAL_Delay(ms);
 800123c:	897b      	ldrh	r3, [r7, #10]
 800123e:	4618      	mov	r0, r3
 8001240:	f000 feea 	bl	8002018 <HAL_Delay>
 8001244:	e011      	b.n	800126a <ST7735_ExecuteCommandList+0x5e>
        } else {
        	ST7735_WriteCommand(cmd);
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ffa9 	bl	80011a0 <ST7735_WriteCommand>
        	numArgs = *addr++;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	737b      	strb	r3, [r7, #13]
        	ST7735_WriteData((uint8_t*)addr, numArgs);
 8001258:	7b7b      	ldrb	r3, [r7, #13]
 800125a:	4619      	mov	r1, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ffb9 	bl	80011d4 <ST7735_WriteData>
        	addr += numArgs;
 8001262:	7b7b      	ldrb	r3, [r7, #13]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	607b      	str	r3, [r7, #4]
    while(numCommands--) {
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	1e5a      	subs	r2, r3, #1
 800126e:	73fa      	strb	r2, [r7, #15]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1d5      	bne.n	8001220 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) { //Obaszar wyświetlania danych
 800127e:	b590      	push	{r4, r7, lr}
 8001280:	b085      	sub	sp, #20
 8001282:	af00      	add	r7, sp, #0
 8001284:	4604      	mov	r4, r0
 8001286:	4608      	mov	r0, r1
 8001288:	4611      	mov	r1, r2
 800128a:	461a      	mov	r2, r3
 800128c:	4623      	mov	r3, r4
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4603      	mov	r3, r0
 8001292:	71bb      	strb	r3, [r7, #6]
 8001294:	460b      	mov	r3, r1
 8001296:	717b      	strb	r3, [r7, #5]
 8001298:	4613      	mov	r3, r2
 800129a:	713b      	strb	r3, [r7, #4]
    // adres kolumn
    ST7735_WriteCommand(ST7735_CASET);
 800129c:	202a      	movs	r0, #42	@ 0x2a
 800129e:	f7ff ff7f 	bl	80011a0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80012a2:	2300      	movs	r3, #0
 80012a4:	733b      	strb	r3, [r7, #12]
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	737b      	strb	r3, [r7, #13]
 80012aa:	2300      	movs	r3, #0
 80012ac:	73bb      	strb	r3, [r7, #14]
 80012ae:	797b      	ldrb	r3, [r7, #5]
 80012b0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	2104      	movs	r1, #4
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff8b 	bl	80011d4 <ST7735_WriteData>

    // adres wierszy
    ST7735_WriteCommand(ST7735_RASET);
 80012be:	202b      	movs	r0, #43	@ 0x2b
 80012c0:	f7ff ff6e 	bl	80011a0 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80012c4:	79bb      	ldrb	r3, [r7, #6]
 80012c6:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80012c8:	793b      	ldrb	r3, [r7, #4]
 80012ca:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2104      	movs	r1, #4
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff7e 	bl	80011d4 <ST7735_WriteData>

    ST7735_WriteCommand(ST7735_RAMWR);
 80012d8:	202c      	movs	r0, #44	@ 0x2c
 80012da:	f7ff ff61 	bl	80011a0 <ST7735_WriteCommand>
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd90      	pop	{r4, r7, pc}
	...

080012e8 <ST7735_Init>:

void ST7735_Init() { //Uruchamia wyświetlacz
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	ST7735_SELECT;
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012f2:	4808      	ldr	r0, [pc, #32]	@ (8001314 <ST7735_Init+0x2c>)
 80012f4:	f001 f91e 	bl	8002534 <HAL_GPIO_WritePin>
    ST7735_Reset();
 80012f8:	f7ff ff3c 	bl	8001174 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds);
 80012fc:	4806      	ldr	r0, [pc, #24]	@ (8001318 <ST7735_Init+0x30>)
 80012fe:	f7ff ff85 	bl	800120c <ST7735_ExecuteCommandList>
    ST7735_UNSELECT;
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <ST7735_Init+0x2c>)
 800130a:	f001 f913 	bl	8002534 <HAL_GPIO_WritePin>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40020400 	.word	0x40020400
 8001318:	0800a154 	.word	0x0800a154

0800131c <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) { // pojedyńczy znak
 800131c:	b082      	sub	sp, #8
 800131e:	b590      	push	{r4, r7, lr}
 8001320:	b089      	sub	sp, #36	@ 0x24
 8001322:	af00      	add	r7, sp, #0
 8001324:	637b      	str	r3, [r7, #52]	@ 0x34
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
 800132a:	460b      	mov	r3, r1
 800132c:	80bb      	strh	r3, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	b2d8      	uxtb	r0, r3
 8001336:	88bb      	ldrh	r3, [r7, #4]
 8001338:	b2d9      	uxtb	r1, r3
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001342:	4413      	add	r3, r2
 8001344:	b2db      	uxtb	r3, r3
 8001346:	3b01      	subs	r3, #1
 8001348:	b2dc      	uxtb	r4, r3
 800134a:	88bb      	ldrh	r3, [r7, #4]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001352:	4413      	add	r3, r2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3b01      	subs	r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	4622      	mov	r2, r4
 800135c:	f7ff ff8f 	bl	800127e <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	e043      	b.n	80013ee <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001366:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	3b20      	subs	r3, #32
 800136c:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8001370:	fb01 f303 	mul.w	r3, r1, r3
 8001374:	4619      	mov	r1, r3
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	440b      	add	r3, r1
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	e029      	b.n	80013dc <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00e      	beq.n	80013b6 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001398:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	b29b      	uxth	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	743b      	strb	r3, [r7, #16]
 80013a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2102      	movs	r1, #2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff10 	bl	80011d4 <ST7735_WriteData>
 80013b4:	e00f      	b.n	80013d6 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80013b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	733b      	strb	r3, [r7, #12]
 80013c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2102      	movs	r1, #2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff feff 	bl	80011d4 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	3301      	adds	r3, #1
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80013e0:	461a      	mov	r2, r3
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d3cf      	bcc.n	8001388 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	3301      	adds	r3, #1
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80013f2:	461a      	mov	r2, r3
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d3b5      	bcc.n	8001366 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	3724      	adds	r7, #36	@ 0x24
 8001400:	46bd      	mov	sp, r7
 8001402:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001406:	b002      	add	sp, #8
 8001408:	4770      	bx	lr
	...

0800140c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, char* str, FontDef font, uint16_t color, uint16_t bgcolor) { // Wysyłą ciąg znaków
 800140c:	b082      	sub	sp, #8
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af04      	add	r7, sp, #16
 8001414:	603a      	str	r2, [r7, #0]
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	4603      	mov	r3, r0
 800141a:	80fb      	strh	r3, [r7, #6]
 800141c:	460b      	mov	r3, r1
 800141e:	80bb      	strh	r3, [r7, #4]
	ST7735_SELECT;
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001426:	4822      	ldr	r0, [pc, #136]	@ (80014b0 <ST7735_WriteString+0xa4>)
 8001428:	f001 f884 	bl	8002534 <HAL_GPIO_WritePin>

    while(*str) {
 800142c:	e02d      	b.n	800148a <ST7735_WriteString+0x7e>
        if(x + font.width >= ST7735_WIDTH) {
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	7d3a      	ldrb	r2, [r7, #20]
 8001432:	4413      	add	r3, r2
 8001434:	2b7f      	cmp	r3, #127	@ 0x7f
 8001436:	dd13      	ble.n	8001460 <ST7735_WriteString+0x54>
            x = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800143c:	7d7b      	ldrb	r3, [r7, #21]
 800143e:	461a      	mov	r2, r3
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001446:	88bb      	ldrh	r3, [r7, #4]
 8001448:	7d7a      	ldrb	r2, [r7, #21]
 800144a:	4413      	add	r3, r2
 800144c:	2b9f      	cmp	r3, #159	@ 0x9f
 800144e:	dc21      	bgt.n	8001494 <ST7735_WriteString+0x88>
                break;
            }

            if(*str == ' ') { //Pomija spacje przy nowej linijce
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b20      	cmp	r3, #32
 8001456:	d103      	bne.n	8001460 <ST7735_WriteString+0x54>
                str++;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	603b      	str	r3, [r7, #0]
                continue;
 800145e:	e014      	b.n	800148a <ST7735_WriteString+0x7e>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	88b9      	ldrh	r1, [r7, #4]
 8001466:	88f8      	ldrh	r0, [r7, #6]
 8001468:	8c3b      	ldrh	r3, [r7, #32]
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	8bbb      	ldrh	r3, [r7, #28]
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f7ff ff51 	bl	800131c <ST7735_WriteChar>
        x += font.width;
 800147a:	7d3b      	ldrb	r3, [r7, #20]
 800147c:	461a      	mov	r2, r3
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	4413      	add	r3, r2
 8001482:	80fb      	strh	r3, [r7, #6]
        str++;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	603b      	str	r3, [r7, #0]
    while(*str) {
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1cd      	bne.n	800142e <ST7735_WriteString+0x22>
 8001492:	e000      	b.n	8001496 <ST7735_WriteString+0x8a>
                break;
 8001494:	bf00      	nop
    }

    ST7735_UNSELECT;
 8001496:	2201      	movs	r2, #1
 8001498:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800149c:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <ST7735_WriteString+0xa4>)
 800149e:	f001 f849 	bl	8002534 <HAL_GPIO_WritePin>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014ac:	b002      	add	sp, #8
 80014ae:	4770      	bx	lr
 80014b0:	40020400 	.word	0x40020400

080014b4 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) { //definiuje obszar do wypełnienia
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4604      	mov	r4, r0
 80014bc:	4608      	mov	r0, r1
 80014be:	4611      	mov	r1, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	4623      	mov	r3, r4
 80014c4:	80fb      	strh	r3, [r7, #6]
 80014c6:	4603      	mov	r3, r0
 80014c8:	80bb      	strh	r3, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	807b      	strh	r3, [r7, #2]
 80014ce:	4613      	mov	r3, r2
 80014d0:	803b      	strh	r3, [r7, #0]
    // Niżej pozbywa się clippingu
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80014d6:	d872      	bhi.n	80015be <ST7735_FillRectangle+0x10a>
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	2b9f      	cmp	r3, #159	@ 0x9f
 80014dc:	d86f      	bhi.n	80015be <ST7735_FillRectangle+0x10a>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80014de:	88fa      	ldrh	r2, [r7, #6]
 80014e0:	887b      	ldrh	r3, [r7, #2]
 80014e2:	4413      	add	r3, r2
 80014e4:	2b80      	cmp	r3, #128	@ 0x80
 80014e6:	dd03      	ble.n	80014f0 <ST7735_FillRectangle+0x3c>
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80014ee:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80014f0:	88ba      	ldrh	r2, [r7, #4]
 80014f2:	883b      	ldrh	r3, [r7, #0]
 80014f4:	4413      	add	r3, r2
 80014f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80014f8:	dd03      	ble.n	8001502 <ST7735_FillRectangle+0x4e>
 80014fa:	88bb      	ldrh	r3, [r7, #4]
 80014fc:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8001500:	803b      	strh	r3, [r7, #0]

    ST7735_SELECT;
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001508:	482f      	ldr	r0, [pc, #188]	@ (80015c8 <ST7735_FillRectangle+0x114>)
 800150a:	f001 f813 	bl	8002534 <HAL_GPIO_WritePin>

    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	b2d8      	uxtb	r0, r3
 8001512:	88bb      	ldrh	r3, [r7, #4]
 8001514:	b2d9      	uxtb	r1, r3
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4413      	add	r3, r2
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3b01      	subs	r3, #1
 8001524:	b2dc      	uxtb	r4, r3
 8001526:	88bb      	ldrh	r3, [r7, #4]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	883b      	ldrh	r3, [r7, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4413      	add	r3, r2
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3b01      	subs	r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4622      	mov	r2, r4
 8001538:	f7ff fea1 	bl	800127e <ST7735_SetAddressWindow>

    //Poniżej zamienia dane w bufor do wysłania
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 800153c:	8c3b      	ldrh	r3, [r7, #32]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	b29b      	uxth	r3, r3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	723b      	strb	r3, [r7, #8]
 8001546:	8c3b      	ldrh	r3, [r7, #32]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4618      	mov	r0, r3
 8001552:	f002 ff35 	bl	80043c0 <malloc>
 8001556:	4603      	mov	r3, r0
 8001558:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 800155a:	2300      	movs	r3, #0
 800155c:	80fb      	strh	r3, [r7, #6]
 800155e:	e008      	b.n	8001572 <ST7735_FillRectangle+0xbe>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	893a      	ldrh	r2, [r7, #8]
 800156a:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	3301      	adds	r3, #1
 8001570:	80fb      	strh	r3, [r7, #6]
 8001572:	88fa      	ldrh	r2, [r7, #6]
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	429a      	cmp	r2, r3
 8001578:	d3f2      	bcc.n	8001560 <ST7735_FillRectangle+0xac>

    ST7735_DATA_MODE;
 800157a:	2201      	movs	r2, #1
 800157c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001580:	4811      	ldr	r0, [pc, #68]	@ (80015c8 <ST7735_FillRectangle+0x114>)
 8001582:	f000 ffd7 	bl	8002534 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8001586:	883b      	ldrh	r3, [r7, #0]
 8001588:	80bb      	strh	r3, [r7, #4]
 800158a:	e00b      	b.n	80015a4 <ST7735_FillRectangle+0xf0>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	b29a      	uxth	r2, r3
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	68f9      	ldr	r1, [r7, #12]
 8001598:	480c      	ldr	r0, [pc, #48]	@ (80015cc <ST7735_FillRectangle+0x118>)
 800159a:	f002 fcf0 	bl	8003f7e <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 800159e:	88bb      	ldrh	r3, [r7, #4]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	80bb      	strh	r3, [r7, #4]
 80015a4:	88bb      	ldrh	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <ST7735_FillRectangle+0xd8>

    free(line);
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f002 ff10 	bl	80043d0 <free>

    ST7735_UNSELECT;
 80015b0:	2201      	movs	r2, #1
 80015b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015b6:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <ST7735_FillRectangle+0x114>)
 80015b8:	f000 ffbc 	bl	8002534 <HAL_GPIO_WritePin>
 80015bc:	e000      	b.n	80015c0 <ST7735_FillRectangle+0x10c>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80015be:	bf00      	nop
}
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd90      	pop	{r4, r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40020400 	.word	0x40020400
 80015cc:	20003758 	.word	0x20003758

080015d0 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) { //Wypełnia tło
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	23a0      	movs	r3, #160	@ 0xa0
 80015e0:	2280      	movs	r2, #128	@ 0x80
 80015e2:	2100      	movs	r1, #0
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff ff65 	bl	80014b4 <ST7735_FillRectangle>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	0000      	movs	r0, r0
 80015f4:	0000      	movs	r0, r0
	...

080015f8 <Math>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


float Math(float r,float g,float b){
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8001602:	edc7 0a02 	vstr	s1, [r7, #8]
 8001606:	ed87 1a01 	vstr	s2, [r7, #4]

  float candidate = 0;
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  uint16_t candidate_distance = UINT16_MAX;
 8001610:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001614:	837b      	strh	r3, [r7, #26]


	for (int i = 0; i < DATA_LENGTH; i++) {
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e088      	b.n	800172e <Math+0x136>
		  uint16_t distance = sqrt(pow(data[i][0] - r, 2) + pow(data[i][1] - g, 2) + pow(data[i][2] - b, 2));
 800161c:	494e      	ldr	r1, [pc, #312]	@ (8001758 <Math+0x160>)
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	440b      	add	r3, r1
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001634:	edd7 7a03 	vldr	s15, [r7, #12]
 8001638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800163c:	ee17 0a90 	vmov	r0, s15
 8001640:	f7fe ff8a 	bl	8000558 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	ed9f 1b41 	vldr	d1, [pc, #260]	@ 8001750 <Math+0x158>
 800164c:	ec43 2b10 	vmov	d0, r2, r3
 8001650:	f007 fa28 	bl	8008aa4 <pow>
 8001654:	ec55 4b10 	vmov	r4, r5, d0
 8001658:	493f      	ldr	r1, [pc, #252]	@ (8001758 <Math+0x160>)
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	440b      	add	r3, r1
 8001666:	3302      	adds	r3, #2
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001672:	edd7 7a02 	vldr	s15, [r7, #8]
 8001676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167a:	ee17 0a90 	vmov	r0, s15
 800167e:	f7fe ff6b 	bl	8000558 <__aeabi_f2d>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	ed9f 1b32 	vldr	d1, [pc, #200]	@ 8001750 <Math+0x158>
 800168a:	ec43 2b10 	vmov	d0, r2, r3
 800168e:	f007 fa09 	bl	8008aa4 <pow>
 8001692:	ec53 2b10 	vmov	r2, r3, d0
 8001696:	4620      	mov	r0, r4
 8001698:	4629      	mov	r1, r5
 800169a:	f7fe fdff 	bl	800029c <__adddf3>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4614      	mov	r4, r2
 80016a4:	461d      	mov	r5, r3
 80016a6:	492c      	ldr	r1, [pc, #176]	@ (8001758 <Math+0x160>)
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	440b      	add	r3, r1
 80016b4:	3304      	adds	r3, #4
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	ee07 3a90 	vmov	s15, r3
 80016bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c8:	ee17 0a90 	vmov	r0, s15
 80016cc:	f7fe ff44 	bl	8000558 <__aeabi_f2d>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	ed9f 1b1e 	vldr	d1, [pc, #120]	@ 8001750 <Math+0x158>
 80016d8:	ec43 2b10 	vmov	d0, r2, r3
 80016dc:	f007 f9e2 	bl	8008aa4 <pow>
 80016e0:	ec53 2b10 	vmov	r2, r3, d0
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7fe fdd8 	bl	800029c <__adddf3>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	ec43 2b17 	vmov	d7, r2, r3
 80016f4:	eeb0 0a47 	vmov.f32	s0, s14
 80016f8:	eef0 0a67 	vmov.f32	s1, s15
 80016fc:	f007 fa42 	bl	8008b84 <sqrt>
 8001700:	ec53 2b10 	vmov	r2, r3, d0
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff fa56 	bl	8000bb8 <__aeabi_d2uiz>
 800170c:	4603      	mov	r3, r0
 800170e:	827b      	strh	r3, [r7, #18]

	      if (distance < candidate_distance) {
 8001710:	8a7a      	ldrh	r2, [r7, #18]
 8001712:	8b7b      	ldrh	r3, [r7, #26]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <Math+0x130>
	          candidate = results[i];
 8001718:	4a10      	ldr	r2, [pc, #64]	@ (800175c <Math+0x164>)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	61fb      	str	r3, [r7, #28]
	          candidate_distance = distance;
 8001724:	8a7b      	ldrh	r3, [r7, #18]
 8001726:	837b      	strh	r3, [r7, #26]
	for (int i = 0; i < DATA_LENGTH; i++) {
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f240 524b 	movw	r2, #1355	@ 0x54b
 8001734:	4293      	cmp	r3, r2
 8001736:	f77f af71 	ble.w	800161c <Math+0x24>
	          }
	      }

	return candidate;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	ee07 3a90 	vmov	s15, r3
}
 8001740:	eeb0 0a67 	vmov.f32	s0, s15
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bdb0      	pop	{r4, r5, r7, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	00000000 	.word	0x00000000
 8001754:	40000000 	.word	0x40000000
 8001758:	20000008 	.word	0x20000008
 800175c:	20001fd0 	.word	0x20001fd0

08001760 <ShowData>:

void ShowData(float candidate){
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af04      	add	r7, sp, #16
 8001766:	ed87 0a01 	vstr	s0, [r7, #4]
	  ST7735_FillRectangle(19, 67+15, 19+16*7, 67+15+1*10, ST7735_BLACK);
 800176a:	2300      	movs	r3, #0
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	235c      	movs	r3, #92	@ 0x5c
 8001770:	2283      	movs	r2, #131	@ 0x83
 8001772:	2152      	movs	r1, #82	@ 0x52
 8001774:	2013      	movs	r0, #19
 8001776:	f7ff fe9d 	bl	80014b4 <ST7735_FillRectangle>

	  char buf[16];
	  sprintf(buf, "%f nm", candidate);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7fe feec 	bl	8000558 <__aeabi_f2d>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	f107 0008 	add.w	r0, r7, #8
 8001788:	490b      	ldr	r1, [pc, #44]	@ (80017b8 <ShowData+0x58>)
 800178a:	f003 fe05 	bl	8005398 <siprintf>
	  ST7735_WriteString(19, 67+15, &buf[0], Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800178e:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <ShowData+0x5c>)
 8001790:	f107 0108 	add.w	r1, r7, #8
 8001794:	2200      	movs	r2, #0
 8001796:	9202      	str	r2, [sp, #8]
 8001798:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800179c:	9201      	str	r2, [sp, #4]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	9200      	str	r2, [sp, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	460a      	mov	r2, r1
 80017a6:	2152      	movs	r1, #82	@ 0x52
 80017a8:	2013      	movs	r0, #19
 80017aa:	f7ff fe2f 	bl	800140c <ST7735_WriteString>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	080099d0 	.word	0x080099d0
 80017bc:	20000000 	.word	0x20000000

080017c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b08d      	sub	sp, #52	@ 0x34
 80017c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c6:	f000 fbb5 	bl	8001f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ca:	f000 f895 	bl	80018f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ce:	f000 f957 	bl	8001a80 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017d2:	f000 f8ef 	bl	80019b4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80017d6:	f000 f91b 	bl	8001a10 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  //czujnik
  apds9960_init(&hi2c1);
 80017da:	4843      	ldr	r0, [pc, #268]	@ (80018e8 <main+0x128>)
 80017dc:	f7ff fc0a 	bl	8000ff4 <apds9960_init>


  //Wyswietlacz
  ST7735_Init();
 80017e0:	f7ff fd82 	bl	80012e8 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff fef3 	bl	80015d0 <ST7735_FillScreen>
  char ConstantText[] = "Dlugosc fali:";
 80017ea:	4b40      	ldr	r3, [pc, #256]	@ (80018ec <main+0x12c>)
 80017ec:	f107 040c 	add.w	r4, r7, #12
 80017f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f2:	c407      	stmia	r4!, {r0, r1, r2}
 80017f4:	8023      	strh	r3, [r4, #0]
  ST7735_WriteString(19, 67, &ConstantText[0], Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80017f6:	4b3e      	ldr	r3, [pc, #248]	@ (80018f0 <main+0x130>)
 80017f8:	f107 010c 	add.w	r1, r7, #12
 80017fc:	2200      	movs	r2, #0
 80017fe:	9202      	str	r2, [sp, #8]
 8001800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001804:	9201      	str	r2, [sp, #4]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	9200      	str	r2, [sp, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	460a      	mov	r2, r1
 800180e:	2143      	movs	r1, #67	@ 0x43
 8001810:	2013      	movs	r0, #19
 8001812:	f7ff fdfb 	bl	800140c <ST7735_WriteString>

    /* USER CODE BEGIN 3 */


	   //pomocniczne - do usunięcia
 	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001816:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800181a:	4836      	ldr	r0, [pc, #216]	@ (80018f4 <main+0x134>)
 800181c:	f000 fea3 	bl	8002566 <HAL_GPIO_TogglePin>
 	  HAL_Delay(100);
 8001820:	2064      	movs	r0, #100	@ 0x64
 8001822:	f000 fbf9 	bl	8002018 <HAL_Delay>


 	  uint16_t r, g, b;
 	  apds9960_read_colors(&hi2c1, &r, &g, &b);
 8001826:	1dbb      	adds	r3, r7, #6
 8001828:	f107 0208 	add.w	r2, r7, #8
 800182c:	f107 010a 	add.w	r1, r7, #10
 8001830:	482d      	ldr	r0, [pc, #180]	@ (80018e8 <main+0x128>)
 8001832:	f7ff fc60 	bl	80010f6 <apds9960_read_colors>

 	  r = 1.7*r;
 8001836:	897b      	ldrh	r3, [r7, #10]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe7b 	bl	8000534 <__aeabi_i2d>
 800183e:	a328      	add	r3, pc, #160	@ (adr r3, 80018e0 <main+0x120>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fee0 	bl	8000608 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f9b2 	bl	8000bb8 <__aeabi_d2uiz>
 8001854:	4603      	mov	r3, r0
 8001856:	b29b      	uxth	r3, r3
 8001858:	817b      	strh	r3, [r7, #10]
 	  g = 1.7*g;
 800185a:	893b      	ldrh	r3, [r7, #8]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe69 	bl	8000534 <__aeabi_i2d>
 8001862:	a31f      	add	r3, pc, #124	@ (adr r3, 80018e0 <main+0x120>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fece 	bl	8000608 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f7ff f9a0 	bl	8000bb8 <__aeabi_d2uiz>
 8001878:	4603      	mov	r3, r0
 800187a:	b29b      	uxth	r3, r3
 800187c:	813b      	strh	r3, [r7, #8]
 	  b = 1.7*b;
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fe57 	bl	8000534 <__aeabi_i2d>
 8001886:	a316      	add	r3, pc, #88	@ (adr r3, 80018e0 <main+0x120>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7fe febc 	bl	8000608 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff f98e 	bl	8000bb8 <__aeabi_d2uiz>
 800189c:	4603      	mov	r3, r0
 800189e:	b29b      	uxth	r3, r3
 80018a0:	80fb      	strh	r3, [r7, #6]



 	 float candidate = Math(r, g, b);
 80018a2:	897b      	ldrh	r3, [r7, #10]
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ac:	893b      	ldrh	r3, [r7, #8]
 80018ae:	ee07 3a10 	vmov	s14, r3
 80018b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	ee06 3a90 	vmov	s13, r3
 80018bc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80018c0:	eeb0 1a66 	vmov.f32	s2, s13
 80018c4:	eef0 0a47 	vmov.f32	s1, s14
 80018c8:	eeb0 0a67 	vmov.f32	s0, s15
 80018cc:	f7ff fe94 	bl	80015f8 <Math>
 80018d0:	ed87 0a07 	vstr	s0, [r7, #28]


 	 ShowData(candidate);
 80018d4:	ed97 0a07 	vldr	s0, [r7, #28]
 80018d8:	f7ff ff42 	bl	8001760 <ShowData>
   {
 80018dc:	bf00      	nop
 80018de:	e79a      	b.n	8001816 <main+0x56>
 80018e0:	33333333 	.word	0x33333333
 80018e4:	3ffb3333 	.word	0x3ffb3333
 80018e8:	20003704 	.word	0x20003704
 80018ec:	080099d8 	.word	0x080099d8
 80018f0:	20000000 	.word	0x20000000
 80018f4:	40020800 	.word	0x40020800

080018f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b094      	sub	sp, #80	@ 0x50
 80018fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fe:	f107 0320 	add.w	r3, r7, #32
 8001902:	2230      	movs	r2, #48	@ 0x30
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f003 fda9 	bl	800545e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <SystemClock_Config+0xb4>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	4a21      	ldr	r2, [pc, #132]	@ (80019ac <SystemClock_Config+0xb4>)
 8001926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800192a:	6413      	str	r3, [r2, #64]	@ 0x40
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <SystemClock_Config+0xb4>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001938:	2300      	movs	r3, #0
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	4b1c      	ldr	r3, [pc, #112]	@ (80019b0 <SystemClock_Config+0xb8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a1b      	ldr	r2, [pc, #108]	@ (80019b0 <SystemClock_Config+0xb8>)
 8001942:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <SystemClock_Config+0xb8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001954:	2302      	movs	r3, #2
 8001956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001958:	2301      	movs	r3, #1
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800195c:	2310      	movs	r3, #16
 800195e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001960:	2300      	movs	r3, #0
 8001962:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001964:	f107 0320 	add.w	r3, r7, #32
 8001968:	4618      	mov	r0, r3
 800196a:	f001 fe3b 	bl	80035e4 <HAL_RCC_OscConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001974:	f000 f8ee 	bl	8001b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001978:	230f      	movs	r3, #15
 800197a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f002 f89e 	bl	8003ad4 <HAL_RCC_ClockConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800199e:	f000 f8d9 	bl	8001b54 <Error_Handler>
  }
}
 80019a2:	bf00      	nop
 80019a4:	3750      	adds	r7, #80	@ 0x50
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40007000 	.word	0x40007000

080019b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019ba:	4a13      	ldr	r2, [pc, #76]	@ (8001a08 <MX_I2C1_Init+0x54>)
 80019bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019be:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019c0:	4a12      	ldr	r2, [pc, #72]	@ (8001a0c <MX_I2C1_Init+0x58>)
 80019c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019de:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019e4:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	@ (8001a04 <MX_I2C1_Init+0x50>)
 80019f2:	f000 fdd3 	bl	800259c <HAL_I2C_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019fc:	f000 f8aa 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20003704 	.word	0x20003704
 8001a08:	40005400 	.word	0x40005400
 8001a0c:	000186a0 	.word	0x000186a0

08001a10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <MX_SPI1_Init+0x68>)
 8001a16:	4a19      	ldr	r2, [pc, #100]	@ (8001a7c <MX_SPI1_Init+0x6c>)
 8001a18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <MX_SPI1_Init+0x68>)
 8001a1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <MX_SPI1_Init+0x68>)
 8001a24:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a28:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a2a:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <MX_SPI1_Init+0x68>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <MX_SPI1_Init+0x68>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a36:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <MX_SPI1_Init+0x68>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a78 <MX_SPI1_Init+0x68>)
 8001a3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <MX_SPI1_Init+0x68>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <MX_SPI1_Init+0x68>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a50:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <MX_SPI1_Init+0x68>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a56:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <MX_SPI1_Init+0x68>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <MX_SPI1_Init+0x68>)
 8001a5e:	220a      	movs	r2, #10
 8001a60:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a62:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <MX_SPI1_Init+0x68>)
 8001a64:	f002 fa02 	bl	8003e6c <HAL_SPI_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001a6e:	f000 f871 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20003758 	.word	0x20003758
 8001a7c:	40013000 	.word	0x40013000

08001a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b48 <MX_GPIO_Init+0xc8>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8001b48 <MX_GPIO_Init+0xc8>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b28      	ldr	r3, [pc, #160]	@ (8001b48 <MX_GPIO_Init+0xc8>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	4b24      	ldr	r3, [pc, #144]	@ (8001b48 <MX_GPIO_Init+0xc8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a23      	ldr	r2, [pc, #140]	@ (8001b48 <MX_GPIO_Init+0xc8>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b21      	ldr	r3, [pc, #132]	@ (8001b48 <MX_GPIO_Init+0xc8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <MX_GPIO_Init+0xc8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b48 <MX_GPIO_Init+0xc8>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ade:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <MX_GPIO_Init+0xc8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001af0:	4816      	ldr	r0, [pc, #88]	@ (8001b4c <MX_GPIO_Init+0xcc>)
 8001af2:	f000 fd1f 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8001afc:	4814      	ldr	r0, [pc, #80]	@ (8001b50 <MX_GPIO_Init+0xd0>)
 8001afe:	f000 fd19 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480c      	ldr	r0, [pc, #48]	@ (8001b4c <MX_GPIO_Init+0xcc>)
 8001b1c:	f000 fb86 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001b20:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <MX_GPIO_Init+0xd0>)
 8001b3a:	f000 fb77 	bl	800222c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020800 	.word	0x40020800
 8001b50:	40020400 	.word	0x40020400

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <Error_Handler+0x8>

08001b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b76:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	4a08      	ldr	r2, [pc, #32]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	@ 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a19      	ldr	r2, [pc, #100]	@ (8001c34 <HAL_I2C_MspInit+0x84>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12b      	bne.n	8001c2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <HAL_I2C_MspInit+0x88>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	4a17      	ldr	r2, [pc, #92]	@ (8001c38 <HAL_I2C_MspInit+0x88>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_I2C_MspInit+0x88>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bee:	23c0      	movs	r3, #192	@ 0xc0
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf2:	2312      	movs	r3, #18
 8001bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <HAL_I2C_MspInit+0x8c>)
 8001c0a:	f000 fb0f 	bl	800222c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <HAL_I2C_MspInit+0x88>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	4a08      	ldr	r2, [pc, #32]	@ (8001c38 <HAL_I2C_MspInit+0x88>)
 8001c18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <HAL_I2C_MspInit+0x88>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	@ 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40005400 	.word	0x40005400
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020400 	.word	0x40020400

08001c40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	@ 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a19      	ldr	r2, [pc, #100]	@ (8001cc4 <HAL_SPI_MspInit+0x84>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d12b      	bne.n	8001cba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	4a17      	ldr	r2, [pc, #92]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a10      	ldr	r2, [pc, #64]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c9a:	23e0      	movs	r3, #224	@ 0xe0
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001caa:	2305      	movs	r3, #5
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <HAL_SPI_MspInit+0x8c>)
 8001cb6:	f000 fab9 	bl	800222c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	@ 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40013000 	.word	0x40013000
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020000 	.word	0x40020000

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <NMI_Handler+0x4>

08001cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <HardFault_Handler+0x4>

08001ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <MemManage_Handler+0x4>

08001ce8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <BusFault_Handler+0x4>

08001cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <UsageFault_Handler+0x4>

08001cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d26:	f000 f957 	bl	8001fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  return 1;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_kill>:

int _kill(int pid, int sig)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d48:	f003 fbec 	bl	8005524 <__errno>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2216      	movs	r2, #22
 8001d50:	601a      	str	r2, [r3, #0]
  return -1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <_exit>:

void _exit (int status)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d66:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ffe7 	bl	8001d3e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <_exit+0x12>

08001d74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	e00a      	b.n	8001d9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d86:	f3af 8000 	nop.w
 8001d8a:	4601      	mov	r1, r0
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	60ba      	str	r2, [r7, #8]
 8001d92:	b2ca      	uxtb	r2, r1
 8001d94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	dbf0      	blt.n	8001d86 <_read+0x12>
  }

  return len;
 8001da4:	687b      	ldr	r3, [r7, #4]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e009      	b.n	8001dd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	60ba      	str	r2, [r7, #8]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dbf1      	blt.n	8001dc0 <_write+0x12>
  }
  return len;
 8001ddc:	687b      	ldr	r3, [r7, #4]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <_close>:

int _close(int file)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e0e:	605a      	str	r2, [r3, #4]
  return 0;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <_isatty>:

int _isatty(int file)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e58:	4a14      	ldr	r2, [pc, #80]	@ (8001eac <_sbrk+0x5c>)
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <_sbrk+0x60>)
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e64:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <_sbrk+0x64>)
 8001e6e:	4a12      	ldr	r2, [pc, #72]	@ (8001eb8 <_sbrk+0x68>)
 8001e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e72:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d207      	bcs.n	8001e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e80:	f003 fb50 	bl	8005524 <__errno>
 8001e84:	4603      	mov	r3, r0
 8001e86:	220c      	movs	r2, #12
 8001e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	e009      	b.n	8001ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e90:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e96:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <_sbrk+0x64>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a05      	ldr	r2, [pc, #20]	@ (8001eb4 <_sbrk+0x64>)
 8001ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20020000 	.word	0x20020000
 8001eb0:	00000400 	.word	0x00000400
 8001eb4:	200037b0 	.word	0x200037b0
 8001eb8:	20003908 	.word	0x20003908

08001ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <SystemInit+0x20>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec6:	4a05      	ldr	r2, [pc, #20]	@ (8001edc <SystemInit+0x20>)
 8001ec8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ecc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ee4:	f7ff ffea 	bl	8001ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee8:	480c      	ldr	r0, [pc, #48]	@ (8001f1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eea:	490d      	ldr	r1, [pc, #52]	@ (8001f20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eec:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef0:	e002      	b.n	8001ef8 <LoopCopyDataInit>

08001ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef6:	3304      	adds	r3, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001efc:	d3f9      	bcc.n	8001ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efe:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f00:	4c0a      	ldr	r4, [pc, #40]	@ (8001f2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f04:	e001      	b.n	8001f0a <LoopFillZerobss>

08001f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f08:	3204      	adds	r2, #4

08001f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f0c:	d3fb      	bcc.n	8001f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f003 fb0f 	bl	8005530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f12:	f7ff fc55 	bl	80017c0 <main>
  bx  lr    
 8001f16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f20:	200036e8 	.word	0x200036e8
  ldr r2, =_sidata
 8001f24:	0800a650 	.word	0x0800a650
  ldr r2, =_sbss
 8001f28:	200036e8 	.word	0x200036e8
  ldr r4, =_ebss
 8001f2c:	20003904 	.word	0x20003904

08001f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f30:	e7fe      	b.n	8001f30 <ADC_IRQHandler>
	...

08001f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f38:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f74 <HAL_Init+0x40>)
 8001f3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f44:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <HAL_Init+0x40>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <HAL_Init+0x40>)
 8001f4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f50:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <HAL_Init+0x40>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a07      	ldr	r2, [pc, #28]	@ (8001f74 <HAL_Init+0x40>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	f000 f931 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f62:	200f      	movs	r0, #15
 8001f64:	f000 f808 	bl	8001f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f68:	f7ff fdfa 	bl	8001b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023c00 	.word	0x40023c00

08001f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f80:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <HAL_InitTick+0x54>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <HAL_InitTick+0x58>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f93b 	bl	8002212 <HAL_SYSTICK_Config>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00e      	b.n	8001fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b0f      	cmp	r3, #15
 8001faa:	d80a      	bhi.n	8001fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fac:	2200      	movs	r2, #0
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f000 f911 	bl	80021da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb8:	4a06      	ldr	r2, [pc, #24]	@ (8001fd4 <HAL_InitTick+0x5c>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20003500 	.word	0x20003500
 8001fd0:	20003508 	.word	0x20003508
 8001fd4:	20003504 	.word	0x20003504

08001fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_IncTick+0x20>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_IncTick+0x24>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <HAL_IncTick+0x24>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20003508 	.word	0x20003508
 8001ffc:	200037b4 	.word	0x200037b4

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	200037b4 	.word	0x200037b4

08002018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff ffee 	bl	8002000 <HAL_GetTick>
 8002024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d005      	beq.n	800203e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_Delay+0x44>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800203e:	bf00      	nop
 8002040:	f7ff ffde 	bl	8002000 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d8f7      	bhi.n	8002040 <HAL_Delay+0x28>
  {
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20003508 	.word	0x20003508

08002060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002070:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002088:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800208c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002092:	4a04      	ldr	r2, [pc, #16]	@ (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	60d3      	str	r3, [r2, #12]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ac:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	f003 0307 	and.w	r3, r3, #7
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	@ (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	@ (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	@ 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	@ 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002190:	d301      	bcc.n	8002196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002192:	2301      	movs	r3, #1
 8002194:	e00f      	b.n	80021b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002196:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <SysTick_Config+0x40>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219e:	210f      	movs	r1, #15
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f7ff ff8e 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a8:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <SysTick_Config+0x40>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ae:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <SysTick_Config+0x40>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000e010 	.word	0xe000e010

080021c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff47 	bl	8002060 <__NVIC_SetPriorityGrouping>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ec:	f7ff ff5c 	bl	80020a8 <__NVIC_GetPriorityGrouping>
 80021f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f7ff ff8e 	bl	8002118 <NVIC_EncodePriority>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff5d 	bl	80020c4 <__NVIC_SetPriority>
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffb0 	bl	8002180 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	@ 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e159      	b.n	80024fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	429a      	cmp	r2, r3
 8002262:	f040 8148 	bne.w	80024f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d005      	beq.n	800227e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227a:	2b02      	cmp	r3, #2
 800227c:	d130      	bne.n	80022e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 0201 	and.w	r2, r3, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d017      	beq.n	800231c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d123      	bne.n	8002370 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	08da      	lsrs	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3208      	adds	r2, #8
 8002330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	69b9      	ldr	r1, [r7, #24]
 800236c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0203 	and.w	r2, r3, #3
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80a2 	beq.w	80024f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b57      	ldr	r3, [pc, #348]	@ (8002514 <HAL_GPIO_Init+0x2e8>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	4a56      	ldr	r2, [pc, #344]	@ (8002514 <HAL_GPIO_Init+0x2e8>)
 80023bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023c2:	4b54      	ldr	r3, [pc, #336]	@ (8002514 <HAL_GPIO_Init+0x2e8>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ce:	4a52      	ldr	r2, [pc, #328]	@ (8002518 <HAL_GPIO_Init+0x2ec>)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3302      	adds	r3, #2
 80023d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a49      	ldr	r2, [pc, #292]	@ (800251c <HAL_GPIO_Init+0x2f0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d019      	beq.n	800242e <HAL_GPIO_Init+0x202>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a48      	ldr	r2, [pc, #288]	@ (8002520 <HAL_GPIO_Init+0x2f4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_GPIO_Init+0x1fe>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a47      	ldr	r2, [pc, #284]	@ (8002524 <HAL_GPIO_Init+0x2f8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00d      	beq.n	8002426 <HAL_GPIO_Init+0x1fa>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a46      	ldr	r2, [pc, #280]	@ (8002528 <HAL_GPIO_Init+0x2fc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <HAL_GPIO_Init+0x1f6>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a45      	ldr	r2, [pc, #276]	@ (800252c <HAL_GPIO_Init+0x300>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_GPIO_Init+0x1f2>
 800241a:	2304      	movs	r3, #4
 800241c:	e008      	b.n	8002430 <HAL_GPIO_Init+0x204>
 800241e:	2307      	movs	r3, #7
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x204>
 8002422:	2303      	movs	r3, #3
 8002424:	e004      	b.n	8002430 <HAL_GPIO_Init+0x204>
 8002426:	2302      	movs	r3, #2
 8002428:	e002      	b.n	8002430 <HAL_GPIO_Init+0x204>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_GPIO_Init+0x204>
 800242e:	2300      	movs	r3, #0
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	f002 0203 	and.w	r2, r2, #3
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	4093      	lsls	r3, r2
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002440:	4935      	ldr	r1, [pc, #212]	@ (8002518 <HAL_GPIO_Init+0x2ec>)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244e:	4b38      	ldr	r3, [pc, #224]	@ (8002530 <HAL_GPIO_Init+0x304>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002472:	4a2f      	ldr	r2, [pc, #188]	@ (8002530 <HAL_GPIO_Init+0x304>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002478:	4b2d      	ldr	r3, [pc, #180]	@ (8002530 <HAL_GPIO_Init+0x304>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800249c:	4a24      	ldr	r2, [pc, #144]	@ (8002530 <HAL_GPIO_Init+0x304>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a2:	4b23      	ldr	r3, [pc, #140]	@ (8002530 <HAL_GPIO_Init+0x304>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002530 <HAL_GPIO_Init+0x304>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024cc:	4b18      	ldr	r3, [pc, #96]	@ (8002530 <HAL_GPIO_Init+0x304>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002530 <HAL_GPIO_Init+0x304>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	f67f aea2 	bls.w	8002248 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	40013800 	.word	0x40013800
 800251c:	40020000 	.word	0x40020000
 8002520:	40020400 	.word	0x40020400
 8002524:	40020800 	.word	0x40020800
 8002528:	40020c00 	.word	0x40020c00
 800252c:	40021000 	.word	0x40021000
 8002530:	40013c00 	.word	0x40013c00

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002550:	e003      	b.n	800255a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002566:	b480      	push	{r7}
 8002568:	b085      	sub	sp, #20
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002578:	887a      	ldrh	r2, [r7, #2]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4013      	ands	r3, r2
 800257e:	041a      	lsls	r2, r3, #16
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43d9      	mvns	r1, r3
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	400b      	ands	r3, r1
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e12b      	b.n	8002806 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff faf4 	bl	8001bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2224      	movs	r2, #36	@ 0x24
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002600:	f001 fc20 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 8002604:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a81      	ldr	r2, [pc, #516]	@ (8002810 <HAL_I2C_Init+0x274>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d807      	bhi.n	8002620 <HAL_I2C_Init+0x84>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4a80      	ldr	r2, [pc, #512]	@ (8002814 <HAL_I2C_Init+0x278>)
 8002614:	4293      	cmp	r3, r2
 8002616:	bf94      	ite	ls
 8002618:	2301      	movls	r3, #1
 800261a:	2300      	movhi	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e006      	b.n	800262e <HAL_I2C_Init+0x92>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4a7d      	ldr	r2, [pc, #500]	@ (8002818 <HAL_I2C_Init+0x27c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	bf94      	ite	ls
 8002628:	2301      	movls	r3, #1
 800262a:	2300      	movhi	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e0e7      	b.n	8002806 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4a78      	ldr	r2, [pc, #480]	@ (800281c <HAL_I2C_Init+0x280>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0c9b      	lsrs	r3, r3, #18
 8002640:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	430a      	orrs	r2, r1
 8002654:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a6a      	ldr	r2, [pc, #424]	@ (8002810 <HAL_I2C_Init+0x274>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d802      	bhi.n	8002670 <HAL_I2C_Init+0xd4>
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	3301      	adds	r3, #1
 800266e:	e009      	b.n	8002684 <HAL_I2C_Init+0xe8>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	4a69      	ldr	r2, [pc, #420]	@ (8002820 <HAL_I2C_Init+0x284>)
 800267c:	fba2 2303 	umull	r2, r3, r2, r3
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	3301      	adds	r3, #1
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	430b      	orrs	r3, r1
 800268a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002696:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	495c      	ldr	r1, [pc, #368]	@ (8002810 <HAL_I2C_Init+0x274>)
 80026a0:	428b      	cmp	r3, r1
 80026a2:	d819      	bhi.n	80026d8 <HAL_I2C_Init+0x13c>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e59      	subs	r1, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b2:	1c59      	adds	r1, r3, #1
 80026b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026b8:	400b      	ands	r3, r1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_I2C_Init+0x138>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1e59      	subs	r1, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d2:	e051      	b.n	8002778 <HAL_I2C_Init+0x1dc>
 80026d4:	2304      	movs	r3, #4
 80026d6:	e04f      	b.n	8002778 <HAL_I2C_Init+0x1dc>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d111      	bne.n	8002704 <HAL_I2C_Init+0x168>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1e58      	subs	r0, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	440b      	add	r3, r1
 80026ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	e012      	b.n	800272a <HAL_I2C_Init+0x18e>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e58      	subs	r0, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	0099      	lsls	r1, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	fbb0 f3f3 	udiv	r3, r0, r3
 800271a:	3301      	adds	r3, #1
 800271c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Init+0x196>
 800272e:	2301      	movs	r3, #1
 8002730:	e022      	b.n	8002778 <HAL_I2C_Init+0x1dc>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10e      	bne.n	8002758 <HAL_I2C_Init+0x1bc>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1e58      	subs	r0, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	460b      	mov	r3, r1
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	440b      	add	r3, r1
 8002748:	fbb0 f3f3 	udiv	r3, r0, r3
 800274c:	3301      	adds	r3, #1
 800274e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002756:	e00f      	b.n	8002778 <HAL_I2C_Init+0x1dc>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1e58      	subs	r0, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	0099      	lsls	r1, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	fbb0 f3f3 	udiv	r3, r0, r3
 800276e:	3301      	adds	r3, #1
 8002770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002774:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	6809      	ldr	r1, [r1, #0]
 800277c:	4313      	orrs	r3, r2
 800277e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69da      	ldr	r2, [r3, #28]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6911      	ldr	r1, [r2, #16]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68d2      	ldr	r2, [r2, #12]
 80027b2:	4311      	orrs	r1, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	000186a0 	.word	0x000186a0
 8002814:	001e847f 	.word	0x001e847f
 8002818:	003d08ff 	.word	0x003d08ff
 800281c:	431bde83 	.word	0x431bde83
 8002820:	10624dd3 	.word	0x10624dd3

08002824 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	4608      	mov	r0, r1
 800282e:	4611      	mov	r1, r2
 8002830:	461a      	mov	r2, r3
 8002832:	4603      	mov	r3, r0
 8002834:	817b      	strh	r3, [r7, #10]
 8002836:	460b      	mov	r3, r1
 8002838:	813b      	strh	r3, [r7, #8]
 800283a:	4613      	mov	r3, r2
 800283c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800283e:	f7ff fbdf 	bl	8002000 <HAL_GetTick>
 8002842:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b20      	cmp	r3, #32
 800284e:	f040 80d9 	bne.w	8002a04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2319      	movs	r3, #25
 8002858:	2201      	movs	r2, #1
 800285a:	496d      	ldr	r1, [pc, #436]	@ (8002a10 <HAL_I2C_Mem_Write+0x1ec>)
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fc8b 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002868:	2302      	movs	r3, #2
 800286a:	e0cc      	b.n	8002a06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_I2C_Mem_Write+0x56>
 8002876:	2302      	movs	r3, #2
 8002878:	e0c5      	b.n	8002a06 <HAL_I2C_Mem_Write+0x1e2>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d007      	beq.n	80028a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2221      	movs	r2, #33	@ 0x21
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2240      	movs	r2, #64	@ 0x40
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a3a      	ldr	r2, [r7, #32]
 80028ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4a4d      	ldr	r2, [pc, #308]	@ (8002a14 <HAL_I2C_Mem_Write+0x1f0>)
 80028e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028e2:	88f8      	ldrh	r0, [r7, #6]
 80028e4:	893a      	ldrh	r2, [r7, #8]
 80028e6:	8979      	ldrh	r1, [r7, #10]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	4603      	mov	r3, r0
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fac2 	bl	8002e7c <I2C_RequestMemoryWrite>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d052      	beq.n	80029a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e081      	b.n	8002a06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 fd50 	bl	80033ac <I2C_WaitOnTXEFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00d      	beq.n	800292e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	2b04      	cmp	r3, #4
 8002918:	d107      	bne.n	800292a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002928:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e06b      	b.n	8002a06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	781a      	ldrb	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b04      	cmp	r3, #4
 800296a:	d11b      	bne.n	80029a4 <HAL_I2C_Mem_Write+0x180>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002970:	2b00      	cmp	r3, #0
 8002972:	d017      	beq.n	80029a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	781a      	ldrb	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1aa      	bne.n	8002902 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fd43 	bl	800343c <I2C_WaitOnBTFFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d107      	bne.n	80029d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e016      	b.n	8002a06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e000      	b.n	8002a06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
  }
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	00100002 	.word	0x00100002
 8002a14:	ffff0000 	.word	0xffff0000

08002a18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08c      	sub	sp, #48	@ 0x30
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	4608      	mov	r0, r1
 8002a22:	4611      	mov	r1, r2
 8002a24:	461a      	mov	r2, r3
 8002a26:	4603      	mov	r3, r0
 8002a28:	817b      	strh	r3, [r7, #10]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	813b      	strh	r3, [r7, #8]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a32:	f7ff fae5 	bl	8002000 <HAL_GetTick>
 8002a36:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	f040 8214 	bne.w	8002e6e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	2319      	movs	r3, #25
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	497b      	ldr	r1, [pc, #492]	@ (8002c3c <HAL_I2C_Mem_Read+0x224>)
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fb91 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e207      	b.n	8002e70 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_I2C_Mem_Read+0x56>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e200      	b.n	8002e70 <HAL_I2C_Mem_Read+0x458>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d007      	beq.n	8002a94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aa2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2222      	movs	r2, #34	@ 0x22
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2240      	movs	r2, #64	@ 0x40
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002abe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a5b      	ldr	r2, [pc, #364]	@ (8002c40 <HAL_I2C_Mem_Read+0x228>)
 8002ad4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ad6:	88f8      	ldrh	r0, [r7, #6]
 8002ad8:	893a      	ldrh	r2, [r7, #8]
 8002ada:	8979      	ldrh	r1, [r7, #10]
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fa5e 	bl	8002fa8 <I2C_RequestMemoryRead>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e1bc      	b.n	8002e70 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d113      	bne.n	8002b26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	623b      	str	r3, [r7, #32]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	623b      	str	r3, [r7, #32]
 8002b12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e190      	b.n	8002e48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d11b      	bne.n	8002b66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	e170      	b.n	8002e48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d11b      	bne.n	8002ba6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	e150      	b.n	8002e48 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bbc:	e144      	b.n	8002e48 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	f200 80f1 	bhi.w	8002daa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d123      	bne.n	8002c18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fc79 	bl	80034cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e145      	b.n	8002e70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c16:	e117      	b.n	8002e48 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d14e      	bne.n	8002cbe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c26:	2200      	movs	r2, #0
 8002c28:	4906      	ldr	r1, [pc, #24]	@ (8002c44 <HAL_I2C_Mem_Read+0x22c>)
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 faa4 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e11a      	b.n	8002e70 <HAL_I2C_Mem_Read+0x458>
 8002c3a:	bf00      	nop
 8002c3c:	00100002 	.word	0x00100002
 8002c40:	ffff0000 	.word	0xffff0000
 8002c44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cbc:	e0c4      	b.n	8002e48 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	496c      	ldr	r1, [pc, #432]	@ (8002e78 <HAL_I2C_Mem_Read+0x460>)
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 fa55 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0cb      	b.n	8002e70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d20:	2200      	movs	r2, #0
 8002d22:	4955      	ldr	r1, [pc, #340]	@ (8002e78 <HAL_I2C_Mem_Read+0x460>)
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fa27 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e09d      	b.n	8002e70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002da8:	e04e      	b.n	8002e48 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fb8c 	bl	80034cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e058      	b.n	8002e70 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d124      	bne.n	8002e48 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d107      	bne.n	8002e16 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e14:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f47f aeb6 	bne.w	8002bbe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e000      	b.n	8002e70 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
  }
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3728      	adds	r7, #40	@ 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	00010004 	.word	0x00010004

08002e7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	4608      	mov	r0, r1
 8002e86:	4611      	mov	r1, r2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	817b      	strh	r3, [r7, #10]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	813b      	strh	r3, [r7, #8]
 8002e92:	4613      	mov	r3, r2
 8002e94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ea4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f960 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00d      	beq.n	8002eda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ecc:	d103      	bne.n	8002ed6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ed4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e05f      	b.n	8002f9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eda:	897b      	ldrh	r3, [r7, #10]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ee8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	6a3a      	ldr	r2, [r7, #32]
 8002eee:	492d      	ldr	r1, [pc, #180]	@ (8002fa4 <I2C_RequestMemoryWrite+0x128>)
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f9bb 	bl	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e04c      	b.n	8002f9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f18:	6a39      	ldr	r1, [r7, #32]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fa46 	bl	80033ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d107      	bne.n	8002f3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e02b      	b.n	8002f9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d105      	bne.n	8002f54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f48:	893b      	ldrh	r3, [r7, #8]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	611a      	str	r2, [r3, #16]
 8002f52:	e021      	b.n	8002f98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f54:	893b      	ldrh	r3, [r7, #8]
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f64:	6a39      	ldr	r1, [r7, #32]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fa20 	bl	80033ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d107      	bne.n	8002f8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e005      	b.n	8002f9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f8e:	893b      	ldrh	r3, [r7, #8]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	00010002 	.word	0x00010002

08002fa8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	4608      	mov	r0, r1
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	817b      	strh	r3, [r7, #10]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	813b      	strh	r3, [r7, #8]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fd0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f8c2 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00d      	beq.n	8003016 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003008:	d103      	bne.n	8003012 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003010:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e0aa      	b.n	800316c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003016:	897b      	ldrh	r3, [r7, #10]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003024:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	6a3a      	ldr	r2, [r7, #32]
 800302a:	4952      	ldr	r1, [pc, #328]	@ (8003174 <I2C_RequestMemoryRead+0x1cc>)
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f91d 	bl	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e097      	b.n	800316c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003054:	6a39      	ldr	r1, [r7, #32]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f9a8 	bl	80033ac <I2C_WaitOnTXEFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00d      	beq.n	800307e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	2b04      	cmp	r3, #4
 8003068:	d107      	bne.n	800307a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003078:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e076      	b.n	800316c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d105      	bne.n	8003090 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003084:	893b      	ldrh	r3, [r7, #8]
 8003086:	b2da      	uxtb	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	611a      	str	r2, [r3, #16]
 800308e:	e021      	b.n	80030d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003090:	893b      	ldrh	r3, [r7, #8]
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	b29b      	uxth	r3, r3
 8003096:	b2da      	uxtb	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800309e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a0:	6a39      	ldr	r1, [r7, #32]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f982 	bl	80033ac <I2C_WaitOnTXEFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00d      	beq.n	80030ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d107      	bne.n	80030c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e050      	b.n	800316c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030ca:	893b      	ldrh	r3, [r7, #8]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d6:	6a39      	ldr	r1, [r7, #32]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f967 	bl	80033ac <I2C_WaitOnTXEFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00d      	beq.n	8003100 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d107      	bne.n	80030fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e035      	b.n	800316c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800310e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	2200      	movs	r2, #0
 8003118:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f82b 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00d      	beq.n	8003144 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003136:	d103      	bne.n	8003140 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800313e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e013      	b.n	800316c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003144:	897b      	ldrh	r3, [r7, #10]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	6a3a      	ldr	r2, [r7, #32]
 8003158:	4906      	ldr	r1, [pc, #24]	@ (8003174 <I2C_RequestMemoryRead+0x1cc>)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f886 	bl	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	00010002 	.word	0x00010002

08003178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003188:	e048      	b.n	800321c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d044      	beq.n	800321c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7fe ff35 	bl	8002000 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d139      	bne.n	800321c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	0c1b      	lsrs	r3, r3, #16
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d10d      	bne.n	80031ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	43da      	mvns	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4013      	ands	r3, r2
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	e00c      	b.n	80031e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	43da      	mvns	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4013      	ands	r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d116      	bne.n	800321c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	f043 0220 	orr.w	r2, r3, #32
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e023      	b.n	8003264 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	0c1b      	lsrs	r3, r3, #16
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d10d      	bne.n	8003242 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	43da      	mvns	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4013      	ands	r3, r2
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	e00c      	b.n	800325c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	43da      	mvns	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4013      	ands	r3, r2
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	429a      	cmp	r2, r3
 8003260:	d093      	beq.n	800318a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800327a:	e071      	b.n	8003360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328a:	d123      	bne.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800329a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	f043 0204 	orr.w	r2, r3, #4
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e067      	b.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d041      	beq.n	8003360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032dc:	f7fe fe90 	bl	8002000 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d302      	bcc.n	80032f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d136      	bne.n	8003360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d10c      	bne.n	8003316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	43da      	mvns	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4013      	ands	r3, r2
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	bf14      	ite	ne
 800330e:	2301      	movne	r3, #1
 8003310:	2300      	moveq	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	e00b      	b.n	800332e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	43da      	mvns	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4013      	ands	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d016      	beq.n	8003360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	f043 0220 	orr.w	r2, r3, #32
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e021      	b.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	0c1b      	lsrs	r3, r3, #16
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d10c      	bne.n	8003384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	43da      	mvns	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	4013      	ands	r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf14      	ite	ne
 800337c:	2301      	movne	r3, #1
 800337e:	2300      	moveq	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e00b      	b.n	800339c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	43da      	mvns	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4013      	ands	r3, r2
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	bf14      	ite	ne
 8003396:	2301      	movne	r3, #1
 8003398:	2300      	moveq	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	f47f af6d 	bne.w	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b8:	e034      	b.n	8003424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f8e3 	bl	8003586 <I2C_IsAcknowledgeFailed>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e034      	b.n	8003434 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d028      	beq.n	8003424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d2:	f7fe fe15 	bl	8002000 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d302      	bcc.n	80033e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d11d      	bne.n	8003424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f2:	2b80      	cmp	r3, #128	@ 0x80
 80033f4:	d016      	beq.n	8003424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e007      	b.n	8003434 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342e:	2b80      	cmp	r3, #128	@ 0x80
 8003430:	d1c3      	bne.n	80033ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003448:	e034      	b.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f89b 	bl	8003586 <I2C_IsAcknowledgeFailed>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e034      	b.n	80034c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d028      	beq.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7fe fdcd 	bl	8002000 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11d      	bne.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d016      	beq.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e007      	b.n	80034c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d1c3      	bne.n	800344a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034d8:	e049      	b.n	800356e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d119      	bne.n	800351c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0210 	mvn.w	r2, #16
 80034f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e030      	b.n	800357e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fe fd70 	bl	8002000 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353c:	2b40      	cmp	r3, #64	@ 0x40
 800353e:	d016      	beq.n	800356e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e007      	b.n	800357e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003578:	2b40      	cmp	r3, #64	@ 0x40
 800357a:	d1ae      	bne.n	80034da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800359c:	d11b      	bne.n	80035d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	f043 0204 	orr.w	r2, r3, #4
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e267      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d075      	beq.n	80036ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003602:	4b88      	ldr	r3, [pc, #544]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b04      	cmp	r3, #4
 800360c:	d00c      	beq.n	8003628 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360e:	4b85      	ldr	r3, [pc, #532]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003616:	2b08      	cmp	r3, #8
 8003618:	d112      	bne.n	8003640 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800361a:	4b82      	ldr	r3, [pc, #520]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003622:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003626:	d10b      	bne.n	8003640 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	4b7e      	ldr	r3, [pc, #504]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d05b      	beq.n	80036ec <HAL_RCC_OscConfig+0x108>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d157      	bne.n	80036ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e242      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003648:	d106      	bne.n	8003658 <HAL_RCC_OscConfig+0x74>
 800364a:	4b76      	ldr	r3, [pc, #472]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a75      	ldr	r2, [pc, #468]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e01d      	b.n	8003694 <HAL_RCC_OscConfig+0xb0>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x98>
 8003662:	4b70      	ldr	r3, [pc, #448]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a6f      	ldr	r2, [pc, #444]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b6d      	ldr	r3, [pc, #436]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a6c      	ldr	r2, [pc, #432]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e00b      	b.n	8003694 <HAL_RCC_OscConfig+0xb0>
 800367c:	4b69      	ldr	r3, [pc, #420]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a68      	ldr	r2, [pc, #416]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	4b66      	ldr	r3, [pc, #408]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a65      	ldr	r2, [pc, #404]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 800368e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d013      	beq.n	80036c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fe fcb0 	bl	8002000 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a4:	f7fe fcac 	bl	8002000 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	@ 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e207      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0xc0>
 80036c2:	e014      	b.n	80036ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fe fc9c 	bl	8002000 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036cc:	f7fe fc98 	bl	8002000 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	@ 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e1f3      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	4b51      	ldr	r3, [pc, #324]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0xe8>
 80036ea:	e000      	b.n	80036ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d063      	beq.n	80037c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003706:	4b47      	ldr	r3, [pc, #284]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800370e:	2b08      	cmp	r3, #8
 8003710:	d11c      	bne.n	800374c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003712:	4b44      	ldr	r3, [pc, #272]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d116      	bne.n	800374c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371e:	4b41      	ldr	r3, [pc, #260]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_RCC_OscConfig+0x152>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d001      	beq.n	8003736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e1c7      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003736:	4b3b      	ldr	r3, [pc, #236]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4937      	ldr	r1, [pc, #220]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374a:	e03a      	b.n	80037c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d020      	beq.n	8003796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003754:	4b34      	ldr	r3, [pc, #208]	@ (8003828 <HAL_RCC_OscConfig+0x244>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fe fc51 	bl	8002000 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003762:	f7fe fc4d 	bl	8002000 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e1a8      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	4b2b      	ldr	r3, [pc, #172]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003780:	4b28      	ldr	r3, [pc, #160]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4925      	ldr	r1, [pc, #148]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]
 8003794:	e015      	b.n	80037c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003796:	4b24      	ldr	r3, [pc, #144]	@ (8003828 <HAL_RCC_OscConfig+0x244>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fe fc30 	bl	8002000 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a4:	f7fe fc2c 	bl	8002000 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e187      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d036      	beq.n	800383c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d016      	beq.n	8003804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d6:	4b15      	ldr	r3, [pc, #84]	@ (800382c <HAL_RCC_OscConfig+0x248>)
 80037d8:	2201      	movs	r2, #1
 80037da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037dc:	f7fe fc10 	bl	8002000 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e4:	f7fe fc0c 	bl	8002000 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e167      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <HAL_RCC_OscConfig+0x240>)
 80037f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x200>
 8003802:	e01b      	b.n	800383c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003804:	4b09      	ldr	r3, [pc, #36]	@ (800382c <HAL_RCC_OscConfig+0x248>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380a:	f7fe fbf9 	bl	8002000 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003810:	e00e      	b.n	8003830 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003812:	f7fe fbf5 	bl	8002000 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d907      	bls.n	8003830 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e150      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
 8003824:	40023800 	.word	0x40023800
 8003828:	42470000 	.word	0x42470000
 800382c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003830:	4b88      	ldr	r3, [pc, #544]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1ea      	bne.n	8003812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8097 	beq.w	8003978 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800384e:	4b81      	ldr	r3, [pc, #516]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10f      	bne.n	800387a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	4b7d      	ldr	r3, [pc, #500]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003862:	4a7c      	ldr	r2, [pc, #496]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003868:	6413      	str	r3, [r2, #64]	@ 0x40
 800386a:	4b7a      	ldr	r3, [pc, #488]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003876:	2301      	movs	r3, #1
 8003878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387a:	4b77      	ldr	r3, [pc, #476]	@ (8003a58 <HAL_RCC_OscConfig+0x474>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d118      	bne.n	80038b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003886:	4b74      	ldr	r3, [pc, #464]	@ (8003a58 <HAL_RCC_OscConfig+0x474>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a73      	ldr	r2, [pc, #460]	@ (8003a58 <HAL_RCC_OscConfig+0x474>)
 800388c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003892:	f7fe fbb5 	bl	8002000 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389a:	f7fe fbb1 	bl	8002000 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e10c      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003a58 <HAL_RCC_OscConfig+0x474>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d106      	bne.n	80038ce <HAL_RCC_OscConfig+0x2ea>
 80038c0:	4b64      	ldr	r3, [pc, #400]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c4:	4a63      	ldr	r2, [pc, #396]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80038cc:	e01c      	b.n	8003908 <HAL_RCC_OscConfig+0x324>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x30c>
 80038d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038da:	4a5e      	ldr	r2, [pc, #376]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038dc:	f043 0304 	orr.w	r3, r3, #4
 80038e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ee:	e00b      	b.n	8003908 <HAL_RCC_OscConfig+0x324>
 80038f0:	4b58      	ldr	r3, [pc, #352]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f4:	4a57      	ldr	r2, [pc, #348]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80038fc:	4b55      	ldr	r3, [pc, #340]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003900:	4a54      	ldr	r2, [pc, #336]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003902:	f023 0304 	bic.w	r3, r3, #4
 8003906:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d015      	beq.n	800393c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fe fb76 	bl	8002000 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003916:	e00a      	b.n	800392e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7fe fb72 	bl	8002000 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e0cb      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392e:	4b49      	ldr	r3, [pc, #292]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0ee      	beq.n	8003918 <HAL_RCC_OscConfig+0x334>
 800393a:	e014      	b.n	8003966 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393c:	f7fe fb60 	bl	8002000 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003942:	e00a      	b.n	800395a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003944:	f7fe fb5c 	bl	8002000 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e0b5      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1ee      	bne.n	8003944 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d105      	bne.n	8003978 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396c:	4b39      	ldr	r3, [pc, #228]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	4a38      	ldr	r2, [pc, #224]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003976:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80a1 	beq.w	8003ac4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003982:	4b34      	ldr	r3, [pc, #208]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b08      	cmp	r3, #8
 800398c:	d05c      	beq.n	8003a48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d141      	bne.n	8003a1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003996:	4b31      	ldr	r3, [pc, #196]	@ (8003a5c <HAL_RCC_OscConfig+0x478>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fe fb30 	bl	8002000 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fe fb2c 	bl	8002000 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e087      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	4b27      	ldr	r3, [pc, #156]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69da      	ldr	r2, [r3, #28]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d8:	085b      	lsrs	r3, r3, #1
 80039da:	3b01      	subs	r3, #1
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e4:	061b      	lsls	r3, r3, #24
 80039e6:	491b      	ldr	r1, [pc, #108]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ec:	4b1b      	ldr	r3, [pc, #108]	@ (8003a5c <HAL_RCC_OscConfig+0x478>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f2:	f7fe fb05 	bl	8002000 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fa:	f7fe fb01 	bl	8002000 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e05c      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0c:	4b11      	ldr	r3, [pc, #68]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x416>
 8003a18:	e054      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1a:	4b10      	ldr	r3, [pc, #64]	@ (8003a5c <HAL_RCC_OscConfig+0x478>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fe faee 	bl	8002000 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fe faea 	bl	8002000 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e045      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x444>
 8003a46:	e03d      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d107      	bne.n	8003a60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e038      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40007000 	.word	0x40007000
 8003a5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a60:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad0 <HAL_RCC_OscConfig+0x4ec>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d028      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d121      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d11a      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a90:	4013      	ands	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d111      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d107      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800

08003ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0cc      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b68      	ldr	r3, [pc, #416]	@ (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d90c      	bls.n	8003b10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b65      	ldr	r3, [pc, #404]	@ (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b63      	ldr	r3, [pc, #396]	@ (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0b8      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d020      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b28:	4b59      	ldr	r3, [pc, #356]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4a58      	ldr	r2, [pc, #352]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b40:	4b53      	ldr	r3, [pc, #332]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	4a52      	ldr	r2, [pc, #328]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b4c:	4b50      	ldr	r3, [pc, #320]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	494d      	ldr	r1, [pc, #308]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d044      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b72:	4b47      	ldr	r3, [pc, #284]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d119      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e07f      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d003      	beq.n	8003b92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b92:	4b3f      	ldr	r3, [pc, #252]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e06f      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e067      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bb2:	4b37      	ldr	r3, [pc, #220]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f023 0203 	bic.w	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4934      	ldr	r1, [pc, #208]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc4:	f7fe fa1c 	bl	8002000 <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bcc:	f7fe fa18 	bl	8002000 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e04f      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	4b2b      	ldr	r3, [pc, #172]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 020c 	and.w	r2, r3, #12
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d1eb      	bne.n	8003bcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b25      	ldr	r3, [pc, #148]	@ (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d20c      	bcs.n	8003c1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b22      	ldr	r3, [pc, #136]	@ (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0a:	4b20      	ldr	r3, [pc, #128]	@ (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e032      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c28:	4b19      	ldr	r3, [pc, #100]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c46:	4b12      	ldr	r3, [pc, #72]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	490e      	ldr	r1, [pc, #56]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c5a:	f000 f821 	bl	8003ca0 <HAL_RCC_GetSysClockFreq>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	490a      	ldr	r1, [pc, #40]	@ (8003c94 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6c:	5ccb      	ldrb	r3, [r1, r3]
 8003c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c72:	4a09      	ldr	r2, [pc, #36]	@ (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c76:	4b09      	ldr	r3, [pc, #36]	@ (8003c9c <HAL_RCC_ClockConfig+0x1c8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe f97c 	bl	8001f78 <HAL_InitTick>

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40023c00 	.word	0x40023c00
 8003c90:	40023800 	.word	0x40023800
 8003c94:	0800a1cc 	.word	0x0800a1cc
 8003c98:	20003500 	.word	0x20003500
 8003c9c:	20003504 	.word	0x20003504

08003ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca4:	b090      	sub	sp, #64	@ 0x40
 8003ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cb8:	4b59      	ldr	r3, [pc, #356]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	f200 80a1 	bhi.w	8003e0c <HAL_RCC_GetSysClockFreq+0x16c>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_GetSysClockFreq+0x3a>
 8003cd2:	e09b      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cd4:	4b53      	ldr	r3, [pc, #332]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cd8:	e09b      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cda:	4b53      	ldr	r3, [pc, #332]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cde:	e098      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ce0:	4b4f      	ldr	r3, [pc, #316]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ce8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cea:	4b4d      	ldr	r3, [pc, #308]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d028      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	099b      	lsrs	r3, r3, #6
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	623b      	str	r3, [r7, #32]
 8003d00:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4b47      	ldr	r3, [pc, #284]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d0c:	fb03 f201 	mul.w	r2, r3, r1
 8003d10:	2300      	movs	r3, #0
 8003d12:	fb00 f303 	mul.w	r3, r0, r3
 8003d16:	4413      	add	r3, r2
 8003d18:	4a43      	ldr	r2, [pc, #268]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d1a:	fba0 1202 	umull	r1, r2, r0, r2
 8003d1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d20:	460a      	mov	r2, r1
 8003d22:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d26:	4413      	add	r3, r2
 8003d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	61fa      	str	r2, [r7, #28]
 8003d32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d3a:	f7fc ffad 	bl	8000c98 <__aeabi_uldivmod>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4613      	mov	r3, r2
 8003d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d46:	e053      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d48:	4b35      	ldr	r3, [pc, #212]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	099b      	lsrs	r3, r3, #6
 8003d4e:	2200      	movs	r2, #0
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	617a      	str	r2, [r7, #20]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d5a:	f04f 0b00 	mov.w	fp, #0
 8003d5e:	4652      	mov	r2, sl
 8003d60:	465b      	mov	r3, fp
 8003d62:	f04f 0000 	mov.w	r0, #0
 8003d66:	f04f 0100 	mov.w	r1, #0
 8003d6a:	0159      	lsls	r1, r3, #5
 8003d6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d70:	0150      	lsls	r0, r2, #5
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	ebb2 080a 	subs.w	r8, r2, sl
 8003d7a:	eb63 090b 	sbc.w	r9, r3, fp
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d92:	ebb2 0408 	subs.w	r4, r2, r8
 8003d96:	eb63 0509 	sbc.w	r5, r3, r9
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	00eb      	lsls	r3, r5, #3
 8003da4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003da8:	00e2      	lsls	r2, r4, #3
 8003daa:	4614      	mov	r4, r2
 8003dac:	461d      	mov	r5, r3
 8003dae:	eb14 030a 	adds.w	r3, r4, sl
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	eb45 030b 	adc.w	r3, r5, fp
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	028b      	lsls	r3, r1, #10
 8003dca:	4621      	mov	r1, r4
 8003dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	028a      	lsls	r2, r1, #10
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dda:	2200      	movs	r2, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	60fa      	str	r2, [r7, #12]
 8003de0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003de4:	f7fc ff58 	bl	8000c98 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4613      	mov	r3, r2
 8003dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003df0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003e00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e08:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e0a:	e002      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e0c:	4b05      	ldr	r3, [pc, #20]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3740      	adds	r7, #64	@ 0x40
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800
 8003e24:	00f42400 	.word	0x00f42400
 8003e28:	017d7840 	.word	0x017d7840

08003e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e30:	4b03      	ldr	r3, [pc, #12]	@ (8003e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20003500 	.word	0x20003500

08003e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e48:	f7ff fff0 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4b05      	ldr	r3, [pc, #20]	@ (8003e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	0a9b      	lsrs	r3, r3, #10
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	4903      	ldr	r1, [pc, #12]	@ (8003e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e5a:	5ccb      	ldrb	r3, [r1, r3]
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40023800 	.word	0x40023800
 8003e68:	0800a1dc 	.word	0x0800a1dc

08003e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e07b      	b.n	8003f76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d108      	bne.n	8003e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e8e:	d009      	beq.n	8003ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	61da      	str	r2, [r3, #28]
 8003e96:	e005      	b.n	8003ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fd febe 	bl	8001c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f28:	ea42 0103 	orr.w	r1, r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	f003 0104 	and.w	r1, r3, #4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	f003 0210 	and.w	r2, r3, #16
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b088      	sub	sp, #32
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f8e:	f7fe f837 	bl	8002000 <HAL_GetTick>
 8003f92:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d001      	beq.n	8003fa8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e12a      	b.n	80041fe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_SPI_Transmit+0x36>
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e122      	b.n	80041fe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_SPI_Transmit+0x48>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e11b      	b.n	80041fe <HAL_SPI_Transmit+0x280>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	88fa      	ldrh	r2, [r7, #6]
 8003fe6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004014:	d10f      	bne.n	8004036 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004024:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004034:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004040:	2b40      	cmp	r3, #64	@ 0x40
 8004042:	d007      	beq.n	8004054 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004052:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800405c:	d152      	bne.n	8004104 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_SPI_Transmit+0xee>
 8004066:	8b7b      	ldrh	r3, [r7, #26]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d145      	bne.n	80040f8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004070:	881a      	ldrh	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407c:	1c9a      	adds	r2, r3, #2
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004090:	e032      	b.n	80040f8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b02      	cmp	r3, #2
 800409e:	d112      	bne.n	80040c6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	881a      	ldrh	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	1c9a      	adds	r2, r3, #2
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80040c4:	e018      	b.n	80040f8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c6:	f7fd ff9b 	bl	8002000 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d803      	bhi.n	80040de <HAL_SPI_Transmit+0x160>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d102      	bne.n	80040e4 <HAL_SPI_Transmit+0x166>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e082      	b.n	80041fe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1c7      	bne.n	8004092 <HAL_SPI_Transmit+0x114>
 8004102:	e053      	b.n	80041ac <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_SPI_Transmit+0x194>
 800410c:	8b7b      	ldrh	r3, [r7, #26]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d147      	bne.n	80041a2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	7812      	ldrb	r2, [r2, #0]
 800411e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004138:	e033      	b.n	80041a2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d113      	bne.n	8004170 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800416e:	e018      	b.n	80041a2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004170:	f7fd ff46 	bl	8002000 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d803      	bhi.n	8004188 <HAL_SPI_Transmit+0x20a>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d102      	bne.n	800418e <HAL_SPI_Transmit+0x210>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e02d      	b.n	80041fe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1c6      	bne.n	800413a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	6839      	ldr	r1, [r7, #0]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f8b1 	bl	8004318 <SPI_EndRxTxTransaction>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80041fc:	2300      	movs	r3, #0
  }
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004218:	f7fd fef2 	bl	8002000 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	4413      	add	r3, r2
 8004226:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004228:	f7fd feea 	bl	8002000 <HAL_GetTick>
 800422c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800422e:	4b39      	ldr	r3, [pc, #228]	@ (8004314 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	015b      	lsls	r3, r3, #5
 8004234:	0d1b      	lsrs	r3, r3, #20
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	fb02 f303 	mul.w	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800423e:	e054      	b.n	80042ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004246:	d050      	beq.n	80042ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004248:	f7fd feda 	bl	8002000 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	429a      	cmp	r2, r3
 8004256:	d902      	bls.n	800425e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d13d      	bne.n	80042da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800426c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004276:	d111      	bne.n	800429c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004280:	d004      	beq.n	800428c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428a:	d107      	bne.n	800429c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800429a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042a4:	d10f      	bne.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e017      	b.n	800430a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4013      	ands	r3, r2
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	bf0c      	ite	eq
 80042fa:	2301      	moveq	r3, #1
 80042fc:	2300      	movne	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	429a      	cmp	r2, r3
 8004306:	d19b      	bne.n	8004240 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3720      	adds	r7, #32
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20003500 	.word	0x20003500

08004318 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2201      	movs	r2, #1
 800432c:	2102      	movs	r1, #2
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f7ff ff6a 	bl	8004208 <SPI_WaitFlagStateUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d007      	beq.n	800434a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800433e:	f043 0220 	orr.w	r2, r3, #32
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e032      	b.n	80043b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800434a:	4b1b      	ldr	r3, [pc, #108]	@ (80043b8 <SPI_EndRxTxTransaction+0xa0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1b      	ldr	r2, [pc, #108]	@ (80043bc <SPI_EndRxTxTransaction+0xa4>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	0d5b      	lsrs	r3, r3, #21
 8004356:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004368:	d112      	bne.n	8004390 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2200      	movs	r2, #0
 8004372:	2180      	movs	r1, #128	@ 0x80
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff ff47 	bl	8004208 <SPI_WaitFlagStateUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d016      	beq.n	80043ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004384:	f043 0220 	orr.w	r2, r3, #32
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e00f      	b.n	80043b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	3b01      	subs	r3, #1
 800439a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a6:	2b80      	cmp	r3, #128	@ 0x80
 80043a8:	d0f2      	beq.n	8004390 <SPI_EndRxTxTransaction+0x78>
 80043aa:	e000      	b.n	80043ae <SPI_EndRxTxTransaction+0x96>
        break;
 80043ac:	bf00      	nop
  }

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20003500 	.word	0x20003500
 80043bc:	165e9f81 	.word	0x165e9f81

080043c0 <malloc>:
 80043c0:	4b02      	ldr	r3, [pc, #8]	@ (80043cc <malloc+0xc>)
 80043c2:	4601      	mov	r1, r0
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	f000 b82d 	b.w	8004424 <_malloc_r>
 80043ca:	bf00      	nop
 80043cc:	20003518 	.word	0x20003518

080043d0 <free>:
 80043d0:	4b02      	ldr	r3, [pc, #8]	@ (80043dc <free+0xc>)
 80043d2:	4601      	mov	r1, r0
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	f001 bf27 	b.w	8006228 <_free_r>
 80043da:	bf00      	nop
 80043dc:	20003518 	.word	0x20003518

080043e0 <sbrk_aligned>:
 80043e0:	b570      	push	{r4, r5, r6, lr}
 80043e2:	4e0f      	ldr	r6, [pc, #60]	@ (8004420 <sbrk_aligned+0x40>)
 80043e4:	460c      	mov	r4, r1
 80043e6:	6831      	ldr	r1, [r6, #0]
 80043e8:	4605      	mov	r5, r0
 80043ea:	b911      	cbnz	r1, 80043f2 <sbrk_aligned+0x12>
 80043ec:	f001 f878 	bl	80054e0 <_sbrk_r>
 80043f0:	6030      	str	r0, [r6, #0]
 80043f2:	4621      	mov	r1, r4
 80043f4:	4628      	mov	r0, r5
 80043f6:	f001 f873 	bl	80054e0 <_sbrk_r>
 80043fa:	1c43      	adds	r3, r0, #1
 80043fc:	d103      	bne.n	8004406 <sbrk_aligned+0x26>
 80043fe:	f04f 34ff 	mov.w	r4, #4294967295
 8004402:	4620      	mov	r0, r4
 8004404:	bd70      	pop	{r4, r5, r6, pc}
 8004406:	1cc4      	adds	r4, r0, #3
 8004408:	f024 0403 	bic.w	r4, r4, #3
 800440c:	42a0      	cmp	r0, r4
 800440e:	d0f8      	beq.n	8004402 <sbrk_aligned+0x22>
 8004410:	1a21      	subs	r1, r4, r0
 8004412:	4628      	mov	r0, r5
 8004414:	f001 f864 	bl	80054e0 <_sbrk_r>
 8004418:	3001      	adds	r0, #1
 800441a:	d1f2      	bne.n	8004402 <sbrk_aligned+0x22>
 800441c:	e7ef      	b.n	80043fe <sbrk_aligned+0x1e>
 800441e:	bf00      	nop
 8004420:	200037b8 	.word	0x200037b8

08004424 <_malloc_r>:
 8004424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004428:	1ccd      	adds	r5, r1, #3
 800442a:	f025 0503 	bic.w	r5, r5, #3
 800442e:	3508      	adds	r5, #8
 8004430:	2d0c      	cmp	r5, #12
 8004432:	bf38      	it	cc
 8004434:	250c      	movcc	r5, #12
 8004436:	2d00      	cmp	r5, #0
 8004438:	4606      	mov	r6, r0
 800443a:	db01      	blt.n	8004440 <_malloc_r+0x1c>
 800443c:	42a9      	cmp	r1, r5
 800443e:	d904      	bls.n	800444a <_malloc_r+0x26>
 8004440:	230c      	movs	r3, #12
 8004442:	6033      	str	r3, [r6, #0]
 8004444:	2000      	movs	r0, #0
 8004446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800444a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004520 <_malloc_r+0xfc>
 800444e:	f000 f869 	bl	8004524 <__malloc_lock>
 8004452:	f8d8 3000 	ldr.w	r3, [r8]
 8004456:	461c      	mov	r4, r3
 8004458:	bb44      	cbnz	r4, 80044ac <_malloc_r+0x88>
 800445a:	4629      	mov	r1, r5
 800445c:	4630      	mov	r0, r6
 800445e:	f7ff ffbf 	bl	80043e0 <sbrk_aligned>
 8004462:	1c43      	adds	r3, r0, #1
 8004464:	4604      	mov	r4, r0
 8004466:	d158      	bne.n	800451a <_malloc_r+0xf6>
 8004468:	f8d8 4000 	ldr.w	r4, [r8]
 800446c:	4627      	mov	r7, r4
 800446e:	2f00      	cmp	r7, #0
 8004470:	d143      	bne.n	80044fa <_malloc_r+0xd6>
 8004472:	2c00      	cmp	r4, #0
 8004474:	d04b      	beq.n	800450e <_malloc_r+0xea>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	4639      	mov	r1, r7
 800447a:	4630      	mov	r0, r6
 800447c:	eb04 0903 	add.w	r9, r4, r3
 8004480:	f001 f82e 	bl	80054e0 <_sbrk_r>
 8004484:	4581      	cmp	r9, r0
 8004486:	d142      	bne.n	800450e <_malloc_r+0xea>
 8004488:	6821      	ldr	r1, [r4, #0]
 800448a:	1a6d      	subs	r5, r5, r1
 800448c:	4629      	mov	r1, r5
 800448e:	4630      	mov	r0, r6
 8004490:	f7ff ffa6 	bl	80043e0 <sbrk_aligned>
 8004494:	3001      	adds	r0, #1
 8004496:	d03a      	beq.n	800450e <_malloc_r+0xea>
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	442b      	add	r3, r5
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	f8d8 3000 	ldr.w	r3, [r8]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	bb62      	cbnz	r2, 8004500 <_malloc_r+0xdc>
 80044a6:	f8c8 7000 	str.w	r7, [r8]
 80044aa:	e00f      	b.n	80044cc <_malloc_r+0xa8>
 80044ac:	6822      	ldr	r2, [r4, #0]
 80044ae:	1b52      	subs	r2, r2, r5
 80044b0:	d420      	bmi.n	80044f4 <_malloc_r+0xd0>
 80044b2:	2a0b      	cmp	r2, #11
 80044b4:	d917      	bls.n	80044e6 <_malloc_r+0xc2>
 80044b6:	1961      	adds	r1, r4, r5
 80044b8:	42a3      	cmp	r3, r4
 80044ba:	6025      	str	r5, [r4, #0]
 80044bc:	bf18      	it	ne
 80044be:	6059      	strne	r1, [r3, #4]
 80044c0:	6863      	ldr	r3, [r4, #4]
 80044c2:	bf08      	it	eq
 80044c4:	f8c8 1000 	streq.w	r1, [r8]
 80044c8:	5162      	str	r2, [r4, r5]
 80044ca:	604b      	str	r3, [r1, #4]
 80044cc:	4630      	mov	r0, r6
 80044ce:	f000 f82f 	bl	8004530 <__malloc_unlock>
 80044d2:	f104 000b 	add.w	r0, r4, #11
 80044d6:	1d23      	adds	r3, r4, #4
 80044d8:	f020 0007 	bic.w	r0, r0, #7
 80044dc:	1ac2      	subs	r2, r0, r3
 80044de:	bf1c      	itt	ne
 80044e0:	1a1b      	subne	r3, r3, r0
 80044e2:	50a3      	strne	r3, [r4, r2]
 80044e4:	e7af      	b.n	8004446 <_malloc_r+0x22>
 80044e6:	6862      	ldr	r2, [r4, #4]
 80044e8:	42a3      	cmp	r3, r4
 80044ea:	bf0c      	ite	eq
 80044ec:	f8c8 2000 	streq.w	r2, [r8]
 80044f0:	605a      	strne	r2, [r3, #4]
 80044f2:	e7eb      	b.n	80044cc <_malloc_r+0xa8>
 80044f4:	4623      	mov	r3, r4
 80044f6:	6864      	ldr	r4, [r4, #4]
 80044f8:	e7ae      	b.n	8004458 <_malloc_r+0x34>
 80044fa:	463c      	mov	r4, r7
 80044fc:	687f      	ldr	r7, [r7, #4]
 80044fe:	e7b6      	b.n	800446e <_malloc_r+0x4a>
 8004500:	461a      	mov	r2, r3
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	42a3      	cmp	r3, r4
 8004506:	d1fb      	bne.n	8004500 <_malloc_r+0xdc>
 8004508:	2300      	movs	r3, #0
 800450a:	6053      	str	r3, [r2, #4]
 800450c:	e7de      	b.n	80044cc <_malloc_r+0xa8>
 800450e:	230c      	movs	r3, #12
 8004510:	6033      	str	r3, [r6, #0]
 8004512:	4630      	mov	r0, r6
 8004514:	f000 f80c 	bl	8004530 <__malloc_unlock>
 8004518:	e794      	b.n	8004444 <_malloc_r+0x20>
 800451a:	6005      	str	r5, [r0, #0]
 800451c:	e7d6      	b.n	80044cc <_malloc_r+0xa8>
 800451e:	bf00      	nop
 8004520:	200037bc 	.word	0x200037bc

08004524 <__malloc_lock>:
 8004524:	4801      	ldr	r0, [pc, #4]	@ (800452c <__malloc_lock+0x8>)
 8004526:	f001 b828 	b.w	800557a <__retarget_lock_acquire_recursive>
 800452a:	bf00      	nop
 800452c:	20003900 	.word	0x20003900

08004530 <__malloc_unlock>:
 8004530:	4801      	ldr	r0, [pc, #4]	@ (8004538 <__malloc_unlock+0x8>)
 8004532:	f001 b823 	b.w	800557c <__retarget_lock_release_recursive>
 8004536:	bf00      	nop
 8004538:	20003900 	.word	0x20003900

0800453c <__cvt>:
 800453c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004540:	ec57 6b10 	vmov	r6, r7, d0
 8004544:	2f00      	cmp	r7, #0
 8004546:	460c      	mov	r4, r1
 8004548:	4619      	mov	r1, r3
 800454a:	463b      	mov	r3, r7
 800454c:	bfbb      	ittet	lt
 800454e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004552:	461f      	movlt	r7, r3
 8004554:	2300      	movge	r3, #0
 8004556:	232d      	movlt	r3, #45	@ 0x2d
 8004558:	700b      	strb	r3, [r1, #0]
 800455a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800455c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004560:	4691      	mov	r9, r2
 8004562:	f023 0820 	bic.w	r8, r3, #32
 8004566:	bfbc      	itt	lt
 8004568:	4632      	movlt	r2, r6
 800456a:	4616      	movlt	r6, r2
 800456c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004570:	d005      	beq.n	800457e <__cvt+0x42>
 8004572:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004576:	d100      	bne.n	800457a <__cvt+0x3e>
 8004578:	3401      	adds	r4, #1
 800457a:	2102      	movs	r1, #2
 800457c:	e000      	b.n	8004580 <__cvt+0x44>
 800457e:	2103      	movs	r1, #3
 8004580:	ab03      	add	r3, sp, #12
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	ab02      	add	r3, sp, #8
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	ec47 6b10 	vmov	d0, r6, r7
 800458c:	4653      	mov	r3, sl
 800458e:	4622      	mov	r2, r4
 8004590:	f001 f886 	bl	80056a0 <_dtoa_r>
 8004594:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004598:	4605      	mov	r5, r0
 800459a:	d119      	bne.n	80045d0 <__cvt+0x94>
 800459c:	f019 0f01 	tst.w	r9, #1
 80045a0:	d00e      	beq.n	80045c0 <__cvt+0x84>
 80045a2:	eb00 0904 	add.w	r9, r0, r4
 80045a6:	2200      	movs	r2, #0
 80045a8:	2300      	movs	r3, #0
 80045aa:	4630      	mov	r0, r6
 80045ac:	4639      	mov	r1, r7
 80045ae:	f7fc fa93 	bl	8000ad8 <__aeabi_dcmpeq>
 80045b2:	b108      	cbz	r0, 80045b8 <__cvt+0x7c>
 80045b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80045b8:	2230      	movs	r2, #48	@ 0x30
 80045ba:	9b03      	ldr	r3, [sp, #12]
 80045bc:	454b      	cmp	r3, r9
 80045be:	d31e      	bcc.n	80045fe <__cvt+0xc2>
 80045c0:	9b03      	ldr	r3, [sp, #12]
 80045c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80045c4:	1b5b      	subs	r3, r3, r5
 80045c6:	4628      	mov	r0, r5
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	b004      	add	sp, #16
 80045cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045d4:	eb00 0904 	add.w	r9, r0, r4
 80045d8:	d1e5      	bne.n	80045a6 <__cvt+0x6a>
 80045da:	7803      	ldrb	r3, [r0, #0]
 80045dc:	2b30      	cmp	r3, #48	@ 0x30
 80045de:	d10a      	bne.n	80045f6 <__cvt+0xba>
 80045e0:	2200      	movs	r2, #0
 80045e2:	2300      	movs	r3, #0
 80045e4:	4630      	mov	r0, r6
 80045e6:	4639      	mov	r1, r7
 80045e8:	f7fc fa76 	bl	8000ad8 <__aeabi_dcmpeq>
 80045ec:	b918      	cbnz	r0, 80045f6 <__cvt+0xba>
 80045ee:	f1c4 0401 	rsb	r4, r4, #1
 80045f2:	f8ca 4000 	str.w	r4, [sl]
 80045f6:	f8da 3000 	ldr.w	r3, [sl]
 80045fa:	4499      	add	r9, r3
 80045fc:	e7d3      	b.n	80045a6 <__cvt+0x6a>
 80045fe:	1c59      	adds	r1, r3, #1
 8004600:	9103      	str	r1, [sp, #12]
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	e7d9      	b.n	80045ba <__cvt+0x7e>

08004606 <__exponent>:
 8004606:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004608:	2900      	cmp	r1, #0
 800460a:	bfba      	itte	lt
 800460c:	4249      	neglt	r1, r1
 800460e:	232d      	movlt	r3, #45	@ 0x2d
 8004610:	232b      	movge	r3, #43	@ 0x2b
 8004612:	2909      	cmp	r1, #9
 8004614:	7002      	strb	r2, [r0, #0]
 8004616:	7043      	strb	r3, [r0, #1]
 8004618:	dd29      	ble.n	800466e <__exponent+0x68>
 800461a:	f10d 0307 	add.w	r3, sp, #7
 800461e:	461d      	mov	r5, r3
 8004620:	270a      	movs	r7, #10
 8004622:	461a      	mov	r2, r3
 8004624:	fbb1 f6f7 	udiv	r6, r1, r7
 8004628:	fb07 1416 	mls	r4, r7, r6, r1
 800462c:	3430      	adds	r4, #48	@ 0x30
 800462e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004632:	460c      	mov	r4, r1
 8004634:	2c63      	cmp	r4, #99	@ 0x63
 8004636:	f103 33ff 	add.w	r3, r3, #4294967295
 800463a:	4631      	mov	r1, r6
 800463c:	dcf1      	bgt.n	8004622 <__exponent+0x1c>
 800463e:	3130      	adds	r1, #48	@ 0x30
 8004640:	1e94      	subs	r4, r2, #2
 8004642:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004646:	1c41      	adds	r1, r0, #1
 8004648:	4623      	mov	r3, r4
 800464a:	42ab      	cmp	r3, r5
 800464c:	d30a      	bcc.n	8004664 <__exponent+0x5e>
 800464e:	f10d 0309 	add.w	r3, sp, #9
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	42ac      	cmp	r4, r5
 8004656:	bf88      	it	hi
 8004658:	2300      	movhi	r3, #0
 800465a:	3302      	adds	r3, #2
 800465c:	4403      	add	r3, r0
 800465e:	1a18      	subs	r0, r3, r0
 8004660:	b003      	add	sp, #12
 8004662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004664:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004668:	f801 6f01 	strb.w	r6, [r1, #1]!
 800466c:	e7ed      	b.n	800464a <__exponent+0x44>
 800466e:	2330      	movs	r3, #48	@ 0x30
 8004670:	3130      	adds	r1, #48	@ 0x30
 8004672:	7083      	strb	r3, [r0, #2]
 8004674:	70c1      	strb	r1, [r0, #3]
 8004676:	1d03      	adds	r3, r0, #4
 8004678:	e7f1      	b.n	800465e <__exponent+0x58>
	...

0800467c <_printf_float>:
 800467c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004680:	b08d      	sub	sp, #52	@ 0x34
 8004682:	460c      	mov	r4, r1
 8004684:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004688:	4616      	mov	r6, r2
 800468a:	461f      	mov	r7, r3
 800468c:	4605      	mov	r5, r0
 800468e:	f000 feef 	bl	8005470 <_localeconv_r>
 8004692:	6803      	ldr	r3, [r0, #0]
 8004694:	9304      	str	r3, [sp, #16]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fb fdf2 	bl	8000280 <strlen>
 800469c:	2300      	movs	r3, #0
 800469e:	930a      	str	r3, [sp, #40]	@ 0x28
 80046a0:	f8d8 3000 	ldr.w	r3, [r8]
 80046a4:	9005      	str	r0, [sp, #20]
 80046a6:	3307      	adds	r3, #7
 80046a8:	f023 0307 	bic.w	r3, r3, #7
 80046ac:	f103 0208 	add.w	r2, r3, #8
 80046b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80046b4:	f8d4 b000 	ldr.w	fp, [r4]
 80046b8:	f8c8 2000 	str.w	r2, [r8]
 80046bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80046c4:	9307      	str	r3, [sp, #28]
 80046c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80046ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80046ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046d2:	4b9c      	ldr	r3, [pc, #624]	@ (8004944 <_printf_float+0x2c8>)
 80046d4:	f04f 32ff 	mov.w	r2, #4294967295
 80046d8:	f7fc fa30 	bl	8000b3c <__aeabi_dcmpun>
 80046dc:	bb70      	cbnz	r0, 800473c <_printf_float+0xc0>
 80046de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046e2:	4b98      	ldr	r3, [pc, #608]	@ (8004944 <_printf_float+0x2c8>)
 80046e4:	f04f 32ff 	mov.w	r2, #4294967295
 80046e8:	f7fc fa0a 	bl	8000b00 <__aeabi_dcmple>
 80046ec:	bb30      	cbnz	r0, 800473c <_printf_float+0xc0>
 80046ee:	2200      	movs	r2, #0
 80046f0:	2300      	movs	r3, #0
 80046f2:	4640      	mov	r0, r8
 80046f4:	4649      	mov	r1, r9
 80046f6:	f7fc f9f9 	bl	8000aec <__aeabi_dcmplt>
 80046fa:	b110      	cbz	r0, 8004702 <_printf_float+0x86>
 80046fc:	232d      	movs	r3, #45	@ 0x2d
 80046fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004702:	4a91      	ldr	r2, [pc, #580]	@ (8004948 <_printf_float+0x2cc>)
 8004704:	4b91      	ldr	r3, [pc, #580]	@ (800494c <_printf_float+0x2d0>)
 8004706:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800470a:	bf94      	ite	ls
 800470c:	4690      	movls	r8, r2
 800470e:	4698      	movhi	r8, r3
 8004710:	2303      	movs	r3, #3
 8004712:	6123      	str	r3, [r4, #16]
 8004714:	f02b 0304 	bic.w	r3, fp, #4
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	f04f 0900 	mov.w	r9, #0
 800471e:	9700      	str	r7, [sp, #0]
 8004720:	4633      	mov	r3, r6
 8004722:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004724:	4621      	mov	r1, r4
 8004726:	4628      	mov	r0, r5
 8004728:	f000 f9d2 	bl	8004ad0 <_printf_common>
 800472c:	3001      	adds	r0, #1
 800472e:	f040 808d 	bne.w	800484c <_printf_float+0x1d0>
 8004732:	f04f 30ff 	mov.w	r0, #4294967295
 8004736:	b00d      	add	sp, #52	@ 0x34
 8004738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800473c:	4642      	mov	r2, r8
 800473e:	464b      	mov	r3, r9
 8004740:	4640      	mov	r0, r8
 8004742:	4649      	mov	r1, r9
 8004744:	f7fc f9fa 	bl	8000b3c <__aeabi_dcmpun>
 8004748:	b140      	cbz	r0, 800475c <_printf_float+0xe0>
 800474a:	464b      	mov	r3, r9
 800474c:	2b00      	cmp	r3, #0
 800474e:	bfbc      	itt	lt
 8004750:	232d      	movlt	r3, #45	@ 0x2d
 8004752:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004756:	4a7e      	ldr	r2, [pc, #504]	@ (8004950 <_printf_float+0x2d4>)
 8004758:	4b7e      	ldr	r3, [pc, #504]	@ (8004954 <_printf_float+0x2d8>)
 800475a:	e7d4      	b.n	8004706 <_printf_float+0x8a>
 800475c:	6863      	ldr	r3, [r4, #4]
 800475e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004762:	9206      	str	r2, [sp, #24]
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	d13b      	bne.n	80047e0 <_printf_float+0x164>
 8004768:	2306      	movs	r3, #6
 800476a:	6063      	str	r3, [r4, #4]
 800476c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004770:	2300      	movs	r3, #0
 8004772:	6022      	str	r2, [r4, #0]
 8004774:	9303      	str	r3, [sp, #12]
 8004776:	ab0a      	add	r3, sp, #40	@ 0x28
 8004778:	e9cd a301 	strd	sl, r3, [sp, #4]
 800477c:	ab09      	add	r3, sp, #36	@ 0x24
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	6861      	ldr	r1, [r4, #4]
 8004782:	ec49 8b10 	vmov	d0, r8, r9
 8004786:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800478a:	4628      	mov	r0, r5
 800478c:	f7ff fed6 	bl	800453c <__cvt>
 8004790:	9b06      	ldr	r3, [sp, #24]
 8004792:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004794:	2b47      	cmp	r3, #71	@ 0x47
 8004796:	4680      	mov	r8, r0
 8004798:	d129      	bne.n	80047ee <_printf_float+0x172>
 800479a:	1cc8      	adds	r0, r1, #3
 800479c:	db02      	blt.n	80047a4 <_printf_float+0x128>
 800479e:	6863      	ldr	r3, [r4, #4]
 80047a0:	4299      	cmp	r1, r3
 80047a2:	dd41      	ble.n	8004828 <_printf_float+0x1ac>
 80047a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80047a8:	fa5f fa8a 	uxtb.w	sl, sl
 80047ac:	3901      	subs	r1, #1
 80047ae:	4652      	mov	r2, sl
 80047b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80047b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80047b6:	f7ff ff26 	bl	8004606 <__exponent>
 80047ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80047bc:	1813      	adds	r3, r2, r0
 80047be:	2a01      	cmp	r2, #1
 80047c0:	4681      	mov	r9, r0
 80047c2:	6123      	str	r3, [r4, #16]
 80047c4:	dc02      	bgt.n	80047cc <_printf_float+0x150>
 80047c6:	6822      	ldr	r2, [r4, #0]
 80047c8:	07d2      	lsls	r2, r2, #31
 80047ca:	d501      	bpl.n	80047d0 <_printf_float+0x154>
 80047cc:	3301      	adds	r3, #1
 80047ce:	6123      	str	r3, [r4, #16]
 80047d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0a2      	beq.n	800471e <_printf_float+0xa2>
 80047d8:	232d      	movs	r3, #45	@ 0x2d
 80047da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047de:	e79e      	b.n	800471e <_printf_float+0xa2>
 80047e0:	9a06      	ldr	r2, [sp, #24]
 80047e2:	2a47      	cmp	r2, #71	@ 0x47
 80047e4:	d1c2      	bne.n	800476c <_printf_float+0xf0>
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1c0      	bne.n	800476c <_printf_float+0xf0>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e7bd      	b.n	800476a <_printf_float+0xee>
 80047ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80047f2:	d9db      	bls.n	80047ac <_printf_float+0x130>
 80047f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80047f8:	d118      	bne.n	800482c <_printf_float+0x1b0>
 80047fa:	2900      	cmp	r1, #0
 80047fc:	6863      	ldr	r3, [r4, #4]
 80047fe:	dd0b      	ble.n	8004818 <_printf_float+0x19c>
 8004800:	6121      	str	r1, [r4, #16]
 8004802:	b913      	cbnz	r3, 800480a <_printf_float+0x18e>
 8004804:	6822      	ldr	r2, [r4, #0]
 8004806:	07d0      	lsls	r0, r2, #31
 8004808:	d502      	bpl.n	8004810 <_printf_float+0x194>
 800480a:	3301      	adds	r3, #1
 800480c:	440b      	add	r3, r1
 800480e:	6123      	str	r3, [r4, #16]
 8004810:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004812:	f04f 0900 	mov.w	r9, #0
 8004816:	e7db      	b.n	80047d0 <_printf_float+0x154>
 8004818:	b913      	cbnz	r3, 8004820 <_printf_float+0x1a4>
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	07d2      	lsls	r2, r2, #31
 800481e:	d501      	bpl.n	8004824 <_printf_float+0x1a8>
 8004820:	3302      	adds	r3, #2
 8004822:	e7f4      	b.n	800480e <_printf_float+0x192>
 8004824:	2301      	movs	r3, #1
 8004826:	e7f2      	b.n	800480e <_printf_float+0x192>
 8004828:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800482c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800482e:	4299      	cmp	r1, r3
 8004830:	db05      	blt.n	800483e <_printf_float+0x1c2>
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	6121      	str	r1, [r4, #16]
 8004836:	07d8      	lsls	r0, r3, #31
 8004838:	d5ea      	bpl.n	8004810 <_printf_float+0x194>
 800483a:	1c4b      	adds	r3, r1, #1
 800483c:	e7e7      	b.n	800480e <_printf_float+0x192>
 800483e:	2900      	cmp	r1, #0
 8004840:	bfd4      	ite	le
 8004842:	f1c1 0202 	rsble	r2, r1, #2
 8004846:	2201      	movgt	r2, #1
 8004848:	4413      	add	r3, r2
 800484a:	e7e0      	b.n	800480e <_printf_float+0x192>
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	055a      	lsls	r2, r3, #21
 8004850:	d407      	bmi.n	8004862 <_printf_float+0x1e6>
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	4642      	mov	r2, r8
 8004856:	4631      	mov	r1, r6
 8004858:	4628      	mov	r0, r5
 800485a:	47b8      	blx	r7
 800485c:	3001      	adds	r0, #1
 800485e:	d12b      	bne.n	80048b8 <_printf_float+0x23c>
 8004860:	e767      	b.n	8004732 <_printf_float+0xb6>
 8004862:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004866:	f240 80dd 	bls.w	8004a24 <_printf_float+0x3a8>
 800486a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800486e:	2200      	movs	r2, #0
 8004870:	2300      	movs	r3, #0
 8004872:	f7fc f931 	bl	8000ad8 <__aeabi_dcmpeq>
 8004876:	2800      	cmp	r0, #0
 8004878:	d033      	beq.n	80048e2 <_printf_float+0x266>
 800487a:	4a37      	ldr	r2, [pc, #220]	@ (8004958 <_printf_float+0x2dc>)
 800487c:	2301      	movs	r3, #1
 800487e:	4631      	mov	r1, r6
 8004880:	4628      	mov	r0, r5
 8004882:	47b8      	blx	r7
 8004884:	3001      	adds	r0, #1
 8004886:	f43f af54 	beq.w	8004732 <_printf_float+0xb6>
 800488a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800488e:	4543      	cmp	r3, r8
 8004890:	db02      	blt.n	8004898 <_printf_float+0x21c>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	07d8      	lsls	r0, r3, #31
 8004896:	d50f      	bpl.n	80048b8 <_printf_float+0x23c>
 8004898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800489c:	4631      	mov	r1, r6
 800489e:	4628      	mov	r0, r5
 80048a0:	47b8      	blx	r7
 80048a2:	3001      	adds	r0, #1
 80048a4:	f43f af45 	beq.w	8004732 <_printf_float+0xb6>
 80048a8:	f04f 0900 	mov.w	r9, #0
 80048ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80048b0:	f104 0a1a 	add.w	sl, r4, #26
 80048b4:	45c8      	cmp	r8, r9
 80048b6:	dc09      	bgt.n	80048cc <_printf_float+0x250>
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	079b      	lsls	r3, r3, #30
 80048bc:	f100 8103 	bmi.w	8004ac6 <_printf_float+0x44a>
 80048c0:	68e0      	ldr	r0, [r4, #12]
 80048c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048c4:	4298      	cmp	r0, r3
 80048c6:	bfb8      	it	lt
 80048c8:	4618      	movlt	r0, r3
 80048ca:	e734      	b.n	8004736 <_printf_float+0xba>
 80048cc:	2301      	movs	r3, #1
 80048ce:	4652      	mov	r2, sl
 80048d0:	4631      	mov	r1, r6
 80048d2:	4628      	mov	r0, r5
 80048d4:	47b8      	blx	r7
 80048d6:	3001      	adds	r0, #1
 80048d8:	f43f af2b 	beq.w	8004732 <_printf_float+0xb6>
 80048dc:	f109 0901 	add.w	r9, r9, #1
 80048e0:	e7e8      	b.n	80048b4 <_printf_float+0x238>
 80048e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	dc39      	bgt.n	800495c <_printf_float+0x2e0>
 80048e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004958 <_printf_float+0x2dc>)
 80048ea:	2301      	movs	r3, #1
 80048ec:	4631      	mov	r1, r6
 80048ee:	4628      	mov	r0, r5
 80048f0:	47b8      	blx	r7
 80048f2:	3001      	adds	r0, #1
 80048f4:	f43f af1d 	beq.w	8004732 <_printf_float+0xb6>
 80048f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80048fc:	ea59 0303 	orrs.w	r3, r9, r3
 8004900:	d102      	bne.n	8004908 <_printf_float+0x28c>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	07d9      	lsls	r1, r3, #31
 8004906:	d5d7      	bpl.n	80048b8 <_printf_float+0x23c>
 8004908:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800490c:	4631      	mov	r1, r6
 800490e:	4628      	mov	r0, r5
 8004910:	47b8      	blx	r7
 8004912:	3001      	adds	r0, #1
 8004914:	f43f af0d 	beq.w	8004732 <_printf_float+0xb6>
 8004918:	f04f 0a00 	mov.w	sl, #0
 800491c:	f104 0b1a 	add.w	fp, r4, #26
 8004920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004922:	425b      	negs	r3, r3
 8004924:	4553      	cmp	r3, sl
 8004926:	dc01      	bgt.n	800492c <_printf_float+0x2b0>
 8004928:	464b      	mov	r3, r9
 800492a:	e793      	b.n	8004854 <_printf_float+0x1d8>
 800492c:	2301      	movs	r3, #1
 800492e:	465a      	mov	r2, fp
 8004930:	4631      	mov	r1, r6
 8004932:	4628      	mov	r0, r5
 8004934:	47b8      	blx	r7
 8004936:	3001      	adds	r0, #1
 8004938:	f43f aefb 	beq.w	8004732 <_printf_float+0xb6>
 800493c:	f10a 0a01 	add.w	sl, sl, #1
 8004940:	e7ee      	b.n	8004920 <_printf_float+0x2a4>
 8004942:	bf00      	nop
 8004944:	7fefffff 	.word	0x7fefffff
 8004948:	0800a1e4 	.word	0x0800a1e4
 800494c:	0800a1e8 	.word	0x0800a1e8
 8004950:	0800a1ec 	.word	0x0800a1ec
 8004954:	0800a1f0 	.word	0x0800a1f0
 8004958:	0800a1f4 	.word	0x0800a1f4
 800495c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800495e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004962:	4553      	cmp	r3, sl
 8004964:	bfa8      	it	ge
 8004966:	4653      	movge	r3, sl
 8004968:	2b00      	cmp	r3, #0
 800496a:	4699      	mov	r9, r3
 800496c:	dc36      	bgt.n	80049dc <_printf_float+0x360>
 800496e:	f04f 0b00 	mov.w	fp, #0
 8004972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004976:	f104 021a 	add.w	r2, r4, #26
 800497a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800497c:	9306      	str	r3, [sp, #24]
 800497e:	eba3 0309 	sub.w	r3, r3, r9
 8004982:	455b      	cmp	r3, fp
 8004984:	dc31      	bgt.n	80049ea <_printf_float+0x36e>
 8004986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004988:	459a      	cmp	sl, r3
 800498a:	dc3a      	bgt.n	8004a02 <_printf_float+0x386>
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	07da      	lsls	r2, r3, #31
 8004990:	d437      	bmi.n	8004a02 <_printf_float+0x386>
 8004992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004994:	ebaa 0903 	sub.w	r9, sl, r3
 8004998:	9b06      	ldr	r3, [sp, #24]
 800499a:	ebaa 0303 	sub.w	r3, sl, r3
 800499e:	4599      	cmp	r9, r3
 80049a0:	bfa8      	it	ge
 80049a2:	4699      	movge	r9, r3
 80049a4:	f1b9 0f00 	cmp.w	r9, #0
 80049a8:	dc33      	bgt.n	8004a12 <_printf_float+0x396>
 80049aa:	f04f 0800 	mov.w	r8, #0
 80049ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049b2:	f104 0b1a 	add.w	fp, r4, #26
 80049b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049b8:	ebaa 0303 	sub.w	r3, sl, r3
 80049bc:	eba3 0309 	sub.w	r3, r3, r9
 80049c0:	4543      	cmp	r3, r8
 80049c2:	f77f af79 	ble.w	80048b8 <_printf_float+0x23c>
 80049c6:	2301      	movs	r3, #1
 80049c8:	465a      	mov	r2, fp
 80049ca:	4631      	mov	r1, r6
 80049cc:	4628      	mov	r0, r5
 80049ce:	47b8      	blx	r7
 80049d0:	3001      	adds	r0, #1
 80049d2:	f43f aeae 	beq.w	8004732 <_printf_float+0xb6>
 80049d6:	f108 0801 	add.w	r8, r8, #1
 80049da:	e7ec      	b.n	80049b6 <_printf_float+0x33a>
 80049dc:	4642      	mov	r2, r8
 80049de:	4631      	mov	r1, r6
 80049e0:	4628      	mov	r0, r5
 80049e2:	47b8      	blx	r7
 80049e4:	3001      	adds	r0, #1
 80049e6:	d1c2      	bne.n	800496e <_printf_float+0x2f2>
 80049e8:	e6a3      	b.n	8004732 <_printf_float+0xb6>
 80049ea:	2301      	movs	r3, #1
 80049ec:	4631      	mov	r1, r6
 80049ee:	4628      	mov	r0, r5
 80049f0:	9206      	str	r2, [sp, #24]
 80049f2:	47b8      	blx	r7
 80049f4:	3001      	adds	r0, #1
 80049f6:	f43f ae9c 	beq.w	8004732 <_printf_float+0xb6>
 80049fa:	9a06      	ldr	r2, [sp, #24]
 80049fc:	f10b 0b01 	add.w	fp, fp, #1
 8004a00:	e7bb      	b.n	800497a <_printf_float+0x2fe>
 8004a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a06:	4631      	mov	r1, r6
 8004a08:	4628      	mov	r0, r5
 8004a0a:	47b8      	blx	r7
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d1c0      	bne.n	8004992 <_printf_float+0x316>
 8004a10:	e68f      	b.n	8004732 <_printf_float+0xb6>
 8004a12:	9a06      	ldr	r2, [sp, #24]
 8004a14:	464b      	mov	r3, r9
 8004a16:	4442      	add	r2, r8
 8004a18:	4631      	mov	r1, r6
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	47b8      	blx	r7
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d1c3      	bne.n	80049aa <_printf_float+0x32e>
 8004a22:	e686      	b.n	8004732 <_printf_float+0xb6>
 8004a24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a28:	f1ba 0f01 	cmp.w	sl, #1
 8004a2c:	dc01      	bgt.n	8004a32 <_printf_float+0x3b6>
 8004a2e:	07db      	lsls	r3, r3, #31
 8004a30:	d536      	bpl.n	8004aa0 <_printf_float+0x424>
 8004a32:	2301      	movs	r3, #1
 8004a34:	4642      	mov	r2, r8
 8004a36:	4631      	mov	r1, r6
 8004a38:	4628      	mov	r0, r5
 8004a3a:	47b8      	blx	r7
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	f43f ae78 	beq.w	8004732 <_printf_float+0xb6>
 8004a42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a46:	4631      	mov	r1, r6
 8004a48:	4628      	mov	r0, r5
 8004a4a:	47b8      	blx	r7
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	f43f ae70 	beq.w	8004732 <_printf_float+0xb6>
 8004a52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a56:	2200      	movs	r2, #0
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a5e:	f7fc f83b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a62:	b9c0      	cbnz	r0, 8004a96 <_printf_float+0x41a>
 8004a64:	4653      	mov	r3, sl
 8004a66:	f108 0201 	add.w	r2, r8, #1
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47b8      	blx	r7
 8004a70:	3001      	adds	r0, #1
 8004a72:	d10c      	bne.n	8004a8e <_printf_float+0x412>
 8004a74:	e65d      	b.n	8004732 <_printf_float+0xb6>
 8004a76:	2301      	movs	r3, #1
 8004a78:	465a      	mov	r2, fp
 8004a7a:	4631      	mov	r1, r6
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	47b8      	blx	r7
 8004a80:	3001      	adds	r0, #1
 8004a82:	f43f ae56 	beq.w	8004732 <_printf_float+0xb6>
 8004a86:	f108 0801 	add.w	r8, r8, #1
 8004a8a:	45d0      	cmp	r8, sl
 8004a8c:	dbf3      	blt.n	8004a76 <_printf_float+0x3fa>
 8004a8e:	464b      	mov	r3, r9
 8004a90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004a94:	e6df      	b.n	8004856 <_printf_float+0x1da>
 8004a96:	f04f 0800 	mov.w	r8, #0
 8004a9a:	f104 0b1a 	add.w	fp, r4, #26
 8004a9e:	e7f4      	b.n	8004a8a <_printf_float+0x40e>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	4642      	mov	r2, r8
 8004aa4:	e7e1      	b.n	8004a6a <_printf_float+0x3ee>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	464a      	mov	r2, r9
 8004aaa:	4631      	mov	r1, r6
 8004aac:	4628      	mov	r0, r5
 8004aae:	47b8      	blx	r7
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	f43f ae3e 	beq.w	8004732 <_printf_float+0xb6>
 8004ab6:	f108 0801 	add.w	r8, r8, #1
 8004aba:	68e3      	ldr	r3, [r4, #12]
 8004abc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004abe:	1a5b      	subs	r3, r3, r1
 8004ac0:	4543      	cmp	r3, r8
 8004ac2:	dcf0      	bgt.n	8004aa6 <_printf_float+0x42a>
 8004ac4:	e6fc      	b.n	80048c0 <_printf_float+0x244>
 8004ac6:	f04f 0800 	mov.w	r8, #0
 8004aca:	f104 0919 	add.w	r9, r4, #25
 8004ace:	e7f4      	b.n	8004aba <_printf_float+0x43e>

08004ad0 <_printf_common>:
 8004ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad4:	4616      	mov	r6, r2
 8004ad6:	4698      	mov	r8, r3
 8004ad8:	688a      	ldr	r2, [r1, #8]
 8004ada:	690b      	ldr	r3, [r1, #16]
 8004adc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	bfb8      	it	lt
 8004ae4:	4613      	movlt	r3, r2
 8004ae6:	6033      	str	r3, [r6, #0]
 8004ae8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004aec:	4607      	mov	r7, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	b10a      	cbz	r2, 8004af6 <_printf_common+0x26>
 8004af2:	3301      	adds	r3, #1
 8004af4:	6033      	str	r3, [r6, #0]
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	0699      	lsls	r1, r3, #26
 8004afa:	bf42      	ittt	mi
 8004afc:	6833      	ldrmi	r3, [r6, #0]
 8004afe:	3302      	addmi	r3, #2
 8004b00:	6033      	strmi	r3, [r6, #0]
 8004b02:	6825      	ldr	r5, [r4, #0]
 8004b04:	f015 0506 	ands.w	r5, r5, #6
 8004b08:	d106      	bne.n	8004b18 <_printf_common+0x48>
 8004b0a:	f104 0a19 	add.w	sl, r4, #25
 8004b0e:	68e3      	ldr	r3, [r4, #12]
 8004b10:	6832      	ldr	r2, [r6, #0]
 8004b12:	1a9b      	subs	r3, r3, r2
 8004b14:	42ab      	cmp	r3, r5
 8004b16:	dc26      	bgt.n	8004b66 <_printf_common+0x96>
 8004b18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b1c:	6822      	ldr	r2, [r4, #0]
 8004b1e:	3b00      	subs	r3, #0
 8004b20:	bf18      	it	ne
 8004b22:	2301      	movne	r3, #1
 8004b24:	0692      	lsls	r2, r2, #26
 8004b26:	d42b      	bmi.n	8004b80 <_printf_common+0xb0>
 8004b28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	4638      	mov	r0, r7
 8004b30:	47c8      	blx	r9
 8004b32:	3001      	adds	r0, #1
 8004b34:	d01e      	beq.n	8004b74 <_printf_common+0xa4>
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	6922      	ldr	r2, [r4, #16]
 8004b3a:	f003 0306 	and.w	r3, r3, #6
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	bf02      	ittt	eq
 8004b42:	68e5      	ldreq	r5, [r4, #12]
 8004b44:	6833      	ldreq	r3, [r6, #0]
 8004b46:	1aed      	subeq	r5, r5, r3
 8004b48:	68a3      	ldr	r3, [r4, #8]
 8004b4a:	bf0c      	ite	eq
 8004b4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b50:	2500      	movne	r5, #0
 8004b52:	4293      	cmp	r3, r2
 8004b54:	bfc4      	itt	gt
 8004b56:	1a9b      	subgt	r3, r3, r2
 8004b58:	18ed      	addgt	r5, r5, r3
 8004b5a:	2600      	movs	r6, #0
 8004b5c:	341a      	adds	r4, #26
 8004b5e:	42b5      	cmp	r5, r6
 8004b60:	d11a      	bne.n	8004b98 <_printf_common+0xc8>
 8004b62:	2000      	movs	r0, #0
 8004b64:	e008      	b.n	8004b78 <_printf_common+0xa8>
 8004b66:	2301      	movs	r3, #1
 8004b68:	4652      	mov	r2, sl
 8004b6a:	4641      	mov	r1, r8
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	47c8      	blx	r9
 8004b70:	3001      	adds	r0, #1
 8004b72:	d103      	bne.n	8004b7c <_printf_common+0xac>
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295
 8004b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b7c:	3501      	adds	r5, #1
 8004b7e:	e7c6      	b.n	8004b0e <_printf_common+0x3e>
 8004b80:	18e1      	adds	r1, r4, r3
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	2030      	movs	r0, #48	@ 0x30
 8004b86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b8a:	4422      	add	r2, r4
 8004b8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b94:	3302      	adds	r3, #2
 8004b96:	e7c7      	b.n	8004b28 <_printf_common+0x58>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	47c8      	blx	r9
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	d0e6      	beq.n	8004b74 <_printf_common+0xa4>
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7d9      	b.n	8004b5e <_printf_common+0x8e>
	...

08004bac <_printf_i>:
 8004bac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb0:	7e0f      	ldrb	r7, [r1, #24]
 8004bb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bb4:	2f78      	cmp	r7, #120	@ 0x78
 8004bb6:	4691      	mov	r9, r2
 8004bb8:	4680      	mov	r8, r0
 8004bba:	460c      	mov	r4, r1
 8004bbc:	469a      	mov	sl, r3
 8004bbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bc2:	d807      	bhi.n	8004bd4 <_printf_i+0x28>
 8004bc4:	2f62      	cmp	r7, #98	@ 0x62
 8004bc6:	d80a      	bhi.n	8004bde <_printf_i+0x32>
 8004bc8:	2f00      	cmp	r7, #0
 8004bca:	f000 80d2 	beq.w	8004d72 <_printf_i+0x1c6>
 8004bce:	2f58      	cmp	r7, #88	@ 0x58
 8004bd0:	f000 80b9 	beq.w	8004d46 <_printf_i+0x19a>
 8004bd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bdc:	e03a      	b.n	8004c54 <_printf_i+0xa8>
 8004bde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004be2:	2b15      	cmp	r3, #21
 8004be4:	d8f6      	bhi.n	8004bd4 <_printf_i+0x28>
 8004be6:	a101      	add	r1, pc, #4	@ (adr r1, 8004bec <_printf_i+0x40>)
 8004be8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bec:	08004c45 	.word	0x08004c45
 8004bf0:	08004c59 	.word	0x08004c59
 8004bf4:	08004bd5 	.word	0x08004bd5
 8004bf8:	08004bd5 	.word	0x08004bd5
 8004bfc:	08004bd5 	.word	0x08004bd5
 8004c00:	08004bd5 	.word	0x08004bd5
 8004c04:	08004c59 	.word	0x08004c59
 8004c08:	08004bd5 	.word	0x08004bd5
 8004c0c:	08004bd5 	.word	0x08004bd5
 8004c10:	08004bd5 	.word	0x08004bd5
 8004c14:	08004bd5 	.word	0x08004bd5
 8004c18:	08004d59 	.word	0x08004d59
 8004c1c:	08004c83 	.word	0x08004c83
 8004c20:	08004d13 	.word	0x08004d13
 8004c24:	08004bd5 	.word	0x08004bd5
 8004c28:	08004bd5 	.word	0x08004bd5
 8004c2c:	08004d7b 	.word	0x08004d7b
 8004c30:	08004bd5 	.word	0x08004bd5
 8004c34:	08004c83 	.word	0x08004c83
 8004c38:	08004bd5 	.word	0x08004bd5
 8004c3c:	08004bd5 	.word	0x08004bd5
 8004c40:	08004d1b 	.word	0x08004d1b
 8004c44:	6833      	ldr	r3, [r6, #0]
 8004c46:	1d1a      	adds	r2, r3, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6032      	str	r2, [r6, #0]
 8004c4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c54:	2301      	movs	r3, #1
 8004c56:	e09d      	b.n	8004d94 <_printf_i+0x1e8>
 8004c58:	6833      	ldr	r3, [r6, #0]
 8004c5a:	6820      	ldr	r0, [r4, #0]
 8004c5c:	1d19      	adds	r1, r3, #4
 8004c5e:	6031      	str	r1, [r6, #0]
 8004c60:	0606      	lsls	r6, r0, #24
 8004c62:	d501      	bpl.n	8004c68 <_printf_i+0xbc>
 8004c64:	681d      	ldr	r5, [r3, #0]
 8004c66:	e003      	b.n	8004c70 <_printf_i+0xc4>
 8004c68:	0645      	lsls	r5, r0, #25
 8004c6a:	d5fb      	bpl.n	8004c64 <_printf_i+0xb8>
 8004c6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c70:	2d00      	cmp	r5, #0
 8004c72:	da03      	bge.n	8004c7c <_printf_i+0xd0>
 8004c74:	232d      	movs	r3, #45	@ 0x2d
 8004c76:	426d      	negs	r5, r5
 8004c78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c7c:	4859      	ldr	r0, [pc, #356]	@ (8004de4 <_printf_i+0x238>)
 8004c7e:	230a      	movs	r3, #10
 8004c80:	e011      	b.n	8004ca6 <_printf_i+0xfa>
 8004c82:	6821      	ldr	r1, [r4, #0]
 8004c84:	6833      	ldr	r3, [r6, #0]
 8004c86:	0608      	lsls	r0, r1, #24
 8004c88:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c8c:	d402      	bmi.n	8004c94 <_printf_i+0xe8>
 8004c8e:	0649      	lsls	r1, r1, #25
 8004c90:	bf48      	it	mi
 8004c92:	b2ad      	uxthmi	r5, r5
 8004c94:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c96:	4853      	ldr	r0, [pc, #332]	@ (8004de4 <_printf_i+0x238>)
 8004c98:	6033      	str	r3, [r6, #0]
 8004c9a:	bf14      	ite	ne
 8004c9c:	230a      	movne	r3, #10
 8004c9e:	2308      	moveq	r3, #8
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ca6:	6866      	ldr	r6, [r4, #4]
 8004ca8:	60a6      	str	r6, [r4, #8]
 8004caa:	2e00      	cmp	r6, #0
 8004cac:	bfa2      	ittt	ge
 8004cae:	6821      	ldrge	r1, [r4, #0]
 8004cb0:	f021 0104 	bicge.w	r1, r1, #4
 8004cb4:	6021      	strge	r1, [r4, #0]
 8004cb6:	b90d      	cbnz	r5, 8004cbc <_printf_i+0x110>
 8004cb8:	2e00      	cmp	r6, #0
 8004cba:	d04b      	beq.n	8004d54 <_printf_i+0x1a8>
 8004cbc:	4616      	mov	r6, r2
 8004cbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cc2:	fb03 5711 	mls	r7, r3, r1, r5
 8004cc6:	5dc7      	ldrb	r7, [r0, r7]
 8004cc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ccc:	462f      	mov	r7, r5
 8004cce:	42bb      	cmp	r3, r7
 8004cd0:	460d      	mov	r5, r1
 8004cd2:	d9f4      	bls.n	8004cbe <_printf_i+0x112>
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d10b      	bne.n	8004cf0 <_printf_i+0x144>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	07df      	lsls	r7, r3, #31
 8004cdc:	d508      	bpl.n	8004cf0 <_printf_i+0x144>
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	6861      	ldr	r1, [r4, #4]
 8004ce2:	4299      	cmp	r1, r3
 8004ce4:	bfde      	ittt	le
 8004ce6:	2330      	movle	r3, #48	@ 0x30
 8004ce8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cf0:	1b92      	subs	r2, r2, r6
 8004cf2:	6122      	str	r2, [r4, #16]
 8004cf4:	f8cd a000 	str.w	sl, [sp]
 8004cf8:	464b      	mov	r3, r9
 8004cfa:	aa03      	add	r2, sp, #12
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	4640      	mov	r0, r8
 8004d00:	f7ff fee6 	bl	8004ad0 <_printf_common>
 8004d04:	3001      	adds	r0, #1
 8004d06:	d14a      	bne.n	8004d9e <_printf_i+0x1f2>
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0c:	b004      	add	sp, #16
 8004d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	f043 0320 	orr.w	r3, r3, #32
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	4833      	ldr	r0, [pc, #204]	@ (8004de8 <_printf_i+0x23c>)
 8004d1c:	2778      	movs	r7, #120	@ 0x78
 8004d1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	6831      	ldr	r1, [r6, #0]
 8004d26:	061f      	lsls	r7, r3, #24
 8004d28:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d2c:	d402      	bmi.n	8004d34 <_printf_i+0x188>
 8004d2e:	065f      	lsls	r7, r3, #25
 8004d30:	bf48      	it	mi
 8004d32:	b2ad      	uxthmi	r5, r5
 8004d34:	6031      	str	r1, [r6, #0]
 8004d36:	07d9      	lsls	r1, r3, #31
 8004d38:	bf44      	itt	mi
 8004d3a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d3e:	6023      	strmi	r3, [r4, #0]
 8004d40:	b11d      	cbz	r5, 8004d4a <_printf_i+0x19e>
 8004d42:	2310      	movs	r3, #16
 8004d44:	e7ac      	b.n	8004ca0 <_printf_i+0xf4>
 8004d46:	4827      	ldr	r0, [pc, #156]	@ (8004de4 <_printf_i+0x238>)
 8004d48:	e7e9      	b.n	8004d1e <_printf_i+0x172>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	f023 0320 	bic.w	r3, r3, #32
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	e7f6      	b.n	8004d42 <_printf_i+0x196>
 8004d54:	4616      	mov	r6, r2
 8004d56:	e7bd      	b.n	8004cd4 <_printf_i+0x128>
 8004d58:	6833      	ldr	r3, [r6, #0]
 8004d5a:	6825      	ldr	r5, [r4, #0]
 8004d5c:	6961      	ldr	r1, [r4, #20]
 8004d5e:	1d18      	adds	r0, r3, #4
 8004d60:	6030      	str	r0, [r6, #0]
 8004d62:	062e      	lsls	r6, r5, #24
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	d501      	bpl.n	8004d6c <_printf_i+0x1c0>
 8004d68:	6019      	str	r1, [r3, #0]
 8004d6a:	e002      	b.n	8004d72 <_printf_i+0x1c6>
 8004d6c:	0668      	lsls	r0, r5, #25
 8004d6e:	d5fb      	bpl.n	8004d68 <_printf_i+0x1bc>
 8004d70:	8019      	strh	r1, [r3, #0]
 8004d72:	2300      	movs	r3, #0
 8004d74:	6123      	str	r3, [r4, #16]
 8004d76:	4616      	mov	r6, r2
 8004d78:	e7bc      	b.n	8004cf4 <_printf_i+0x148>
 8004d7a:	6833      	ldr	r3, [r6, #0]
 8004d7c:	1d1a      	adds	r2, r3, #4
 8004d7e:	6032      	str	r2, [r6, #0]
 8004d80:	681e      	ldr	r6, [r3, #0]
 8004d82:	6862      	ldr	r2, [r4, #4]
 8004d84:	2100      	movs	r1, #0
 8004d86:	4630      	mov	r0, r6
 8004d88:	f7fb fa2a 	bl	80001e0 <memchr>
 8004d8c:	b108      	cbz	r0, 8004d92 <_printf_i+0x1e6>
 8004d8e:	1b80      	subs	r0, r0, r6
 8004d90:	6060      	str	r0, [r4, #4]
 8004d92:	6863      	ldr	r3, [r4, #4]
 8004d94:	6123      	str	r3, [r4, #16]
 8004d96:	2300      	movs	r3, #0
 8004d98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d9c:	e7aa      	b.n	8004cf4 <_printf_i+0x148>
 8004d9e:	6923      	ldr	r3, [r4, #16]
 8004da0:	4632      	mov	r2, r6
 8004da2:	4649      	mov	r1, r9
 8004da4:	4640      	mov	r0, r8
 8004da6:	47d0      	blx	sl
 8004da8:	3001      	adds	r0, #1
 8004daa:	d0ad      	beq.n	8004d08 <_printf_i+0x15c>
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	079b      	lsls	r3, r3, #30
 8004db0:	d413      	bmi.n	8004dda <_printf_i+0x22e>
 8004db2:	68e0      	ldr	r0, [r4, #12]
 8004db4:	9b03      	ldr	r3, [sp, #12]
 8004db6:	4298      	cmp	r0, r3
 8004db8:	bfb8      	it	lt
 8004dba:	4618      	movlt	r0, r3
 8004dbc:	e7a6      	b.n	8004d0c <_printf_i+0x160>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	4640      	mov	r0, r8
 8004dc6:	47d0      	blx	sl
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d09d      	beq.n	8004d08 <_printf_i+0x15c>
 8004dcc:	3501      	adds	r5, #1
 8004dce:	68e3      	ldr	r3, [r4, #12]
 8004dd0:	9903      	ldr	r1, [sp, #12]
 8004dd2:	1a5b      	subs	r3, r3, r1
 8004dd4:	42ab      	cmp	r3, r5
 8004dd6:	dcf2      	bgt.n	8004dbe <_printf_i+0x212>
 8004dd8:	e7eb      	b.n	8004db2 <_printf_i+0x206>
 8004dda:	2500      	movs	r5, #0
 8004ddc:	f104 0619 	add.w	r6, r4, #25
 8004de0:	e7f5      	b.n	8004dce <_printf_i+0x222>
 8004de2:	bf00      	nop
 8004de4:	0800a1f6 	.word	0x0800a1f6
 8004de8:	0800a207 	.word	0x0800a207

08004dec <_scanf_float>:
 8004dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df0:	b087      	sub	sp, #28
 8004df2:	4617      	mov	r7, r2
 8004df4:	9303      	str	r3, [sp, #12]
 8004df6:	688b      	ldr	r3, [r1, #8]
 8004df8:	1e5a      	subs	r2, r3, #1
 8004dfa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004dfe:	bf81      	itttt	hi
 8004e00:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004e04:	eb03 0b05 	addhi.w	fp, r3, r5
 8004e08:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004e0c:	608b      	strhi	r3, [r1, #8]
 8004e0e:	680b      	ldr	r3, [r1, #0]
 8004e10:	460a      	mov	r2, r1
 8004e12:	f04f 0500 	mov.w	r5, #0
 8004e16:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004e1a:	f842 3b1c 	str.w	r3, [r2], #28
 8004e1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004e22:	4680      	mov	r8, r0
 8004e24:	460c      	mov	r4, r1
 8004e26:	bf98      	it	ls
 8004e28:	f04f 0b00 	movls.w	fp, #0
 8004e2c:	9201      	str	r2, [sp, #4]
 8004e2e:	4616      	mov	r6, r2
 8004e30:	46aa      	mov	sl, r5
 8004e32:	46a9      	mov	r9, r5
 8004e34:	9502      	str	r5, [sp, #8]
 8004e36:	68a2      	ldr	r2, [r4, #8]
 8004e38:	b152      	cbz	r2, 8004e50 <_scanf_float+0x64>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004e40:	d864      	bhi.n	8004f0c <_scanf_float+0x120>
 8004e42:	2b40      	cmp	r3, #64	@ 0x40
 8004e44:	d83c      	bhi.n	8004ec0 <_scanf_float+0xd4>
 8004e46:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004e4a:	b2c8      	uxtb	r0, r1
 8004e4c:	280e      	cmp	r0, #14
 8004e4e:	d93a      	bls.n	8004ec6 <_scanf_float+0xda>
 8004e50:	f1b9 0f00 	cmp.w	r9, #0
 8004e54:	d003      	beq.n	8004e5e <_scanf_float+0x72>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e62:	f1ba 0f01 	cmp.w	sl, #1
 8004e66:	f200 8117 	bhi.w	8005098 <_scanf_float+0x2ac>
 8004e6a:	9b01      	ldr	r3, [sp, #4]
 8004e6c:	429e      	cmp	r6, r3
 8004e6e:	f200 8108 	bhi.w	8005082 <_scanf_float+0x296>
 8004e72:	2001      	movs	r0, #1
 8004e74:	b007      	add	sp, #28
 8004e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e7a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004e7e:	2a0d      	cmp	r2, #13
 8004e80:	d8e6      	bhi.n	8004e50 <_scanf_float+0x64>
 8004e82:	a101      	add	r1, pc, #4	@ (adr r1, 8004e88 <_scanf_float+0x9c>)
 8004e84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004e88:	08004fcf 	.word	0x08004fcf
 8004e8c:	08004e51 	.word	0x08004e51
 8004e90:	08004e51 	.word	0x08004e51
 8004e94:	08004e51 	.word	0x08004e51
 8004e98:	0800502f 	.word	0x0800502f
 8004e9c:	08005007 	.word	0x08005007
 8004ea0:	08004e51 	.word	0x08004e51
 8004ea4:	08004e51 	.word	0x08004e51
 8004ea8:	08004fdd 	.word	0x08004fdd
 8004eac:	08004e51 	.word	0x08004e51
 8004eb0:	08004e51 	.word	0x08004e51
 8004eb4:	08004e51 	.word	0x08004e51
 8004eb8:	08004e51 	.word	0x08004e51
 8004ebc:	08004f95 	.word	0x08004f95
 8004ec0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004ec4:	e7db      	b.n	8004e7e <_scanf_float+0x92>
 8004ec6:	290e      	cmp	r1, #14
 8004ec8:	d8c2      	bhi.n	8004e50 <_scanf_float+0x64>
 8004eca:	a001      	add	r0, pc, #4	@ (adr r0, 8004ed0 <_scanf_float+0xe4>)
 8004ecc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004ed0:	08004f85 	.word	0x08004f85
 8004ed4:	08004e51 	.word	0x08004e51
 8004ed8:	08004f85 	.word	0x08004f85
 8004edc:	0800501b 	.word	0x0800501b
 8004ee0:	08004e51 	.word	0x08004e51
 8004ee4:	08004f2d 	.word	0x08004f2d
 8004ee8:	08004f6b 	.word	0x08004f6b
 8004eec:	08004f6b 	.word	0x08004f6b
 8004ef0:	08004f6b 	.word	0x08004f6b
 8004ef4:	08004f6b 	.word	0x08004f6b
 8004ef8:	08004f6b 	.word	0x08004f6b
 8004efc:	08004f6b 	.word	0x08004f6b
 8004f00:	08004f6b 	.word	0x08004f6b
 8004f04:	08004f6b 	.word	0x08004f6b
 8004f08:	08004f6b 	.word	0x08004f6b
 8004f0c:	2b6e      	cmp	r3, #110	@ 0x6e
 8004f0e:	d809      	bhi.n	8004f24 <_scanf_float+0x138>
 8004f10:	2b60      	cmp	r3, #96	@ 0x60
 8004f12:	d8b2      	bhi.n	8004e7a <_scanf_float+0x8e>
 8004f14:	2b54      	cmp	r3, #84	@ 0x54
 8004f16:	d07b      	beq.n	8005010 <_scanf_float+0x224>
 8004f18:	2b59      	cmp	r3, #89	@ 0x59
 8004f1a:	d199      	bne.n	8004e50 <_scanf_float+0x64>
 8004f1c:	2d07      	cmp	r5, #7
 8004f1e:	d197      	bne.n	8004e50 <_scanf_float+0x64>
 8004f20:	2508      	movs	r5, #8
 8004f22:	e02c      	b.n	8004f7e <_scanf_float+0x192>
 8004f24:	2b74      	cmp	r3, #116	@ 0x74
 8004f26:	d073      	beq.n	8005010 <_scanf_float+0x224>
 8004f28:	2b79      	cmp	r3, #121	@ 0x79
 8004f2a:	e7f6      	b.n	8004f1a <_scanf_float+0x12e>
 8004f2c:	6821      	ldr	r1, [r4, #0]
 8004f2e:	05c8      	lsls	r0, r1, #23
 8004f30:	d51b      	bpl.n	8004f6a <_scanf_float+0x17e>
 8004f32:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004f36:	6021      	str	r1, [r4, #0]
 8004f38:	f109 0901 	add.w	r9, r9, #1
 8004f3c:	f1bb 0f00 	cmp.w	fp, #0
 8004f40:	d003      	beq.n	8004f4a <_scanf_float+0x15e>
 8004f42:	3201      	adds	r2, #1
 8004f44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f48:	60a2      	str	r2, [r4, #8]
 8004f4a:	68a3      	ldr	r3, [r4, #8]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	60a3      	str	r3, [r4, #8]
 8004f50:	6923      	ldr	r3, [r4, #16]
 8004f52:	3301      	adds	r3, #1
 8004f54:	6123      	str	r3, [r4, #16]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	607b      	str	r3, [r7, #4]
 8004f5e:	f340 8087 	ble.w	8005070 <_scanf_float+0x284>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	3301      	adds	r3, #1
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	e765      	b.n	8004e36 <_scanf_float+0x4a>
 8004f6a:	eb1a 0105 	adds.w	r1, sl, r5
 8004f6e:	f47f af6f 	bne.w	8004e50 <_scanf_float+0x64>
 8004f72:	6822      	ldr	r2, [r4, #0]
 8004f74:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004f78:	6022      	str	r2, [r4, #0]
 8004f7a:	460d      	mov	r5, r1
 8004f7c:	468a      	mov	sl, r1
 8004f7e:	f806 3b01 	strb.w	r3, [r6], #1
 8004f82:	e7e2      	b.n	8004f4a <_scanf_float+0x15e>
 8004f84:	6822      	ldr	r2, [r4, #0]
 8004f86:	0610      	lsls	r0, r2, #24
 8004f88:	f57f af62 	bpl.w	8004e50 <_scanf_float+0x64>
 8004f8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f90:	6022      	str	r2, [r4, #0]
 8004f92:	e7f4      	b.n	8004f7e <_scanf_float+0x192>
 8004f94:	f1ba 0f00 	cmp.w	sl, #0
 8004f98:	d10e      	bne.n	8004fb8 <_scanf_float+0x1cc>
 8004f9a:	f1b9 0f00 	cmp.w	r9, #0
 8004f9e:	d10e      	bne.n	8004fbe <_scanf_float+0x1d2>
 8004fa0:	6822      	ldr	r2, [r4, #0]
 8004fa2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004fa6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004faa:	d108      	bne.n	8004fbe <_scanf_float+0x1d2>
 8004fac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004fb0:	6022      	str	r2, [r4, #0]
 8004fb2:	f04f 0a01 	mov.w	sl, #1
 8004fb6:	e7e2      	b.n	8004f7e <_scanf_float+0x192>
 8004fb8:	f1ba 0f02 	cmp.w	sl, #2
 8004fbc:	d055      	beq.n	800506a <_scanf_float+0x27e>
 8004fbe:	2d01      	cmp	r5, #1
 8004fc0:	d002      	beq.n	8004fc8 <_scanf_float+0x1dc>
 8004fc2:	2d04      	cmp	r5, #4
 8004fc4:	f47f af44 	bne.w	8004e50 <_scanf_float+0x64>
 8004fc8:	3501      	adds	r5, #1
 8004fca:	b2ed      	uxtb	r5, r5
 8004fcc:	e7d7      	b.n	8004f7e <_scanf_float+0x192>
 8004fce:	f1ba 0f01 	cmp.w	sl, #1
 8004fd2:	f47f af3d 	bne.w	8004e50 <_scanf_float+0x64>
 8004fd6:	f04f 0a02 	mov.w	sl, #2
 8004fda:	e7d0      	b.n	8004f7e <_scanf_float+0x192>
 8004fdc:	b97d      	cbnz	r5, 8004ffe <_scanf_float+0x212>
 8004fde:	f1b9 0f00 	cmp.w	r9, #0
 8004fe2:	f47f af38 	bne.w	8004e56 <_scanf_float+0x6a>
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004fec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004ff0:	f040 8108 	bne.w	8005204 <_scanf_float+0x418>
 8004ff4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004ff8:	6022      	str	r2, [r4, #0]
 8004ffa:	2501      	movs	r5, #1
 8004ffc:	e7bf      	b.n	8004f7e <_scanf_float+0x192>
 8004ffe:	2d03      	cmp	r5, #3
 8005000:	d0e2      	beq.n	8004fc8 <_scanf_float+0x1dc>
 8005002:	2d05      	cmp	r5, #5
 8005004:	e7de      	b.n	8004fc4 <_scanf_float+0x1d8>
 8005006:	2d02      	cmp	r5, #2
 8005008:	f47f af22 	bne.w	8004e50 <_scanf_float+0x64>
 800500c:	2503      	movs	r5, #3
 800500e:	e7b6      	b.n	8004f7e <_scanf_float+0x192>
 8005010:	2d06      	cmp	r5, #6
 8005012:	f47f af1d 	bne.w	8004e50 <_scanf_float+0x64>
 8005016:	2507      	movs	r5, #7
 8005018:	e7b1      	b.n	8004f7e <_scanf_float+0x192>
 800501a:	6822      	ldr	r2, [r4, #0]
 800501c:	0591      	lsls	r1, r2, #22
 800501e:	f57f af17 	bpl.w	8004e50 <_scanf_float+0x64>
 8005022:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005026:	6022      	str	r2, [r4, #0]
 8005028:	f8cd 9008 	str.w	r9, [sp, #8]
 800502c:	e7a7      	b.n	8004f7e <_scanf_float+0x192>
 800502e:	6822      	ldr	r2, [r4, #0]
 8005030:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005034:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005038:	d006      	beq.n	8005048 <_scanf_float+0x25c>
 800503a:	0550      	lsls	r0, r2, #21
 800503c:	f57f af08 	bpl.w	8004e50 <_scanf_float+0x64>
 8005040:	f1b9 0f00 	cmp.w	r9, #0
 8005044:	f000 80de 	beq.w	8005204 <_scanf_float+0x418>
 8005048:	0591      	lsls	r1, r2, #22
 800504a:	bf58      	it	pl
 800504c:	9902      	ldrpl	r1, [sp, #8]
 800504e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005052:	bf58      	it	pl
 8005054:	eba9 0101 	subpl.w	r1, r9, r1
 8005058:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800505c:	bf58      	it	pl
 800505e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005062:	6022      	str	r2, [r4, #0]
 8005064:	f04f 0900 	mov.w	r9, #0
 8005068:	e789      	b.n	8004f7e <_scanf_float+0x192>
 800506a:	f04f 0a03 	mov.w	sl, #3
 800506e:	e786      	b.n	8004f7e <_scanf_float+0x192>
 8005070:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005074:	4639      	mov	r1, r7
 8005076:	4640      	mov	r0, r8
 8005078:	4798      	blx	r3
 800507a:	2800      	cmp	r0, #0
 800507c:	f43f aedb 	beq.w	8004e36 <_scanf_float+0x4a>
 8005080:	e6e6      	b.n	8004e50 <_scanf_float+0x64>
 8005082:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005086:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800508a:	463a      	mov	r2, r7
 800508c:	4640      	mov	r0, r8
 800508e:	4798      	blx	r3
 8005090:	6923      	ldr	r3, [r4, #16]
 8005092:	3b01      	subs	r3, #1
 8005094:	6123      	str	r3, [r4, #16]
 8005096:	e6e8      	b.n	8004e6a <_scanf_float+0x7e>
 8005098:	1e6b      	subs	r3, r5, #1
 800509a:	2b06      	cmp	r3, #6
 800509c:	d824      	bhi.n	80050e8 <_scanf_float+0x2fc>
 800509e:	2d02      	cmp	r5, #2
 80050a0:	d836      	bhi.n	8005110 <_scanf_float+0x324>
 80050a2:	9b01      	ldr	r3, [sp, #4]
 80050a4:	429e      	cmp	r6, r3
 80050a6:	f67f aee4 	bls.w	8004e72 <_scanf_float+0x86>
 80050aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050b2:	463a      	mov	r2, r7
 80050b4:	4640      	mov	r0, r8
 80050b6:	4798      	blx	r3
 80050b8:	6923      	ldr	r3, [r4, #16]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	6123      	str	r3, [r4, #16]
 80050be:	e7f0      	b.n	80050a2 <_scanf_float+0x2b6>
 80050c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050c4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80050c8:	463a      	mov	r2, r7
 80050ca:	4640      	mov	r0, r8
 80050cc:	4798      	blx	r3
 80050ce:	6923      	ldr	r3, [r4, #16]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	6123      	str	r3, [r4, #16]
 80050d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050d8:	fa5f fa8a 	uxtb.w	sl, sl
 80050dc:	f1ba 0f02 	cmp.w	sl, #2
 80050e0:	d1ee      	bne.n	80050c0 <_scanf_float+0x2d4>
 80050e2:	3d03      	subs	r5, #3
 80050e4:	b2ed      	uxtb	r5, r5
 80050e6:	1b76      	subs	r6, r6, r5
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	05da      	lsls	r2, r3, #23
 80050ec:	d530      	bpl.n	8005150 <_scanf_float+0x364>
 80050ee:	055b      	lsls	r3, r3, #21
 80050f0:	d511      	bpl.n	8005116 <_scanf_float+0x32a>
 80050f2:	9b01      	ldr	r3, [sp, #4]
 80050f4:	429e      	cmp	r6, r3
 80050f6:	f67f aebc 	bls.w	8004e72 <_scanf_float+0x86>
 80050fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005102:	463a      	mov	r2, r7
 8005104:	4640      	mov	r0, r8
 8005106:	4798      	blx	r3
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	3b01      	subs	r3, #1
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	e7f0      	b.n	80050f2 <_scanf_float+0x306>
 8005110:	46aa      	mov	sl, r5
 8005112:	46b3      	mov	fp, r6
 8005114:	e7de      	b.n	80050d4 <_scanf_float+0x2e8>
 8005116:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800511a:	6923      	ldr	r3, [r4, #16]
 800511c:	2965      	cmp	r1, #101	@ 0x65
 800511e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005122:	f106 35ff 	add.w	r5, r6, #4294967295
 8005126:	6123      	str	r3, [r4, #16]
 8005128:	d00c      	beq.n	8005144 <_scanf_float+0x358>
 800512a:	2945      	cmp	r1, #69	@ 0x45
 800512c:	d00a      	beq.n	8005144 <_scanf_float+0x358>
 800512e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005132:	463a      	mov	r2, r7
 8005134:	4640      	mov	r0, r8
 8005136:	4798      	blx	r3
 8005138:	6923      	ldr	r3, [r4, #16]
 800513a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800513e:	3b01      	subs	r3, #1
 8005140:	1eb5      	subs	r5, r6, #2
 8005142:	6123      	str	r3, [r4, #16]
 8005144:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005148:	463a      	mov	r2, r7
 800514a:	4640      	mov	r0, r8
 800514c:	4798      	blx	r3
 800514e:	462e      	mov	r6, r5
 8005150:	6822      	ldr	r2, [r4, #0]
 8005152:	f012 0210 	ands.w	r2, r2, #16
 8005156:	d001      	beq.n	800515c <_scanf_float+0x370>
 8005158:	2000      	movs	r0, #0
 800515a:	e68b      	b.n	8004e74 <_scanf_float+0x88>
 800515c:	7032      	strb	r2, [r6, #0]
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005168:	d11c      	bne.n	80051a4 <_scanf_float+0x3b8>
 800516a:	9b02      	ldr	r3, [sp, #8]
 800516c:	454b      	cmp	r3, r9
 800516e:	eba3 0209 	sub.w	r2, r3, r9
 8005172:	d123      	bne.n	80051bc <_scanf_float+0x3d0>
 8005174:	9901      	ldr	r1, [sp, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	4640      	mov	r0, r8
 800517a:	f002 fb55 	bl	8007828 <_strtod_r>
 800517e:	9b03      	ldr	r3, [sp, #12]
 8005180:	6821      	ldr	r1, [r4, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f011 0f02 	tst.w	r1, #2
 8005188:	ec57 6b10 	vmov	r6, r7, d0
 800518c:	f103 0204 	add.w	r2, r3, #4
 8005190:	d01f      	beq.n	80051d2 <_scanf_float+0x3e6>
 8005192:	9903      	ldr	r1, [sp, #12]
 8005194:	600a      	str	r2, [r1, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	e9c3 6700 	strd	r6, r7, [r3]
 800519c:	68e3      	ldr	r3, [r4, #12]
 800519e:	3301      	adds	r3, #1
 80051a0:	60e3      	str	r3, [r4, #12]
 80051a2:	e7d9      	b.n	8005158 <_scanf_float+0x36c>
 80051a4:	9b04      	ldr	r3, [sp, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0e4      	beq.n	8005174 <_scanf_float+0x388>
 80051aa:	9905      	ldr	r1, [sp, #20]
 80051ac:	230a      	movs	r3, #10
 80051ae:	3101      	adds	r1, #1
 80051b0:	4640      	mov	r0, r8
 80051b2:	f002 fbb9 	bl	8007928 <_strtol_r>
 80051b6:	9b04      	ldr	r3, [sp, #16]
 80051b8:	9e05      	ldr	r6, [sp, #20]
 80051ba:	1ac2      	subs	r2, r0, r3
 80051bc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80051c0:	429e      	cmp	r6, r3
 80051c2:	bf28      	it	cs
 80051c4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80051c8:	4910      	ldr	r1, [pc, #64]	@ (800520c <_scanf_float+0x420>)
 80051ca:	4630      	mov	r0, r6
 80051cc:	f000 f8e4 	bl	8005398 <siprintf>
 80051d0:	e7d0      	b.n	8005174 <_scanf_float+0x388>
 80051d2:	f011 0f04 	tst.w	r1, #4
 80051d6:	9903      	ldr	r1, [sp, #12]
 80051d8:	600a      	str	r2, [r1, #0]
 80051da:	d1dc      	bne.n	8005196 <_scanf_float+0x3aa>
 80051dc:	681d      	ldr	r5, [r3, #0]
 80051de:	4632      	mov	r2, r6
 80051e0:	463b      	mov	r3, r7
 80051e2:	4630      	mov	r0, r6
 80051e4:	4639      	mov	r1, r7
 80051e6:	f7fb fca9 	bl	8000b3c <__aeabi_dcmpun>
 80051ea:	b128      	cbz	r0, 80051f8 <_scanf_float+0x40c>
 80051ec:	4808      	ldr	r0, [pc, #32]	@ (8005210 <_scanf_float+0x424>)
 80051ee:	f000 f9c7 	bl	8005580 <nanf>
 80051f2:	ed85 0a00 	vstr	s0, [r5]
 80051f6:	e7d1      	b.n	800519c <_scanf_float+0x3b0>
 80051f8:	4630      	mov	r0, r6
 80051fa:	4639      	mov	r1, r7
 80051fc:	f7fb fcfc 	bl	8000bf8 <__aeabi_d2f>
 8005200:	6028      	str	r0, [r5, #0]
 8005202:	e7cb      	b.n	800519c <_scanf_float+0x3b0>
 8005204:	f04f 0900 	mov.w	r9, #0
 8005208:	e629      	b.n	8004e5e <_scanf_float+0x72>
 800520a:	bf00      	nop
 800520c:	0800a218 	.word	0x0800a218
 8005210:	0800a5ad 	.word	0x0800a5ad

08005214 <std>:
 8005214:	2300      	movs	r3, #0
 8005216:	b510      	push	{r4, lr}
 8005218:	4604      	mov	r4, r0
 800521a:	e9c0 3300 	strd	r3, r3, [r0]
 800521e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005222:	6083      	str	r3, [r0, #8]
 8005224:	8181      	strh	r1, [r0, #12]
 8005226:	6643      	str	r3, [r0, #100]	@ 0x64
 8005228:	81c2      	strh	r2, [r0, #14]
 800522a:	6183      	str	r3, [r0, #24]
 800522c:	4619      	mov	r1, r3
 800522e:	2208      	movs	r2, #8
 8005230:	305c      	adds	r0, #92	@ 0x5c
 8005232:	f000 f914 	bl	800545e <memset>
 8005236:	4b0d      	ldr	r3, [pc, #52]	@ (800526c <std+0x58>)
 8005238:	6263      	str	r3, [r4, #36]	@ 0x24
 800523a:	4b0d      	ldr	r3, [pc, #52]	@ (8005270 <std+0x5c>)
 800523c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800523e:	4b0d      	ldr	r3, [pc, #52]	@ (8005274 <std+0x60>)
 8005240:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005242:	4b0d      	ldr	r3, [pc, #52]	@ (8005278 <std+0x64>)
 8005244:	6323      	str	r3, [r4, #48]	@ 0x30
 8005246:	4b0d      	ldr	r3, [pc, #52]	@ (800527c <std+0x68>)
 8005248:	6224      	str	r4, [r4, #32]
 800524a:	429c      	cmp	r4, r3
 800524c:	d006      	beq.n	800525c <std+0x48>
 800524e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005252:	4294      	cmp	r4, r2
 8005254:	d002      	beq.n	800525c <std+0x48>
 8005256:	33d0      	adds	r3, #208	@ 0xd0
 8005258:	429c      	cmp	r4, r3
 800525a:	d105      	bne.n	8005268 <std+0x54>
 800525c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005264:	f000 b988 	b.w	8005578 <__retarget_lock_init_recursive>
 8005268:	bd10      	pop	{r4, pc}
 800526a:	bf00      	nop
 800526c:	080053d9 	.word	0x080053d9
 8005270:	080053fb 	.word	0x080053fb
 8005274:	08005433 	.word	0x08005433
 8005278:	08005457 	.word	0x08005457
 800527c:	200037c0 	.word	0x200037c0

08005280 <stdio_exit_handler>:
 8005280:	4a02      	ldr	r2, [pc, #8]	@ (800528c <stdio_exit_handler+0xc>)
 8005282:	4903      	ldr	r1, [pc, #12]	@ (8005290 <stdio_exit_handler+0x10>)
 8005284:	4803      	ldr	r0, [pc, #12]	@ (8005294 <stdio_exit_handler+0x14>)
 8005286:	f000 b869 	b.w	800535c <_fwalk_sglue>
 800528a:	bf00      	nop
 800528c:	2000350c 	.word	0x2000350c
 8005290:	08007ce5 	.word	0x08007ce5
 8005294:	2000351c 	.word	0x2000351c

08005298 <cleanup_stdio>:
 8005298:	6841      	ldr	r1, [r0, #4]
 800529a:	4b0c      	ldr	r3, [pc, #48]	@ (80052cc <cleanup_stdio+0x34>)
 800529c:	4299      	cmp	r1, r3
 800529e:	b510      	push	{r4, lr}
 80052a0:	4604      	mov	r4, r0
 80052a2:	d001      	beq.n	80052a8 <cleanup_stdio+0x10>
 80052a4:	f002 fd1e 	bl	8007ce4 <_fflush_r>
 80052a8:	68a1      	ldr	r1, [r4, #8]
 80052aa:	4b09      	ldr	r3, [pc, #36]	@ (80052d0 <cleanup_stdio+0x38>)
 80052ac:	4299      	cmp	r1, r3
 80052ae:	d002      	beq.n	80052b6 <cleanup_stdio+0x1e>
 80052b0:	4620      	mov	r0, r4
 80052b2:	f002 fd17 	bl	8007ce4 <_fflush_r>
 80052b6:	68e1      	ldr	r1, [r4, #12]
 80052b8:	4b06      	ldr	r3, [pc, #24]	@ (80052d4 <cleanup_stdio+0x3c>)
 80052ba:	4299      	cmp	r1, r3
 80052bc:	d004      	beq.n	80052c8 <cleanup_stdio+0x30>
 80052be:	4620      	mov	r0, r4
 80052c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c4:	f002 bd0e 	b.w	8007ce4 <_fflush_r>
 80052c8:	bd10      	pop	{r4, pc}
 80052ca:	bf00      	nop
 80052cc:	200037c0 	.word	0x200037c0
 80052d0:	20003828 	.word	0x20003828
 80052d4:	20003890 	.word	0x20003890

080052d8 <global_stdio_init.part.0>:
 80052d8:	b510      	push	{r4, lr}
 80052da:	4b0b      	ldr	r3, [pc, #44]	@ (8005308 <global_stdio_init.part.0+0x30>)
 80052dc:	4c0b      	ldr	r4, [pc, #44]	@ (800530c <global_stdio_init.part.0+0x34>)
 80052de:	4a0c      	ldr	r2, [pc, #48]	@ (8005310 <global_stdio_init.part.0+0x38>)
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	4620      	mov	r0, r4
 80052e4:	2200      	movs	r2, #0
 80052e6:	2104      	movs	r1, #4
 80052e8:	f7ff ff94 	bl	8005214 <std>
 80052ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052f0:	2201      	movs	r2, #1
 80052f2:	2109      	movs	r1, #9
 80052f4:	f7ff ff8e 	bl	8005214 <std>
 80052f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052fc:	2202      	movs	r2, #2
 80052fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005302:	2112      	movs	r1, #18
 8005304:	f7ff bf86 	b.w	8005214 <std>
 8005308:	200038f8 	.word	0x200038f8
 800530c:	200037c0 	.word	0x200037c0
 8005310:	08005281 	.word	0x08005281

08005314 <__sfp_lock_acquire>:
 8005314:	4801      	ldr	r0, [pc, #4]	@ (800531c <__sfp_lock_acquire+0x8>)
 8005316:	f000 b930 	b.w	800557a <__retarget_lock_acquire_recursive>
 800531a:	bf00      	nop
 800531c:	20003901 	.word	0x20003901

08005320 <__sfp_lock_release>:
 8005320:	4801      	ldr	r0, [pc, #4]	@ (8005328 <__sfp_lock_release+0x8>)
 8005322:	f000 b92b 	b.w	800557c <__retarget_lock_release_recursive>
 8005326:	bf00      	nop
 8005328:	20003901 	.word	0x20003901

0800532c <__sinit>:
 800532c:	b510      	push	{r4, lr}
 800532e:	4604      	mov	r4, r0
 8005330:	f7ff fff0 	bl	8005314 <__sfp_lock_acquire>
 8005334:	6a23      	ldr	r3, [r4, #32]
 8005336:	b11b      	cbz	r3, 8005340 <__sinit+0x14>
 8005338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800533c:	f7ff bff0 	b.w	8005320 <__sfp_lock_release>
 8005340:	4b04      	ldr	r3, [pc, #16]	@ (8005354 <__sinit+0x28>)
 8005342:	6223      	str	r3, [r4, #32]
 8005344:	4b04      	ldr	r3, [pc, #16]	@ (8005358 <__sinit+0x2c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f5      	bne.n	8005338 <__sinit+0xc>
 800534c:	f7ff ffc4 	bl	80052d8 <global_stdio_init.part.0>
 8005350:	e7f2      	b.n	8005338 <__sinit+0xc>
 8005352:	bf00      	nop
 8005354:	08005299 	.word	0x08005299
 8005358:	200038f8 	.word	0x200038f8

0800535c <_fwalk_sglue>:
 800535c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005360:	4607      	mov	r7, r0
 8005362:	4688      	mov	r8, r1
 8005364:	4614      	mov	r4, r2
 8005366:	2600      	movs	r6, #0
 8005368:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800536c:	f1b9 0901 	subs.w	r9, r9, #1
 8005370:	d505      	bpl.n	800537e <_fwalk_sglue+0x22>
 8005372:	6824      	ldr	r4, [r4, #0]
 8005374:	2c00      	cmp	r4, #0
 8005376:	d1f7      	bne.n	8005368 <_fwalk_sglue+0xc>
 8005378:	4630      	mov	r0, r6
 800537a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800537e:	89ab      	ldrh	r3, [r5, #12]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d907      	bls.n	8005394 <_fwalk_sglue+0x38>
 8005384:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005388:	3301      	adds	r3, #1
 800538a:	d003      	beq.n	8005394 <_fwalk_sglue+0x38>
 800538c:	4629      	mov	r1, r5
 800538e:	4638      	mov	r0, r7
 8005390:	47c0      	blx	r8
 8005392:	4306      	orrs	r6, r0
 8005394:	3568      	adds	r5, #104	@ 0x68
 8005396:	e7e9      	b.n	800536c <_fwalk_sglue+0x10>

08005398 <siprintf>:
 8005398:	b40e      	push	{r1, r2, r3}
 800539a:	b500      	push	{lr}
 800539c:	b09c      	sub	sp, #112	@ 0x70
 800539e:	ab1d      	add	r3, sp, #116	@ 0x74
 80053a0:	9002      	str	r0, [sp, #8]
 80053a2:	9006      	str	r0, [sp, #24]
 80053a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80053a8:	4809      	ldr	r0, [pc, #36]	@ (80053d0 <siprintf+0x38>)
 80053aa:	9107      	str	r1, [sp, #28]
 80053ac:	9104      	str	r1, [sp, #16]
 80053ae:	4909      	ldr	r1, [pc, #36]	@ (80053d4 <siprintf+0x3c>)
 80053b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80053b4:	9105      	str	r1, [sp, #20]
 80053b6:	6800      	ldr	r0, [r0, #0]
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	a902      	add	r1, sp, #8
 80053bc:	f002 fb12 	bl	80079e4 <_svfiprintf_r>
 80053c0:	9b02      	ldr	r3, [sp, #8]
 80053c2:	2200      	movs	r2, #0
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	b01c      	add	sp, #112	@ 0x70
 80053c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053cc:	b003      	add	sp, #12
 80053ce:	4770      	bx	lr
 80053d0:	20003518 	.word	0x20003518
 80053d4:	ffff0208 	.word	0xffff0208

080053d8 <__sread>:
 80053d8:	b510      	push	{r4, lr}
 80053da:	460c      	mov	r4, r1
 80053dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e0:	f000 f86c 	bl	80054bc <_read_r>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	bfab      	itete	ge
 80053e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053ea:	89a3      	ldrhlt	r3, [r4, #12]
 80053ec:	181b      	addge	r3, r3, r0
 80053ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053f2:	bfac      	ite	ge
 80053f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053f6:	81a3      	strhlt	r3, [r4, #12]
 80053f8:	bd10      	pop	{r4, pc}

080053fa <__swrite>:
 80053fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053fe:	461f      	mov	r7, r3
 8005400:	898b      	ldrh	r3, [r1, #12]
 8005402:	05db      	lsls	r3, r3, #23
 8005404:	4605      	mov	r5, r0
 8005406:	460c      	mov	r4, r1
 8005408:	4616      	mov	r6, r2
 800540a:	d505      	bpl.n	8005418 <__swrite+0x1e>
 800540c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005410:	2302      	movs	r3, #2
 8005412:	2200      	movs	r2, #0
 8005414:	f000 f840 	bl	8005498 <_lseek_r>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800541e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005422:	81a3      	strh	r3, [r4, #12]
 8005424:	4632      	mov	r2, r6
 8005426:	463b      	mov	r3, r7
 8005428:	4628      	mov	r0, r5
 800542a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800542e:	f000 b867 	b.w	8005500 <_write_r>

08005432 <__sseek>:
 8005432:	b510      	push	{r4, lr}
 8005434:	460c      	mov	r4, r1
 8005436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543a:	f000 f82d 	bl	8005498 <_lseek_r>
 800543e:	1c43      	adds	r3, r0, #1
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	bf15      	itete	ne
 8005444:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005446:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800544a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800544e:	81a3      	strheq	r3, [r4, #12]
 8005450:	bf18      	it	ne
 8005452:	81a3      	strhne	r3, [r4, #12]
 8005454:	bd10      	pop	{r4, pc}

08005456 <__sclose>:
 8005456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545a:	f000 b80d 	b.w	8005478 <_close_r>

0800545e <memset>:
 800545e:	4402      	add	r2, r0
 8005460:	4603      	mov	r3, r0
 8005462:	4293      	cmp	r3, r2
 8005464:	d100      	bne.n	8005468 <memset+0xa>
 8005466:	4770      	bx	lr
 8005468:	f803 1b01 	strb.w	r1, [r3], #1
 800546c:	e7f9      	b.n	8005462 <memset+0x4>
	...

08005470 <_localeconv_r>:
 8005470:	4800      	ldr	r0, [pc, #0]	@ (8005474 <_localeconv_r+0x4>)
 8005472:	4770      	bx	lr
 8005474:	20003658 	.word	0x20003658

08005478 <_close_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4d06      	ldr	r5, [pc, #24]	@ (8005494 <_close_r+0x1c>)
 800547c:	2300      	movs	r3, #0
 800547e:	4604      	mov	r4, r0
 8005480:	4608      	mov	r0, r1
 8005482:	602b      	str	r3, [r5, #0]
 8005484:	f7fc fcaf 	bl	8001de6 <_close>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_close_r+0x1a>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_close_r+0x1a>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	200038fc 	.word	0x200038fc

08005498 <_lseek_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	4d07      	ldr	r5, [pc, #28]	@ (80054b8 <_lseek_r+0x20>)
 800549c:	4604      	mov	r4, r0
 800549e:	4608      	mov	r0, r1
 80054a0:	4611      	mov	r1, r2
 80054a2:	2200      	movs	r2, #0
 80054a4:	602a      	str	r2, [r5, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	f7fc fcc4 	bl	8001e34 <_lseek>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d102      	bne.n	80054b6 <_lseek_r+0x1e>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	b103      	cbz	r3, 80054b6 <_lseek_r+0x1e>
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	200038fc 	.word	0x200038fc

080054bc <_read_r>:
 80054bc:	b538      	push	{r3, r4, r5, lr}
 80054be:	4d07      	ldr	r5, [pc, #28]	@ (80054dc <_read_r+0x20>)
 80054c0:	4604      	mov	r4, r0
 80054c2:	4608      	mov	r0, r1
 80054c4:	4611      	mov	r1, r2
 80054c6:	2200      	movs	r2, #0
 80054c8:	602a      	str	r2, [r5, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	f7fc fc52 	bl	8001d74 <_read>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_read_r+0x1e>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	b103      	cbz	r3, 80054da <_read_r+0x1e>
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	200038fc 	.word	0x200038fc

080054e0 <_sbrk_r>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4d06      	ldr	r5, [pc, #24]	@ (80054fc <_sbrk_r+0x1c>)
 80054e4:	2300      	movs	r3, #0
 80054e6:	4604      	mov	r4, r0
 80054e8:	4608      	mov	r0, r1
 80054ea:	602b      	str	r3, [r5, #0]
 80054ec:	f7fc fcb0 	bl	8001e50 <_sbrk>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d102      	bne.n	80054fa <_sbrk_r+0x1a>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	b103      	cbz	r3, 80054fa <_sbrk_r+0x1a>
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
 80054fc:	200038fc 	.word	0x200038fc

08005500 <_write_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d07      	ldr	r5, [pc, #28]	@ (8005520 <_write_r+0x20>)
 8005504:	4604      	mov	r4, r0
 8005506:	4608      	mov	r0, r1
 8005508:	4611      	mov	r1, r2
 800550a:	2200      	movs	r2, #0
 800550c:	602a      	str	r2, [r5, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f7fc fc4d 	bl	8001dae <_write>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_write_r+0x1e>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_write_r+0x1e>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	200038fc 	.word	0x200038fc

08005524 <__errno>:
 8005524:	4b01      	ldr	r3, [pc, #4]	@ (800552c <__errno+0x8>)
 8005526:	6818      	ldr	r0, [r3, #0]
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	20003518 	.word	0x20003518

08005530 <__libc_init_array>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	4d0d      	ldr	r5, [pc, #52]	@ (8005568 <__libc_init_array+0x38>)
 8005534:	4c0d      	ldr	r4, [pc, #52]	@ (800556c <__libc_init_array+0x3c>)
 8005536:	1b64      	subs	r4, r4, r5
 8005538:	10a4      	asrs	r4, r4, #2
 800553a:	2600      	movs	r6, #0
 800553c:	42a6      	cmp	r6, r4
 800553e:	d109      	bne.n	8005554 <__libc_init_array+0x24>
 8005540:	4d0b      	ldr	r5, [pc, #44]	@ (8005570 <__libc_init_array+0x40>)
 8005542:	4c0c      	ldr	r4, [pc, #48]	@ (8005574 <__libc_init_array+0x44>)
 8005544:	f004 fa38 	bl	80099b8 <_init>
 8005548:	1b64      	subs	r4, r4, r5
 800554a:	10a4      	asrs	r4, r4, #2
 800554c:	2600      	movs	r6, #0
 800554e:	42a6      	cmp	r6, r4
 8005550:	d105      	bne.n	800555e <__libc_init_array+0x2e>
 8005552:	bd70      	pop	{r4, r5, r6, pc}
 8005554:	f855 3b04 	ldr.w	r3, [r5], #4
 8005558:	4798      	blx	r3
 800555a:	3601      	adds	r6, #1
 800555c:	e7ee      	b.n	800553c <__libc_init_array+0xc>
 800555e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005562:	4798      	blx	r3
 8005564:	3601      	adds	r6, #1
 8005566:	e7f2      	b.n	800554e <__libc_init_array+0x1e>
 8005568:	0800a648 	.word	0x0800a648
 800556c:	0800a648 	.word	0x0800a648
 8005570:	0800a648 	.word	0x0800a648
 8005574:	0800a64c 	.word	0x0800a64c

08005578 <__retarget_lock_init_recursive>:
 8005578:	4770      	bx	lr

0800557a <__retarget_lock_acquire_recursive>:
 800557a:	4770      	bx	lr

0800557c <__retarget_lock_release_recursive>:
 800557c:	4770      	bx	lr
	...

08005580 <nanf>:
 8005580:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005588 <nanf+0x8>
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	7fc00000 	.word	0x7fc00000

0800558c <quorem>:
 800558c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005590:	6903      	ldr	r3, [r0, #16]
 8005592:	690c      	ldr	r4, [r1, #16]
 8005594:	42a3      	cmp	r3, r4
 8005596:	4607      	mov	r7, r0
 8005598:	db7e      	blt.n	8005698 <quorem+0x10c>
 800559a:	3c01      	subs	r4, #1
 800559c:	f101 0814 	add.w	r8, r1, #20
 80055a0:	00a3      	lsls	r3, r4, #2
 80055a2:	f100 0514 	add.w	r5, r0, #20
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055b6:	3301      	adds	r3, #1
 80055b8:	429a      	cmp	r2, r3
 80055ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055be:	fbb2 f6f3 	udiv	r6, r2, r3
 80055c2:	d32e      	bcc.n	8005622 <quorem+0x96>
 80055c4:	f04f 0a00 	mov.w	sl, #0
 80055c8:	46c4      	mov	ip, r8
 80055ca:	46ae      	mov	lr, r5
 80055cc:	46d3      	mov	fp, sl
 80055ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055d2:	b298      	uxth	r0, r3
 80055d4:	fb06 a000 	mla	r0, r6, r0, sl
 80055d8:	0c02      	lsrs	r2, r0, #16
 80055da:	0c1b      	lsrs	r3, r3, #16
 80055dc:	fb06 2303 	mla	r3, r6, r3, r2
 80055e0:	f8de 2000 	ldr.w	r2, [lr]
 80055e4:	b280      	uxth	r0, r0
 80055e6:	b292      	uxth	r2, r2
 80055e8:	1a12      	subs	r2, r2, r0
 80055ea:	445a      	add	r2, fp
 80055ec:	f8de 0000 	ldr.w	r0, [lr]
 80055f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055fa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055fe:	b292      	uxth	r2, r2
 8005600:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005604:	45e1      	cmp	r9, ip
 8005606:	f84e 2b04 	str.w	r2, [lr], #4
 800560a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800560e:	d2de      	bcs.n	80055ce <quorem+0x42>
 8005610:	9b00      	ldr	r3, [sp, #0]
 8005612:	58eb      	ldr	r3, [r5, r3]
 8005614:	b92b      	cbnz	r3, 8005622 <quorem+0x96>
 8005616:	9b01      	ldr	r3, [sp, #4]
 8005618:	3b04      	subs	r3, #4
 800561a:	429d      	cmp	r5, r3
 800561c:	461a      	mov	r2, r3
 800561e:	d32f      	bcc.n	8005680 <quorem+0xf4>
 8005620:	613c      	str	r4, [r7, #16]
 8005622:	4638      	mov	r0, r7
 8005624:	f001 f90e 	bl	8006844 <__mcmp>
 8005628:	2800      	cmp	r0, #0
 800562a:	db25      	blt.n	8005678 <quorem+0xec>
 800562c:	4629      	mov	r1, r5
 800562e:	2000      	movs	r0, #0
 8005630:	f858 2b04 	ldr.w	r2, [r8], #4
 8005634:	f8d1 c000 	ldr.w	ip, [r1]
 8005638:	fa1f fe82 	uxth.w	lr, r2
 800563c:	fa1f f38c 	uxth.w	r3, ip
 8005640:	eba3 030e 	sub.w	r3, r3, lr
 8005644:	4403      	add	r3, r0
 8005646:	0c12      	lsrs	r2, r2, #16
 8005648:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800564c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005650:	b29b      	uxth	r3, r3
 8005652:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005656:	45c1      	cmp	r9, r8
 8005658:	f841 3b04 	str.w	r3, [r1], #4
 800565c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005660:	d2e6      	bcs.n	8005630 <quorem+0xa4>
 8005662:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005666:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800566a:	b922      	cbnz	r2, 8005676 <quorem+0xea>
 800566c:	3b04      	subs	r3, #4
 800566e:	429d      	cmp	r5, r3
 8005670:	461a      	mov	r2, r3
 8005672:	d30b      	bcc.n	800568c <quorem+0x100>
 8005674:	613c      	str	r4, [r7, #16]
 8005676:	3601      	adds	r6, #1
 8005678:	4630      	mov	r0, r6
 800567a:	b003      	add	sp, #12
 800567c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	3b04      	subs	r3, #4
 8005684:	2a00      	cmp	r2, #0
 8005686:	d1cb      	bne.n	8005620 <quorem+0x94>
 8005688:	3c01      	subs	r4, #1
 800568a:	e7c6      	b.n	800561a <quorem+0x8e>
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	3b04      	subs	r3, #4
 8005690:	2a00      	cmp	r2, #0
 8005692:	d1ef      	bne.n	8005674 <quorem+0xe8>
 8005694:	3c01      	subs	r4, #1
 8005696:	e7ea      	b.n	800566e <quorem+0xe2>
 8005698:	2000      	movs	r0, #0
 800569a:	e7ee      	b.n	800567a <quorem+0xee>
 800569c:	0000      	movs	r0, r0
	...

080056a0 <_dtoa_r>:
 80056a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a4:	69c7      	ldr	r7, [r0, #28]
 80056a6:	b099      	sub	sp, #100	@ 0x64
 80056a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80056ac:	ec55 4b10 	vmov	r4, r5, d0
 80056b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80056b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80056b4:	4683      	mov	fp, r0
 80056b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80056b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80056ba:	b97f      	cbnz	r7, 80056dc <_dtoa_r+0x3c>
 80056bc:	2010      	movs	r0, #16
 80056be:	f7fe fe7f 	bl	80043c0 <malloc>
 80056c2:	4602      	mov	r2, r0
 80056c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80056c8:	b920      	cbnz	r0, 80056d4 <_dtoa_r+0x34>
 80056ca:	4ba7      	ldr	r3, [pc, #668]	@ (8005968 <_dtoa_r+0x2c8>)
 80056cc:	21ef      	movs	r1, #239	@ 0xef
 80056ce:	48a7      	ldr	r0, [pc, #668]	@ (800596c <_dtoa_r+0x2cc>)
 80056d0:	f002 fb72 	bl	8007db8 <__assert_func>
 80056d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056d8:	6007      	str	r7, [r0, #0]
 80056da:	60c7      	str	r7, [r0, #12]
 80056dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056e0:	6819      	ldr	r1, [r3, #0]
 80056e2:	b159      	cbz	r1, 80056fc <_dtoa_r+0x5c>
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	604a      	str	r2, [r1, #4]
 80056e8:	2301      	movs	r3, #1
 80056ea:	4093      	lsls	r3, r2
 80056ec:	608b      	str	r3, [r1, #8]
 80056ee:	4658      	mov	r0, fp
 80056f0:	f000 fe24 	bl	800633c <_Bfree>
 80056f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	1e2b      	subs	r3, r5, #0
 80056fe:	bfb9      	ittee	lt
 8005700:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005704:	9303      	strlt	r3, [sp, #12]
 8005706:	2300      	movge	r3, #0
 8005708:	6033      	strge	r3, [r6, #0]
 800570a:	9f03      	ldr	r7, [sp, #12]
 800570c:	4b98      	ldr	r3, [pc, #608]	@ (8005970 <_dtoa_r+0x2d0>)
 800570e:	bfbc      	itt	lt
 8005710:	2201      	movlt	r2, #1
 8005712:	6032      	strlt	r2, [r6, #0]
 8005714:	43bb      	bics	r3, r7
 8005716:	d112      	bne.n	800573e <_dtoa_r+0x9e>
 8005718:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800571a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005724:	4323      	orrs	r3, r4
 8005726:	f000 854d 	beq.w	80061c4 <_dtoa_r+0xb24>
 800572a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800572c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005984 <_dtoa_r+0x2e4>
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 854f 	beq.w	80061d4 <_dtoa_r+0xb34>
 8005736:	f10a 0303 	add.w	r3, sl, #3
 800573a:	f000 bd49 	b.w	80061d0 <_dtoa_r+0xb30>
 800573e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005742:	2200      	movs	r2, #0
 8005744:	ec51 0b17 	vmov	r0, r1, d7
 8005748:	2300      	movs	r3, #0
 800574a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800574e:	f7fb f9c3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005752:	4680      	mov	r8, r0
 8005754:	b158      	cbz	r0, 800576e <_dtoa_r+0xce>
 8005756:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005758:	2301      	movs	r3, #1
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800575e:	b113      	cbz	r3, 8005766 <_dtoa_r+0xc6>
 8005760:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005762:	4b84      	ldr	r3, [pc, #528]	@ (8005974 <_dtoa_r+0x2d4>)
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005988 <_dtoa_r+0x2e8>
 800576a:	f000 bd33 	b.w	80061d4 <_dtoa_r+0xb34>
 800576e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005772:	aa16      	add	r2, sp, #88	@ 0x58
 8005774:	a917      	add	r1, sp, #92	@ 0x5c
 8005776:	4658      	mov	r0, fp
 8005778:	f001 f984 	bl	8006a84 <__d2b>
 800577c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005780:	4681      	mov	r9, r0
 8005782:	2e00      	cmp	r6, #0
 8005784:	d077      	beq.n	8005876 <_dtoa_r+0x1d6>
 8005786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005788:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800578c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005794:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005798:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800579c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80057a0:	4619      	mov	r1, r3
 80057a2:	2200      	movs	r2, #0
 80057a4:	4b74      	ldr	r3, [pc, #464]	@ (8005978 <_dtoa_r+0x2d8>)
 80057a6:	f7fa fd77 	bl	8000298 <__aeabi_dsub>
 80057aa:	a369      	add	r3, pc, #420	@ (adr r3, 8005950 <_dtoa_r+0x2b0>)
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f7fa ff2a 	bl	8000608 <__aeabi_dmul>
 80057b4:	a368      	add	r3, pc, #416	@ (adr r3, 8005958 <_dtoa_r+0x2b8>)
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f7fa fd6f 	bl	800029c <__adddf3>
 80057be:	4604      	mov	r4, r0
 80057c0:	4630      	mov	r0, r6
 80057c2:	460d      	mov	r5, r1
 80057c4:	f7fa feb6 	bl	8000534 <__aeabi_i2d>
 80057c8:	a365      	add	r3, pc, #404	@ (adr r3, 8005960 <_dtoa_r+0x2c0>)
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f7fa ff1b 	bl	8000608 <__aeabi_dmul>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4620      	mov	r0, r4
 80057d8:	4629      	mov	r1, r5
 80057da:	f7fa fd5f 	bl	800029c <__adddf3>
 80057de:	4604      	mov	r4, r0
 80057e0:	460d      	mov	r5, r1
 80057e2:	f7fb f9c1 	bl	8000b68 <__aeabi_d2iz>
 80057e6:	2200      	movs	r2, #0
 80057e8:	4607      	mov	r7, r0
 80057ea:	2300      	movs	r3, #0
 80057ec:	4620      	mov	r0, r4
 80057ee:	4629      	mov	r1, r5
 80057f0:	f7fb f97c 	bl	8000aec <__aeabi_dcmplt>
 80057f4:	b140      	cbz	r0, 8005808 <_dtoa_r+0x168>
 80057f6:	4638      	mov	r0, r7
 80057f8:	f7fa fe9c 	bl	8000534 <__aeabi_i2d>
 80057fc:	4622      	mov	r2, r4
 80057fe:	462b      	mov	r3, r5
 8005800:	f7fb f96a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005804:	b900      	cbnz	r0, 8005808 <_dtoa_r+0x168>
 8005806:	3f01      	subs	r7, #1
 8005808:	2f16      	cmp	r7, #22
 800580a:	d851      	bhi.n	80058b0 <_dtoa_r+0x210>
 800580c:	4b5b      	ldr	r3, [pc, #364]	@ (800597c <_dtoa_r+0x2dc>)
 800580e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800581a:	f7fb f967 	bl	8000aec <__aeabi_dcmplt>
 800581e:	2800      	cmp	r0, #0
 8005820:	d048      	beq.n	80058b4 <_dtoa_r+0x214>
 8005822:	3f01      	subs	r7, #1
 8005824:	2300      	movs	r3, #0
 8005826:	9312      	str	r3, [sp, #72]	@ 0x48
 8005828:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800582a:	1b9b      	subs	r3, r3, r6
 800582c:	1e5a      	subs	r2, r3, #1
 800582e:	bf44      	itt	mi
 8005830:	f1c3 0801 	rsbmi	r8, r3, #1
 8005834:	2300      	movmi	r3, #0
 8005836:	9208      	str	r2, [sp, #32]
 8005838:	bf54      	ite	pl
 800583a:	f04f 0800 	movpl.w	r8, #0
 800583e:	9308      	strmi	r3, [sp, #32]
 8005840:	2f00      	cmp	r7, #0
 8005842:	db39      	blt.n	80058b8 <_dtoa_r+0x218>
 8005844:	9b08      	ldr	r3, [sp, #32]
 8005846:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005848:	443b      	add	r3, r7
 800584a:	9308      	str	r3, [sp, #32]
 800584c:	2300      	movs	r3, #0
 800584e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005852:	2b09      	cmp	r3, #9
 8005854:	d864      	bhi.n	8005920 <_dtoa_r+0x280>
 8005856:	2b05      	cmp	r3, #5
 8005858:	bfc4      	itt	gt
 800585a:	3b04      	subgt	r3, #4
 800585c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800585e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005860:	f1a3 0302 	sub.w	r3, r3, #2
 8005864:	bfcc      	ite	gt
 8005866:	2400      	movgt	r4, #0
 8005868:	2401      	movle	r4, #1
 800586a:	2b03      	cmp	r3, #3
 800586c:	d863      	bhi.n	8005936 <_dtoa_r+0x296>
 800586e:	e8df f003 	tbb	[pc, r3]
 8005872:	372a      	.short	0x372a
 8005874:	5535      	.short	0x5535
 8005876:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800587a:	441e      	add	r6, r3
 800587c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005880:	2b20      	cmp	r3, #32
 8005882:	bfc1      	itttt	gt
 8005884:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005888:	409f      	lslgt	r7, r3
 800588a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800588e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005892:	bfd6      	itet	le
 8005894:	f1c3 0320 	rsble	r3, r3, #32
 8005898:	ea47 0003 	orrgt.w	r0, r7, r3
 800589c:	fa04 f003 	lslle.w	r0, r4, r3
 80058a0:	f7fa fe38 	bl	8000514 <__aeabi_ui2d>
 80058a4:	2201      	movs	r2, #1
 80058a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80058aa:	3e01      	subs	r6, #1
 80058ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80058ae:	e777      	b.n	80057a0 <_dtoa_r+0x100>
 80058b0:	2301      	movs	r3, #1
 80058b2:	e7b8      	b.n	8005826 <_dtoa_r+0x186>
 80058b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80058b6:	e7b7      	b.n	8005828 <_dtoa_r+0x188>
 80058b8:	427b      	negs	r3, r7
 80058ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80058bc:	2300      	movs	r3, #0
 80058be:	eba8 0807 	sub.w	r8, r8, r7
 80058c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058c4:	e7c4      	b.n	8005850 <_dtoa_r+0x1b0>
 80058c6:	2300      	movs	r3, #0
 80058c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	dc35      	bgt.n	800593c <_dtoa_r+0x29c>
 80058d0:	2301      	movs	r3, #1
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	9307      	str	r3, [sp, #28]
 80058d6:	461a      	mov	r2, r3
 80058d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80058da:	e00b      	b.n	80058f4 <_dtoa_r+0x254>
 80058dc:	2301      	movs	r3, #1
 80058de:	e7f3      	b.n	80058c8 <_dtoa_r+0x228>
 80058e0:	2300      	movs	r3, #0
 80058e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	9307      	str	r3, [sp, #28]
 80058f0:	bfb8      	it	lt
 80058f2:	2301      	movlt	r3, #1
 80058f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80058f8:	2100      	movs	r1, #0
 80058fa:	2204      	movs	r2, #4
 80058fc:	f102 0514 	add.w	r5, r2, #20
 8005900:	429d      	cmp	r5, r3
 8005902:	d91f      	bls.n	8005944 <_dtoa_r+0x2a4>
 8005904:	6041      	str	r1, [r0, #4]
 8005906:	4658      	mov	r0, fp
 8005908:	f000 fcd8 	bl	80062bc <_Balloc>
 800590c:	4682      	mov	sl, r0
 800590e:	2800      	cmp	r0, #0
 8005910:	d13c      	bne.n	800598c <_dtoa_r+0x2ec>
 8005912:	4b1b      	ldr	r3, [pc, #108]	@ (8005980 <_dtoa_r+0x2e0>)
 8005914:	4602      	mov	r2, r0
 8005916:	f240 11af 	movw	r1, #431	@ 0x1af
 800591a:	e6d8      	b.n	80056ce <_dtoa_r+0x2e>
 800591c:	2301      	movs	r3, #1
 800591e:	e7e0      	b.n	80058e2 <_dtoa_r+0x242>
 8005920:	2401      	movs	r4, #1
 8005922:	2300      	movs	r3, #0
 8005924:	9309      	str	r3, [sp, #36]	@ 0x24
 8005926:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005928:	f04f 33ff 	mov.w	r3, #4294967295
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	9307      	str	r3, [sp, #28]
 8005930:	2200      	movs	r2, #0
 8005932:	2312      	movs	r3, #18
 8005934:	e7d0      	b.n	80058d8 <_dtoa_r+0x238>
 8005936:	2301      	movs	r3, #1
 8005938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800593a:	e7f5      	b.n	8005928 <_dtoa_r+0x288>
 800593c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	9307      	str	r3, [sp, #28]
 8005942:	e7d7      	b.n	80058f4 <_dtoa_r+0x254>
 8005944:	3101      	adds	r1, #1
 8005946:	0052      	lsls	r2, r2, #1
 8005948:	e7d8      	b.n	80058fc <_dtoa_r+0x25c>
 800594a:	bf00      	nop
 800594c:	f3af 8000 	nop.w
 8005950:	636f4361 	.word	0x636f4361
 8005954:	3fd287a7 	.word	0x3fd287a7
 8005958:	8b60c8b3 	.word	0x8b60c8b3
 800595c:	3fc68a28 	.word	0x3fc68a28
 8005960:	509f79fb 	.word	0x509f79fb
 8005964:	3fd34413 	.word	0x3fd34413
 8005968:	0800a22a 	.word	0x0800a22a
 800596c:	0800a241 	.word	0x0800a241
 8005970:	7ff00000 	.word	0x7ff00000
 8005974:	0800a1f5 	.word	0x0800a1f5
 8005978:	3ff80000 	.word	0x3ff80000
 800597c:	0800a338 	.word	0x0800a338
 8005980:	0800a299 	.word	0x0800a299
 8005984:	0800a226 	.word	0x0800a226
 8005988:	0800a1f4 	.word	0x0800a1f4
 800598c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005990:	6018      	str	r0, [r3, #0]
 8005992:	9b07      	ldr	r3, [sp, #28]
 8005994:	2b0e      	cmp	r3, #14
 8005996:	f200 80a4 	bhi.w	8005ae2 <_dtoa_r+0x442>
 800599a:	2c00      	cmp	r4, #0
 800599c:	f000 80a1 	beq.w	8005ae2 <_dtoa_r+0x442>
 80059a0:	2f00      	cmp	r7, #0
 80059a2:	dd33      	ble.n	8005a0c <_dtoa_r+0x36c>
 80059a4:	4bad      	ldr	r3, [pc, #692]	@ (8005c5c <_dtoa_r+0x5bc>)
 80059a6:	f007 020f 	and.w	r2, r7, #15
 80059aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059ae:	ed93 7b00 	vldr	d7, [r3]
 80059b2:	05f8      	lsls	r0, r7, #23
 80059b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80059b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80059bc:	d516      	bpl.n	80059ec <_dtoa_r+0x34c>
 80059be:	4ba8      	ldr	r3, [pc, #672]	@ (8005c60 <_dtoa_r+0x5c0>)
 80059c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059c8:	f7fa ff48 	bl	800085c <__aeabi_ddiv>
 80059cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059d0:	f004 040f 	and.w	r4, r4, #15
 80059d4:	2603      	movs	r6, #3
 80059d6:	4da2      	ldr	r5, [pc, #648]	@ (8005c60 <_dtoa_r+0x5c0>)
 80059d8:	b954      	cbnz	r4, 80059f0 <_dtoa_r+0x350>
 80059da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059e2:	f7fa ff3b 	bl	800085c <__aeabi_ddiv>
 80059e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ea:	e028      	b.n	8005a3e <_dtoa_r+0x39e>
 80059ec:	2602      	movs	r6, #2
 80059ee:	e7f2      	b.n	80059d6 <_dtoa_r+0x336>
 80059f0:	07e1      	lsls	r1, r4, #31
 80059f2:	d508      	bpl.n	8005a06 <_dtoa_r+0x366>
 80059f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059fc:	f7fa fe04 	bl	8000608 <__aeabi_dmul>
 8005a00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a04:	3601      	adds	r6, #1
 8005a06:	1064      	asrs	r4, r4, #1
 8005a08:	3508      	adds	r5, #8
 8005a0a:	e7e5      	b.n	80059d8 <_dtoa_r+0x338>
 8005a0c:	f000 80d2 	beq.w	8005bb4 <_dtoa_r+0x514>
 8005a10:	427c      	negs	r4, r7
 8005a12:	4b92      	ldr	r3, [pc, #584]	@ (8005c5c <_dtoa_r+0x5bc>)
 8005a14:	4d92      	ldr	r5, [pc, #584]	@ (8005c60 <_dtoa_r+0x5c0>)
 8005a16:	f004 020f 	and.w	r2, r4, #15
 8005a1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a26:	f7fa fdef 	bl	8000608 <__aeabi_dmul>
 8005a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a2e:	1124      	asrs	r4, r4, #4
 8005a30:	2300      	movs	r3, #0
 8005a32:	2602      	movs	r6, #2
 8005a34:	2c00      	cmp	r4, #0
 8005a36:	f040 80b2 	bne.w	8005b9e <_dtoa_r+0x4fe>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1d3      	bne.n	80059e6 <_dtoa_r+0x346>
 8005a3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 80b7 	beq.w	8005bb8 <_dtoa_r+0x518>
 8005a4a:	4b86      	ldr	r3, [pc, #536]	@ (8005c64 <_dtoa_r+0x5c4>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4620      	mov	r0, r4
 8005a50:	4629      	mov	r1, r5
 8005a52:	f7fb f84b 	bl	8000aec <__aeabi_dcmplt>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	f000 80ae 	beq.w	8005bb8 <_dtoa_r+0x518>
 8005a5c:	9b07      	ldr	r3, [sp, #28]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80aa 	beq.w	8005bb8 <_dtoa_r+0x518>
 8005a64:	9b00      	ldr	r3, [sp, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	dd37      	ble.n	8005ada <_dtoa_r+0x43a>
 8005a6a:	1e7b      	subs	r3, r7, #1
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	4620      	mov	r0, r4
 8005a70:	4b7d      	ldr	r3, [pc, #500]	@ (8005c68 <_dtoa_r+0x5c8>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	4629      	mov	r1, r5
 8005a76:	f7fa fdc7 	bl	8000608 <__aeabi_dmul>
 8005a7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a7e:	9c00      	ldr	r4, [sp, #0]
 8005a80:	3601      	adds	r6, #1
 8005a82:	4630      	mov	r0, r6
 8005a84:	f7fa fd56 	bl	8000534 <__aeabi_i2d>
 8005a88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a8c:	f7fa fdbc 	bl	8000608 <__aeabi_dmul>
 8005a90:	4b76      	ldr	r3, [pc, #472]	@ (8005c6c <_dtoa_r+0x5cc>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	f7fa fc02 	bl	800029c <__adddf3>
 8005a98:	4605      	mov	r5, r0
 8005a9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a9e:	2c00      	cmp	r4, #0
 8005aa0:	f040 808d 	bne.w	8005bbe <_dtoa_r+0x51e>
 8005aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aa8:	4b71      	ldr	r3, [pc, #452]	@ (8005c70 <_dtoa_r+0x5d0>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f7fa fbf4 	bl	8000298 <__aeabi_dsub>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ab8:	462a      	mov	r2, r5
 8005aba:	4633      	mov	r3, r6
 8005abc:	f7fb f834 	bl	8000b28 <__aeabi_dcmpgt>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	f040 828b 	bne.w	8005fdc <_dtoa_r+0x93c>
 8005ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aca:	462a      	mov	r2, r5
 8005acc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ad0:	f7fb f80c 	bl	8000aec <__aeabi_dcmplt>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	f040 8128 	bne.w	8005d2a <_dtoa_r+0x68a>
 8005ada:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005ade:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005ae2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f2c0 815a 	blt.w	8005d9e <_dtoa_r+0x6fe>
 8005aea:	2f0e      	cmp	r7, #14
 8005aec:	f300 8157 	bgt.w	8005d9e <_dtoa_r+0x6fe>
 8005af0:	4b5a      	ldr	r3, [pc, #360]	@ (8005c5c <_dtoa_r+0x5bc>)
 8005af2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005af6:	ed93 7b00 	vldr	d7, [r3]
 8005afa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	ed8d 7b00 	vstr	d7, [sp]
 8005b02:	da03      	bge.n	8005b0c <_dtoa_r+0x46c>
 8005b04:	9b07      	ldr	r3, [sp, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f340 8101 	ble.w	8005d0e <_dtoa_r+0x66e>
 8005b0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b10:	4656      	mov	r6, sl
 8005b12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b16:	4620      	mov	r0, r4
 8005b18:	4629      	mov	r1, r5
 8005b1a:	f7fa fe9f 	bl	800085c <__aeabi_ddiv>
 8005b1e:	f7fb f823 	bl	8000b68 <__aeabi_d2iz>
 8005b22:	4680      	mov	r8, r0
 8005b24:	f7fa fd06 	bl	8000534 <__aeabi_i2d>
 8005b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b2c:	f7fa fd6c 	bl	8000608 <__aeabi_dmul>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4620      	mov	r0, r4
 8005b36:	4629      	mov	r1, r5
 8005b38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b3c:	f7fa fbac 	bl	8000298 <__aeabi_dsub>
 8005b40:	f806 4b01 	strb.w	r4, [r6], #1
 8005b44:	9d07      	ldr	r5, [sp, #28]
 8005b46:	eba6 040a 	sub.w	r4, r6, sl
 8005b4a:	42a5      	cmp	r5, r4
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	f040 8117 	bne.w	8005d82 <_dtoa_r+0x6e2>
 8005b54:	f7fa fba2 	bl	800029c <__adddf3>
 8005b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	460d      	mov	r5, r1
 8005b60:	f7fa ffe2 	bl	8000b28 <__aeabi_dcmpgt>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	f040 80f9 	bne.w	8005d5c <_dtoa_r+0x6bc>
 8005b6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b6e:	4620      	mov	r0, r4
 8005b70:	4629      	mov	r1, r5
 8005b72:	f7fa ffb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b76:	b118      	cbz	r0, 8005b80 <_dtoa_r+0x4e0>
 8005b78:	f018 0f01 	tst.w	r8, #1
 8005b7c:	f040 80ee 	bne.w	8005d5c <_dtoa_r+0x6bc>
 8005b80:	4649      	mov	r1, r9
 8005b82:	4658      	mov	r0, fp
 8005b84:	f000 fbda 	bl	800633c <_Bfree>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	7033      	strb	r3, [r6, #0]
 8005b8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b8e:	3701      	adds	r7, #1
 8005b90:	601f      	str	r7, [r3, #0]
 8005b92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 831d 	beq.w	80061d4 <_dtoa_r+0xb34>
 8005b9a:	601e      	str	r6, [r3, #0]
 8005b9c:	e31a      	b.n	80061d4 <_dtoa_r+0xb34>
 8005b9e:	07e2      	lsls	r2, r4, #31
 8005ba0:	d505      	bpl.n	8005bae <_dtoa_r+0x50e>
 8005ba2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ba6:	f7fa fd2f 	bl	8000608 <__aeabi_dmul>
 8005baa:	3601      	adds	r6, #1
 8005bac:	2301      	movs	r3, #1
 8005bae:	1064      	asrs	r4, r4, #1
 8005bb0:	3508      	adds	r5, #8
 8005bb2:	e73f      	b.n	8005a34 <_dtoa_r+0x394>
 8005bb4:	2602      	movs	r6, #2
 8005bb6:	e742      	b.n	8005a3e <_dtoa_r+0x39e>
 8005bb8:	9c07      	ldr	r4, [sp, #28]
 8005bba:	9704      	str	r7, [sp, #16]
 8005bbc:	e761      	b.n	8005a82 <_dtoa_r+0x3e2>
 8005bbe:	4b27      	ldr	r3, [pc, #156]	@ (8005c5c <_dtoa_r+0x5bc>)
 8005bc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005bc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bca:	4454      	add	r4, sl
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	d053      	beq.n	8005c78 <_dtoa_r+0x5d8>
 8005bd0:	4928      	ldr	r1, [pc, #160]	@ (8005c74 <_dtoa_r+0x5d4>)
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	f7fa fe42 	bl	800085c <__aeabi_ddiv>
 8005bd8:	4633      	mov	r3, r6
 8005bda:	462a      	mov	r2, r5
 8005bdc:	f7fa fb5c 	bl	8000298 <__aeabi_dsub>
 8005be0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005be4:	4656      	mov	r6, sl
 8005be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bea:	f7fa ffbd 	bl	8000b68 <__aeabi_d2iz>
 8005bee:	4605      	mov	r5, r0
 8005bf0:	f7fa fca0 	bl	8000534 <__aeabi_i2d>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bfc:	f7fa fb4c 	bl	8000298 <__aeabi_dsub>
 8005c00:	3530      	adds	r5, #48	@ 0x30
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c0a:	f806 5b01 	strb.w	r5, [r6], #1
 8005c0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c12:	f7fa ff6b 	bl	8000aec <__aeabi_dcmplt>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d171      	bne.n	8005cfe <_dtoa_r+0x65e>
 8005c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c1e:	4911      	ldr	r1, [pc, #68]	@ (8005c64 <_dtoa_r+0x5c4>)
 8005c20:	2000      	movs	r0, #0
 8005c22:	f7fa fb39 	bl	8000298 <__aeabi_dsub>
 8005c26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c2a:	f7fa ff5f 	bl	8000aec <__aeabi_dcmplt>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	f040 8095 	bne.w	8005d5e <_dtoa_r+0x6be>
 8005c34:	42a6      	cmp	r6, r4
 8005c36:	f43f af50 	beq.w	8005ada <_dtoa_r+0x43a>
 8005c3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c68 <_dtoa_r+0x5c8>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	f7fa fce1 	bl	8000608 <__aeabi_dmul>
 8005c46:	4b08      	ldr	r3, [pc, #32]	@ (8005c68 <_dtoa_r+0x5c8>)
 8005c48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c52:	f7fa fcd9 	bl	8000608 <__aeabi_dmul>
 8005c56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c5a:	e7c4      	b.n	8005be6 <_dtoa_r+0x546>
 8005c5c:	0800a338 	.word	0x0800a338
 8005c60:	0800a310 	.word	0x0800a310
 8005c64:	3ff00000 	.word	0x3ff00000
 8005c68:	40240000 	.word	0x40240000
 8005c6c:	401c0000 	.word	0x401c0000
 8005c70:	40140000 	.word	0x40140000
 8005c74:	3fe00000 	.word	0x3fe00000
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f7fa fcc4 	bl	8000608 <__aeabi_dmul>
 8005c80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c84:	9415      	str	r4, [sp, #84]	@ 0x54
 8005c86:	4656      	mov	r6, sl
 8005c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c8c:	f7fa ff6c 	bl	8000b68 <__aeabi_d2iz>
 8005c90:	4605      	mov	r5, r0
 8005c92:	f7fa fc4f 	bl	8000534 <__aeabi_i2d>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c9e:	f7fa fafb 	bl	8000298 <__aeabi_dsub>
 8005ca2:	3530      	adds	r5, #48	@ 0x30
 8005ca4:	f806 5b01 	strb.w	r5, [r6], #1
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	42a6      	cmp	r6, r4
 8005cae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	d124      	bne.n	8005d02 <_dtoa_r+0x662>
 8005cb8:	4bac      	ldr	r3, [pc, #688]	@ (8005f6c <_dtoa_r+0x8cc>)
 8005cba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005cbe:	f7fa faed 	bl	800029c <__adddf3>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cca:	f7fa ff2d 	bl	8000b28 <__aeabi_dcmpgt>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d145      	bne.n	8005d5e <_dtoa_r+0x6be>
 8005cd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cd6:	49a5      	ldr	r1, [pc, #660]	@ (8005f6c <_dtoa_r+0x8cc>)
 8005cd8:	2000      	movs	r0, #0
 8005cda:	f7fa fadd 	bl	8000298 <__aeabi_dsub>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ce6:	f7fa ff01 	bl	8000aec <__aeabi_dcmplt>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	f43f aef5 	beq.w	8005ada <_dtoa_r+0x43a>
 8005cf0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005cf2:	1e73      	subs	r3, r6, #1
 8005cf4:	9315      	str	r3, [sp, #84]	@ 0x54
 8005cf6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005cfa:	2b30      	cmp	r3, #48	@ 0x30
 8005cfc:	d0f8      	beq.n	8005cf0 <_dtoa_r+0x650>
 8005cfe:	9f04      	ldr	r7, [sp, #16]
 8005d00:	e73e      	b.n	8005b80 <_dtoa_r+0x4e0>
 8005d02:	4b9b      	ldr	r3, [pc, #620]	@ (8005f70 <_dtoa_r+0x8d0>)
 8005d04:	f7fa fc80 	bl	8000608 <__aeabi_dmul>
 8005d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d0c:	e7bc      	b.n	8005c88 <_dtoa_r+0x5e8>
 8005d0e:	d10c      	bne.n	8005d2a <_dtoa_r+0x68a>
 8005d10:	4b98      	ldr	r3, [pc, #608]	@ (8005f74 <_dtoa_r+0x8d4>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d18:	f7fa fc76 	bl	8000608 <__aeabi_dmul>
 8005d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d20:	f7fa fef8 	bl	8000b14 <__aeabi_dcmpge>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	f000 8157 	beq.w	8005fd8 <_dtoa_r+0x938>
 8005d2a:	2400      	movs	r4, #0
 8005d2c:	4625      	mov	r5, r4
 8005d2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d30:	43db      	mvns	r3, r3
 8005d32:	9304      	str	r3, [sp, #16]
 8005d34:	4656      	mov	r6, sl
 8005d36:	2700      	movs	r7, #0
 8005d38:	4621      	mov	r1, r4
 8005d3a:	4658      	mov	r0, fp
 8005d3c:	f000 fafe 	bl	800633c <_Bfree>
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	d0dc      	beq.n	8005cfe <_dtoa_r+0x65e>
 8005d44:	b12f      	cbz	r7, 8005d52 <_dtoa_r+0x6b2>
 8005d46:	42af      	cmp	r7, r5
 8005d48:	d003      	beq.n	8005d52 <_dtoa_r+0x6b2>
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	4658      	mov	r0, fp
 8005d4e:	f000 faf5 	bl	800633c <_Bfree>
 8005d52:	4629      	mov	r1, r5
 8005d54:	4658      	mov	r0, fp
 8005d56:	f000 faf1 	bl	800633c <_Bfree>
 8005d5a:	e7d0      	b.n	8005cfe <_dtoa_r+0x65e>
 8005d5c:	9704      	str	r7, [sp, #16]
 8005d5e:	4633      	mov	r3, r6
 8005d60:	461e      	mov	r6, r3
 8005d62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d66:	2a39      	cmp	r2, #57	@ 0x39
 8005d68:	d107      	bne.n	8005d7a <_dtoa_r+0x6da>
 8005d6a:	459a      	cmp	sl, r3
 8005d6c:	d1f8      	bne.n	8005d60 <_dtoa_r+0x6c0>
 8005d6e:	9a04      	ldr	r2, [sp, #16]
 8005d70:	3201      	adds	r2, #1
 8005d72:	9204      	str	r2, [sp, #16]
 8005d74:	2230      	movs	r2, #48	@ 0x30
 8005d76:	f88a 2000 	strb.w	r2, [sl]
 8005d7a:	781a      	ldrb	r2, [r3, #0]
 8005d7c:	3201      	adds	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e7bd      	b.n	8005cfe <_dtoa_r+0x65e>
 8005d82:	4b7b      	ldr	r3, [pc, #492]	@ (8005f70 <_dtoa_r+0x8d0>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	f7fa fc3f 	bl	8000608 <__aeabi_dmul>
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	4604      	mov	r4, r0
 8005d90:	460d      	mov	r5, r1
 8005d92:	f7fa fea1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f43f aebb 	beq.w	8005b12 <_dtoa_r+0x472>
 8005d9c:	e6f0      	b.n	8005b80 <_dtoa_r+0x4e0>
 8005d9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005da0:	2a00      	cmp	r2, #0
 8005da2:	f000 80db 	beq.w	8005f5c <_dtoa_r+0x8bc>
 8005da6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005da8:	2a01      	cmp	r2, #1
 8005daa:	f300 80bf 	bgt.w	8005f2c <_dtoa_r+0x88c>
 8005dae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005db0:	2a00      	cmp	r2, #0
 8005db2:	f000 80b7 	beq.w	8005f24 <_dtoa_r+0x884>
 8005db6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005dba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005dbc:	4646      	mov	r6, r8
 8005dbe:	9a08      	ldr	r2, [sp, #32]
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	441a      	add	r2, r3
 8005dc4:	4658      	mov	r0, fp
 8005dc6:	4498      	add	r8, r3
 8005dc8:	9208      	str	r2, [sp, #32]
 8005dca:	f000 fbb5 	bl	8006538 <__i2b>
 8005dce:	4605      	mov	r5, r0
 8005dd0:	b15e      	cbz	r6, 8005dea <_dtoa_r+0x74a>
 8005dd2:	9b08      	ldr	r3, [sp, #32]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	dd08      	ble.n	8005dea <_dtoa_r+0x74a>
 8005dd8:	42b3      	cmp	r3, r6
 8005dda:	9a08      	ldr	r2, [sp, #32]
 8005ddc:	bfa8      	it	ge
 8005dde:	4633      	movge	r3, r6
 8005de0:	eba8 0803 	sub.w	r8, r8, r3
 8005de4:	1af6      	subs	r6, r6, r3
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	9308      	str	r3, [sp, #32]
 8005dea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dec:	b1f3      	cbz	r3, 8005e2c <_dtoa_r+0x78c>
 8005dee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80b7 	beq.w	8005f64 <_dtoa_r+0x8c4>
 8005df6:	b18c      	cbz	r4, 8005e1c <_dtoa_r+0x77c>
 8005df8:	4629      	mov	r1, r5
 8005dfa:	4622      	mov	r2, r4
 8005dfc:	4658      	mov	r0, fp
 8005dfe:	f000 fc5b 	bl	80066b8 <__pow5mult>
 8005e02:	464a      	mov	r2, r9
 8005e04:	4601      	mov	r1, r0
 8005e06:	4605      	mov	r5, r0
 8005e08:	4658      	mov	r0, fp
 8005e0a:	f000 fbab 	bl	8006564 <__multiply>
 8005e0e:	4649      	mov	r1, r9
 8005e10:	9004      	str	r0, [sp, #16]
 8005e12:	4658      	mov	r0, fp
 8005e14:	f000 fa92 	bl	800633c <_Bfree>
 8005e18:	9b04      	ldr	r3, [sp, #16]
 8005e1a:	4699      	mov	r9, r3
 8005e1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e1e:	1b1a      	subs	r2, r3, r4
 8005e20:	d004      	beq.n	8005e2c <_dtoa_r+0x78c>
 8005e22:	4649      	mov	r1, r9
 8005e24:	4658      	mov	r0, fp
 8005e26:	f000 fc47 	bl	80066b8 <__pow5mult>
 8005e2a:	4681      	mov	r9, r0
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	4658      	mov	r0, fp
 8005e30:	f000 fb82 	bl	8006538 <__i2b>
 8005e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e36:	4604      	mov	r4, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 81cf 	beq.w	80061dc <_dtoa_r+0xb3c>
 8005e3e:	461a      	mov	r2, r3
 8005e40:	4601      	mov	r1, r0
 8005e42:	4658      	mov	r0, fp
 8005e44:	f000 fc38 	bl	80066b8 <__pow5mult>
 8005e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	f300 8095 	bgt.w	8005f7c <_dtoa_r+0x8dc>
 8005e52:	9b02      	ldr	r3, [sp, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 8087 	bne.w	8005f68 <_dtoa_r+0x8c8>
 8005e5a:	9b03      	ldr	r3, [sp, #12]
 8005e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f040 8089 	bne.w	8005f78 <_dtoa_r+0x8d8>
 8005e66:	9b03      	ldr	r3, [sp, #12]
 8005e68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e6c:	0d1b      	lsrs	r3, r3, #20
 8005e6e:	051b      	lsls	r3, r3, #20
 8005e70:	b12b      	cbz	r3, 8005e7e <_dtoa_r+0x7de>
 8005e72:	9b08      	ldr	r3, [sp, #32]
 8005e74:	3301      	adds	r3, #1
 8005e76:	9308      	str	r3, [sp, #32]
 8005e78:	f108 0801 	add.w	r8, r8, #1
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 81b0 	beq.w	80061e8 <_dtoa_r+0xb48>
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e8e:	6918      	ldr	r0, [r3, #16]
 8005e90:	f000 fb06 	bl	80064a0 <__hi0bits>
 8005e94:	f1c0 0020 	rsb	r0, r0, #32
 8005e98:	9b08      	ldr	r3, [sp, #32]
 8005e9a:	4418      	add	r0, r3
 8005e9c:	f010 001f 	ands.w	r0, r0, #31
 8005ea0:	d077      	beq.n	8005f92 <_dtoa_r+0x8f2>
 8005ea2:	f1c0 0320 	rsb	r3, r0, #32
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	dd6b      	ble.n	8005f82 <_dtoa_r+0x8e2>
 8005eaa:	9b08      	ldr	r3, [sp, #32]
 8005eac:	f1c0 001c 	rsb	r0, r0, #28
 8005eb0:	4403      	add	r3, r0
 8005eb2:	4480      	add	r8, r0
 8005eb4:	4406      	add	r6, r0
 8005eb6:	9308      	str	r3, [sp, #32]
 8005eb8:	f1b8 0f00 	cmp.w	r8, #0
 8005ebc:	dd05      	ble.n	8005eca <_dtoa_r+0x82a>
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	4658      	mov	r0, fp
 8005ec4:	f000 fc52 	bl	800676c <__lshift>
 8005ec8:	4681      	mov	r9, r0
 8005eca:	9b08      	ldr	r3, [sp, #32]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	dd05      	ble.n	8005edc <_dtoa_r+0x83c>
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	4658      	mov	r0, fp
 8005ed6:	f000 fc49 	bl	800676c <__lshift>
 8005eda:	4604      	mov	r4, r0
 8005edc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d059      	beq.n	8005f96 <_dtoa_r+0x8f6>
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	4648      	mov	r0, r9
 8005ee6:	f000 fcad 	bl	8006844 <__mcmp>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	da53      	bge.n	8005f96 <_dtoa_r+0x8f6>
 8005eee:	1e7b      	subs	r3, r7, #1
 8005ef0:	9304      	str	r3, [sp, #16]
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	220a      	movs	r2, #10
 8005ef8:	4658      	mov	r0, fp
 8005efa:	f000 fa41 	bl	8006380 <__multadd>
 8005efe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f00:	4681      	mov	r9, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 8172 	beq.w	80061ec <_dtoa_r+0xb4c>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	220a      	movs	r2, #10
 8005f0e:	4658      	mov	r0, fp
 8005f10:	f000 fa36 	bl	8006380 <__multadd>
 8005f14:	9b00      	ldr	r3, [sp, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	4605      	mov	r5, r0
 8005f1a:	dc67      	bgt.n	8005fec <_dtoa_r+0x94c>
 8005f1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	dc41      	bgt.n	8005fa6 <_dtoa_r+0x906>
 8005f22:	e063      	b.n	8005fec <_dtoa_r+0x94c>
 8005f24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f2a:	e746      	b.n	8005dba <_dtoa_r+0x71a>
 8005f2c:	9b07      	ldr	r3, [sp, #28]
 8005f2e:	1e5c      	subs	r4, r3, #1
 8005f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	bfbf      	itttt	lt
 8005f36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005f3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f3c:	1ae3      	sublt	r3, r4, r3
 8005f3e:	bfb4      	ite	lt
 8005f40:	18d2      	addlt	r2, r2, r3
 8005f42:	1b1c      	subge	r4, r3, r4
 8005f44:	9b07      	ldr	r3, [sp, #28]
 8005f46:	bfbc      	itt	lt
 8005f48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005f4a:	2400      	movlt	r4, #0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bfb5      	itete	lt
 8005f50:	eba8 0603 	sublt.w	r6, r8, r3
 8005f54:	9b07      	ldrge	r3, [sp, #28]
 8005f56:	2300      	movlt	r3, #0
 8005f58:	4646      	movge	r6, r8
 8005f5a:	e730      	b.n	8005dbe <_dtoa_r+0x71e>
 8005f5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f60:	4646      	mov	r6, r8
 8005f62:	e735      	b.n	8005dd0 <_dtoa_r+0x730>
 8005f64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f66:	e75c      	b.n	8005e22 <_dtoa_r+0x782>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e788      	b.n	8005e7e <_dtoa_r+0x7de>
 8005f6c:	3fe00000 	.word	0x3fe00000
 8005f70:	40240000 	.word	0x40240000
 8005f74:	40140000 	.word	0x40140000
 8005f78:	9b02      	ldr	r3, [sp, #8]
 8005f7a:	e780      	b.n	8005e7e <_dtoa_r+0x7de>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f80:	e782      	b.n	8005e88 <_dtoa_r+0x7e8>
 8005f82:	d099      	beq.n	8005eb8 <_dtoa_r+0x818>
 8005f84:	9a08      	ldr	r2, [sp, #32]
 8005f86:	331c      	adds	r3, #28
 8005f88:	441a      	add	r2, r3
 8005f8a:	4498      	add	r8, r3
 8005f8c:	441e      	add	r6, r3
 8005f8e:	9208      	str	r2, [sp, #32]
 8005f90:	e792      	b.n	8005eb8 <_dtoa_r+0x818>
 8005f92:	4603      	mov	r3, r0
 8005f94:	e7f6      	b.n	8005f84 <_dtoa_r+0x8e4>
 8005f96:	9b07      	ldr	r3, [sp, #28]
 8005f98:	9704      	str	r7, [sp, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	dc20      	bgt.n	8005fe0 <_dtoa_r+0x940>
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	dd1e      	ble.n	8005fe4 <_dtoa_r+0x944>
 8005fa6:	9b00      	ldr	r3, [sp, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f47f aec0 	bne.w	8005d2e <_dtoa_r+0x68e>
 8005fae:	4621      	mov	r1, r4
 8005fb0:	2205      	movs	r2, #5
 8005fb2:	4658      	mov	r0, fp
 8005fb4:	f000 f9e4 	bl	8006380 <__multadd>
 8005fb8:	4601      	mov	r1, r0
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4648      	mov	r0, r9
 8005fbe:	f000 fc41 	bl	8006844 <__mcmp>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	f77f aeb3 	ble.w	8005d2e <_dtoa_r+0x68e>
 8005fc8:	4656      	mov	r6, sl
 8005fca:	2331      	movs	r3, #49	@ 0x31
 8005fcc:	f806 3b01 	strb.w	r3, [r6], #1
 8005fd0:	9b04      	ldr	r3, [sp, #16]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	9304      	str	r3, [sp, #16]
 8005fd6:	e6ae      	b.n	8005d36 <_dtoa_r+0x696>
 8005fd8:	9c07      	ldr	r4, [sp, #28]
 8005fda:	9704      	str	r7, [sp, #16]
 8005fdc:	4625      	mov	r5, r4
 8005fde:	e7f3      	b.n	8005fc8 <_dtoa_r+0x928>
 8005fe0:	9b07      	ldr	r3, [sp, #28]
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8104 	beq.w	80061f4 <_dtoa_r+0xb54>
 8005fec:	2e00      	cmp	r6, #0
 8005fee:	dd05      	ble.n	8005ffc <_dtoa_r+0x95c>
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	4632      	mov	r2, r6
 8005ff4:	4658      	mov	r0, fp
 8005ff6:	f000 fbb9 	bl	800676c <__lshift>
 8005ffa:	4605      	mov	r5, r0
 8005ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d05a      	beq.n	80060b8 <_dtoa_r+0xa18>
 8006002:	6869      	ldr	r1, [r5, #4]
 8006004:	4658      	mov	r0, fp
 8006006:	f000 f959 	bl	80062bc <_Balloc>
 800600a:	4606      	mov	r6, r0
 800600c:	b928      	cbnz	r0, 800601a <_dtoa_r+0x97a>
 800600e:	4b84      	ldr	r3, [pc, #528]	@ (8006220 <_dtoa_r+0xb80>)
 8006010:	4602      	mov	r2, r0
 8006012:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006016:	f7ff bb5a 	b.w	80056ce <_dtoa_r+0x2e>
 800601a:	692a      	ldr	r2, [r5, #16]
 800601c:	3202      	adds	r2, #2
 800601e:	0092      	lsls	r2, r2, #2
 8006020:	f105 010c 	add.w	r1, r5, #12
 8006024:	300c      	adds	r0, #12
 8006026:	f001 feb1 	bl	8007d8c <memcpy>
 800602a:	2201      	movs	r2, #1
 800602c:	4631      	mov	r1, r6
 800602e:	4658      	mov	r0, fp
 8006030:	f000 fb9c 	bl	800676c <__lshift>
 8006034:	f10a 0301 	add.w	r3, sl, #1
 8006038:	9307      	str	r3, [sp, #28]
 800603a:	9b00      	ldr	r3, [sp, #0]
 800603c:	4453      	add	r3, sl
 800603e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006040:	9b02      	ldr	r3, [sp, #8]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	462f      	mov	r7, r5
 8006048:	930a      	str	r3, [sp, #40]	@ 0x28
 800604a:	4605      	mov	r5, r0
 800604c:	9b07      	ldr	r3, [sp, #28]
 800604e:	4621      	mov	r1, r4
 8006050:	3b01      	subs	r3, #1
 8006052:	4648      	mov	r0, r9
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	f7ff fa99 	bl	800558c <quorem>
 800605a:	4639      	mov	r1, r7
 800605c:	9002      	str	r0, [sp, #8]
 800605e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006062:	4648      	mov	r0, r9
 8006064:	f000 fbee 	bl	8006844 <__mcmp>
 8006068:	462a      	mov	r2, r5
 800606a:	9008      	str	r0, [sp, #32]
 800606c:	4621      	mov	r1, r4
 800606e:	4658      	mov	r0, fp
 8006070:	f000 fc04 	bl	800687c <__mdiff>
 8006074:	68c2      	ldr	r2, [r0, #12]
 8006076:	4606      	mov	r6, r0
 8006078:	bb02      	cbnz	r2, 80060bc <_dtoa_r+0xa1c>
 800607a:	4601      	mov	r1, r0
 800607c:	4648      	mov	r0, r9
 800607e:	f000 fbe1 	bl	8006844 <__mcmp>
 8006082:	4602      	mov	r2, r0
 8006084:	4631      	mov	r1, r6
 8006086:	4658      	mov	r0, fp
 8006088:	920e      	str	r2, [sp, #56]	@ 0x38
 800608a:	f000 f957 	bl	800633c <_Bfree>
 800608e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006090:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006092:	9e07      	ldr	r6, [sp, #28]
 8006094:	ea43 0102 	orr.w	r1, r3, r2
 8006098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800609a:	4319      	orrs	r1, r3
 800609c:	d110      	bne.n	80060c0 <_dtoa_r+0xa20>
 800609e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060a2:	d029      	beq.n	80060f8 <_dtoa_r+0xa58>
 80060a4:	9b08      	ldr	r3, [sp, #32]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	dd02      	ble.n	80060b0 <_dtoa_r+0xa10>
 80060aa:	9b02      	ldr	r3, [sp, #8]
 80060ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80060b0:	9b00      	ldr	r3, [sp, #0]
 80060b2:	f883 8000 	strb.w	r8, [r3]
 80060b6:	e63f      	b.n	8005d38 <_dtoa_r+0x698>
 80060b8:	4628      	mov	r0, r5
 80060ba:	e7bb      	b.n	8006034 <_dtoa_r+0x994>
 80060bc:	2201      	movs	r2, #1
 80060be:	e7e1      	b.n	8006084 <_dtoa_r+0x9e4>
 80060c0:	9b08      	ldr	r3, [sp, #32]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	db04      	blt.n	80060d0 <_dtoa_r+0xa30>
 80060c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80060c8:	430b      	orrs	r3, r1
 80060ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060cc:	430b      	orrs	r3, r1
 80060ce:	d120      	bne.n	8006112 <_dtoa_r+0xa72>
 80060d0:	2a00      	cmp	r2, #0
 80060d2:	dded      	ble.n	80060b0 <_dtoa_r+0xa10>
 80060d4:	4649      	mov	r1, r9
 80060d6:	2201      	movs	r2, #1
 80060d8:	4658      	mov	r0, fp
 80060da:	f000 fb47 	bl	800676c <__lshift>
 80060de:	4621      	mov	r1, r4
 80060e0:	4681      	mov	r9, r0
 80060e2:	f000 fbaf 	bl	8006844 <__mcmp>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	dc03      	bgt.n	80060f2 <_dtoa_r+0xa52>
 80060ea:	d1e1      	bne.n	80060b0 <_dtoa_r+0xa10>
 80060ec:	f018 0f01 	tst.w	r8, #1
 80060f0:	d0de      	beq.n	80060b0 <_dtoa_r+0xa10>
 80060f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060f6:	d1d8      	bne.n	80060aa <_dtoa_r+0xa0a>
 80060f8:	9a00      	ldr	r2, [sp, #0]
 80060fa:	2339      	movs	r3, #57	@ 0x39
 80060fc:	7013      	strb	r3, [r2, #0]
 80060fe:	4633      	mov	r3, r6
 8006100:	461e      	mov	r6, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006108:	2a39      	cmp	r2, #57	@ 0x39
 800610a:	d052      	beq.n	80061b2 <_dtoa_r+0xb12>
 800610c:	3201      	adds	r2, #1
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	e612      	b.n	8005d38 <_dtoa_r+0x698>
 8006112:	2a00      	cmp	r2, #0
 8006114:	dd07      	ble.n	8006126 <_dtoa_r+0xa86>
 8006116:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800611a:	d0ed      	beq.n	80060f8 <_dtoa_r+0xa58>
 800611c:	9a00      	ldr	r2, [sp, #0]
 800611e:	f108 0301 	add.w	r3, r8, #1
 8006122:	7013      	strb	r3, [r2, #0]
 8006124:	e608      	b.n	8005d38 <_dtoa_r+0x698>
 8006126:	9b07      	ldr	r3, [sp, #28]
 8006128:	9a07      	ldr	r2, [sp, #28]
 800612a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800612e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006130:	4293      	cmp	r3, r2
 8006132:	d028      	beq.n	8006186 <_dtoa_r+0xae6>
 8006134:	4649      	mov	r1, r9
 8006136:	2300      	movs	r3, #0
 8006138:	220a      	movs	r2, #10
 800613a:	4658      	mov	r0, fp
 800613c:	f000 f920 	bl	8006380 <__multadd>
 8006140:	42af      	cmp	r7, r5
 8006142:	4681      	mov	r9, r0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	f04f 020a 	mov.w	r2, #10
 800614c:	4639      	mov	r1, r7
 800614e:	4658      	mov	r0, fp
 8006150:	d107      	bne.n	8006162 <_dtoa_r+0xac2>
 8006152:	f000 f915 	bl	8006380 <__multadd>
 8006156:	4607      	mov	r7, r0
 8006158:	4605      	mov	r5, r0
 800615a:	9b07      	ldr	r3, [sp, #28]
 800615c:	3301      	adds	r3, #1
 800615e:	9307      	str	r3, [sp, #28]
 8006160:	e774      	b.n	800604c <_dtoa_r+0x9ac>
 8006162:	f000 f90d 	bl	8006380 <__multadd>
 8006166:	4629      	mov	r1, r5
 8006168:	4607      	mov	r7, r0
 800616a:	2300      	movs	r3, #0
 800616c:	220a      	movs	r2, #10
 800616e:	4658      	mov	r0, fp
 8006170:	f000 f906 	bl	8006380 <__multadd>
 8006174:	4605      	mov	r5, r0
 8006176:	e7f0      	b.n	800615a <_dtoa_r+0xaba>
 8006178:	9b00      	ldr	r3, [sp, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	bfcc      	ite	gt
 800617e:	461e      	movgt	r6, r3
 8006180:	2601      	movle	r6, #1
 8006182:	4456      	add	r6, sl
 8006184:	2700      	movs	r7, #0
 8006186:	4649      	mov	r1, r9
 8006188:	2201      	movs	r2, #1
 800618a:	4658      	mov	r0, fp
 800618c:	f000 faee 	bl	800676c <__lshift>
 8006190:	4621      	mov	r1, r4
 8006192:	4681      	mov	r9, r0
 8006194:	f000 fb56 	bl	8006844 <__mcmp>
 8006198:	2800      	cmp	r0, #0
 800619a:	dcb0      	bgt.n	80060fe <_dtoa_r+0xa5e>
 800619c:	d102      	bne.n	80061a4 <_dtoa_r+0xb04>
 800619e:	f018 0f01 	tst.w	r8, #1
 80061a2:	d1ac      	bne.n	80060fe <_dtoa_r+0xa5e>
 80061a4:	4633      	mov	r3, r6
 80061a6:	461e      	mov	r6, r3
 80061a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061ac:	2a30      	cmp	r2, #48	@ 0x30
 80061ae:	d0fa      	beq.n	80061a6 <_dtoa_r+0xb06>
 80061b0:	e5c2      	b.n	8005d38 <_dtoa_r+0x698>
 80061b2:	459a      	cmp	sl, r3
 80061b4:	d1a4      	bne.n	8006100 <_dtoa_r+0xa60>
 80061b6:	9b04      	ldr	r3, [sp, #16]
 80061b8:	3301      	adds	r3, #1
 80061ba:	9304      	str	r3, [sp, #16]
 80061bc:	2331      	movs	r3, #49	@ 0x31
 80061be:	f88a 3000 	strb.w	r3, [sl]
 80061c2:	e5b9      	b.n	8005d38 <_dtoa_r+0x698>
 80061c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006224 <_dtoa_r+0xb84>
 80061ca:	b11b      	cbz	r3, 80061d4 <_dtoa_r+0xb34>
 80061cc:	f10a 0308 	add.w	r3, sl, #8
 80061d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	4650      	mov	r0, sl
 80061d6:	b019      	add	sp, #100	@ 0x64
 80061d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061de:	2b01      	cmp	r3, #1
 80061e0:	f77f ae37 	ble.w	8005e52 <_dtoa_r+0x7b2>
 80061e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80061e8:	2001      	movs	r0, #1
 80061ea:	e655      	b.n	8005e98 <_dtoa_r+0x7f8>
 80061ec:	9b00      	ldr	r3, [sp, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f77f aed6 	ble.w	8005fa0 <_dtoa_r+0x900>
 80061f4:	4656      	mov	r6, sl
 80061f6:	4621      	mov	r1, r4
 80061f8:	4648      	mov	r0, r9
 80061fa:	f7ff f9c7 	bl	800558c <quorem>
 80061fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006202:	f806 8b01 	strb.w	r8, [r6], #1
 8006206:	9b00      	ldr	r3, [sp, #0]
 8006208:	eba6 020a 	sub.w	r2, r6, sl
 800620c:	4293      	cmp	r3, r2
 800620e:	ddb3      	ble.n	8006178 <_dtoa_r+0xad8>
 8006210:	4649      	mov	r1, r9
 8006212:	2300      	movs	r3, #0
 8006214:	220a      	movs	r2, #10
 8006216:	4658      	mov	r0, fp
 8006218:	f000 f8b2 	bl	8006380 <__multadd>
 800621c:	4681      	mov	r9, r0
 800621e:	e7ea      	b.n	80061f6 <_dtoa_r+0xb56>
 8006220:	0800a299 	.word	0x0800a299
 8006224:	0800a21d 	.word	0x0800a21d

08006228 <_free_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4605      	mov	r5, r0
 800622c:	2900      	cmp	r1, #0
 800622e:	d041      	beq.n	80062b4 <_free_r+0x8c>
 8006230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006234:	1f0c      	subs	r4, r1, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	bfb8      	it	lt
 800623a:	18e4      	addlt	r4, r4, r3
 800623c:	f7fe f972 	bl	8004524 <__malloc_lock>
 8006240:	4a1d      	ldr	r2, [pc, #116]	@ (80062b8 <_free_r+0x90>)
 8006242:	6813      	ldr	r3, [r2, #0]
 8006244:	b933      	cbnz	r3, 8006254 <_free_r+0x2c>
 8006246:	6063      	str	r3, [r4, #4]
 8006248:	6014      	str	r4, [r2, #0]
 800624a:	4628      	mov	r0, r5
 800624c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006250:	f7fe b96e 	b.w	8004530 <__malloc_unlock>
 8006254:	42a3      	cmp	r3, r4
 8006256:	d908      	bls.n	800626a <_free_r+0x42>
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	1821      	adds	r1, r4, r0
 800625c:	428b      	cmp	r3, r1
 800625e:	bf01      	itttt	eq
 8006260:	6819      	ldreq	r1, [r3, #0]
 8006262:	685b      	ldreq	r3, [r3, #4]
 8006264:	1809      	addeq	r1, r1, r0
 8006266:	6021      	streq	r1, [r4, #0]
 8006268:	e7ed      	b.n	8006246 <_free_r+0x1e>
 800626a:	461a      	mov	r2, r3
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	b10b      	cbz	r3, 8006274 <_free_r+0x4c>
 8006270:	42a3      	cmp	r3, r4
 8006272:	d9fa      	bls.n	800626a <_free_r+0x42>
 8006274:	6811      	ldr	r1, [r2, #0]
 8006276:	1850      	adds	r0, r2, r1
 8006278:	42a0      	cmp	r0, r4
 800627a:	d10b      	bne.n	8006294 <_free_r+0x6c>
 800627c:	6820      	ldr	r0, [r4, #0]
 800627e:	4401      	add	r1, r0
 8006280:	1850      	adds	r0, r2, r1
 8006282:	4283      	cmp	r3, r0
 8006284:	6011      	str	r1, [r2, #0]
 8006286:	d1e0      	bne.n	800624a <_free_r+0x22>
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	6053      	str	r3, [r2, #4]
 800628e:	4408      	add	r0, r1
 8006290:	6010      	str	r0, [r2, #0]
 8006292:	e7da      	b.n	800624a <_free_r+0x22>
 8006294:	d902      	bls.n	800629c <_free_r+0x74>
 8006296:	230c      	movs	r3, #12
 8006298:	602b      	str	r3, [r5, #0]
 800629a:	e7d6      	b.n	800624a <_free_r+0x22>
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	1821      	adds	r1, r4, r0
 80062a0:	428b      	cmp	r3, r1
 80062a2:	bf04      	itt	eq
 80062a4:	6819      	ldreq	r1, [r3, #0]
 80062a6:	685b      	ldreq	r3, [r3, #4]
 80062a8:	6063      	str	r3, [r4, #4]
 80062aa:	bf04      	itt	eq
 80062ac:	1809      	addeq	r1, r1, r0
 80062ae:	6021      	streq	r1, [r4, #0]
 80062b0:	6054      	str	r4, [r2, #4]
 80062b2:	e7ca      	b.n	800624a <_free_r+0x22>
 80062b4:	bd38      	pop	{r3, r4, r5, pc}
 80062b6:	bf00      	nop
 80062b8:	200037bc 	.word	0x200037bc

080062bc <_Balloc>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	69c6      	ldr	r6, [r0, #28]
 80062c0:	4604      	mov	r4, r0
 80062c2:	460d      	mov	r5, r1
 80062c4:	b976      	cbnz	r6, 80062e4 <_Balloc+0x28>
 80062c6:	2010      	movs	r0, #16
 80062c8:	f7fe f87a 	bl	80043c0 <malloc>
 80062cc:	4602      	mov	r2, r0
 80062ce:	61e0      	str	r0, [r4, #28]
 80062d0:	b920      	cbnz	r0, 80062dc <_Balloc+0x20>
 80062d2:	4b18      	ldr	r3, [pc, #96]	@ (8006334 <_Balloc+0x78>)
 80062d4:	4818      	ldr	r0, [pc, #96]	@ (8006338 <_Balloc+0x7c>)
 80062d6:	216b      	movs	r1, #107	@ 0x6b
 80062d8:	f001 fd6e 	bl	8007db8 <__assert_func>
 80062dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062e0:	6006      	str	r6, [r0, #0]
 80062e2:	60c6      	str	r6, [r0, #12]
 80062e4:	69e6      	ldr	r6, [r4, #28]
 80062e6:	68f3      	ldr	r3, [r6, #12]
 80062e8:	b183      	cbz	r3, 800630c <_Balloc+0x50>
 80062ea:	69e3      	ldr	r3, [r4, #28]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062f2:	b9b8      	cbnz	r0, 8006324 <_Balloc+0x68>
 80062f4:	2101      	movs	r1, #1
 80062f6:	fa01 f605 	lsl.w	r6, r1, r5
 80062fa:	1d72      	adds	r2, r6, #5
 80062fc:	0092      	lsls	r2, r2, #2
 80062fe:	4620      	mov	r0, r4
 8006300:	f001 fd78 	bl	8007df4 <_calloc_r>
 8006304:	b160      	cbz	r0, 8006320 <_Balloc+0x64>
 8006306:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800630a:	e00e      	b.n	800632a <_Balloc+0x6e>
 800630c:	2221      	movs	r2, #33	@ 0x21
 800630e:	2104      	movs	r1, #4
 8006310:	4620      	mov	r0, r4
 8006312:	f001 fd6f 	bl	8007df4 <_calloc_r>
 8006316:	69e3      	ldr	r3, [r4, #28]
 8006318:	60f0      	str	r0, [r6, #12]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e4      	bne.n	80062ea <_Balloc+0x2e>
 8006320:	2000      	movs	r0, #0
 8006322:	bd70      	pop	{r4, r5, r6, pc}
 8006324:	6802      	ldr	r2, [r0, #0]
 8006326:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800632a:	2300      	movs	r3, #0
 800632c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006330:	e7f7      	b.n	8006322 <_Balloc+0x66>
 8006332:	bf00      	nop
 8006334:	0800a22a 	.word	0x0800a22a
 8006338:	0800a2aa 	.word	0x0800a2aa

0800633c <_Bfree>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	69c6      	ldr	r6, [r0, #28]
 8006340:	4605      	mov	r5, r0
 8006342:	460c      	mov	r4, r1
 8006344:	b976      	cbnz	r6, 8006364 <_Bfree+0x28>
 8006346:	2010      	movs	r0, #16
 8006348:	f7fe f83a 	bl	80043c0 <malloc>
 800634c:	4602      	mov	r2, r0
 800634e:	61e8      	str	r0, [r5, #28]
 8006350:	b920      	cbnz	r0, 800635c <_Bfree+0x20>
 8006352:	4b09      	ldr	r3, [pc, #36]	@ (8006378 <_Bfree+0x3c>)
 8006354:	4809      	ldr	r0, [pc, #36]	@ (800637c <_Bfree+0x40>)
 8006356:	218f      	movs	r1, #143	@ 0x8f
 8006358:	f001 fd2e 	bl	8007db8 <__assert_func>
 800635c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006360:	6006      	str	r6, [r0, #0]
 8006362:	60c6      	str	r6, [r0, #12]
 8006364:	b13c      	cbz	r4, 8006376 <_Bfree+0x3a>
 8006366:	69eb      	ldr	r3, [r5, #28]
 8006368:	6862      	ldr	r2, [r4, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006370:	6021      	str	r1, [r4, #0]
 8006372:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	0800a22a 	.word	0x0800a22a
 800637c:	0800a2aa 	.word	0x0800a2aa

08006380 <__multadd>:
 8006380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006384:	690d      	ldr	r5, [r1, #16]
 8006386:	4607      	mov	r7, r0
 8006388:	460c      	mov	r4, r1
 800638a:	461e      	mov	r6, r3
 800638c:	f101 0c14 	add.w	ip, r1, #20
 8006390:	2000      	movs	r0, #0
 8006392:	f8dc 3000 	ldr.w	r3, [ip]
 8006396:	b299      	uxth	r1, r3
 8006398:	fb02 6101 	mla	r1, r2, r1, r6
 800639c:	0c1e      	lsrs	r6, r3, #16
 800639e:	0c0b      	lsrs	r3, r1, #16
 80063a0:	fb02 3306 	mla	r3, r2, r6, r3
 80063a4:	b289      	uxth	r1, r1
 80063a6:	3001      	adds	r0, #1
 80063a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063ac:	4285      	cmp	r5, r0
 80063ae:	f84c 1b04 	str.w	r1, [ip], #4
 80063b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063b6:	dcec      	bgt.n	8006392 <__multadd+0x12>
 80063b8:	b30e      	cbz	r6, 80063fe <__multadd+0x7e>
 80063ba:	68a3      	ldr	r3, [r4, #8]
 80063bc:	42ab      	cmp	r3, r5
 80063be:	dc19      	bgt.n	80063f4 <__multadd+0x74>
 80063c0:	6861      	ldr	r1, [r4, #4]
 80063c2:	4638      	mov	r0, r7
 80063c4:	3101      	adds	r1, #1
 80063c6:	f7ff ff79 	bl	80062bc <_Balloc>
 80063ca:	4680      	mov	r8, r0
 80063cc:	b928      	cbnz	r0, 80063da <__multadd+0x5a>
 80063ce:	4602      	mov	r2, r0
 80063d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006404 <__multadd+0x84>)
 80063d2:	480d      	ldr	r0, [pc, #52]	@ (8006408 <__multadd+0x88>)
 80063d4:	21ba      	movs	r1, #186	@ 0xba
 80063d6:	f001 fcef 	bl	8007db8 <__assert_func>
 80063da:	6922      	ldr	r2, [r4, #16]
 80063dc:	3202      	adds	r2, #2
 80063de:	f104 010c 	add.w	r1, r4, #12
 80063e2:	0092      	lsls	r2, r2, #2
 80063e4:	300c      	adds	r0, #12
 80063e6:	f001 fcd1 	bl	8007d8c <memcpy>
 80063ea:	4621      	mov	r1, r4
 80063ec:	4638      	mov	r0, r7
 80063ee:	f7ff ffa5 	bl	800633c <_Bfree>
 80063f2:	4644      	mov	r4, r8
 80063f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063f8:	3501      	adds	r5, #1
 80063fa:	615e      	str	r6, [r3, #20]
 80063fc:	6125      	str	r5, [r4, #16]
 80063fe:	4620      	mov	r0, r4
 8006400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006404:	0800a299 	.word	0x0800a299
 8006408:	0800a2aa 	.word	0x0800a2aa

0800640c <__s2b>:
 800640c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006410:	460c      	mov	r4, r1
 8006412:	4615      	mov	r5, r2
 8006414:	461f      	mov	r7, r3
 8006416:	2209      	movs	r2, #9
 8006418:	3308      	adds	r3, #8
 800641a:	4606      	mov	r6, r0
 800641c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006420:	2100      	movs	r1, #0
 8006422:	2201      	movs	r2, #1
 8006424:	429a      	cmp	r2, r3
 8006426:	db09      	blt.n	800643c <__s2b+0x30>
 8006428:	4630      	mov	r0, r6
 800642a:	f7ff ff47 	bl	80062bc <_Balloc>
 800642e:	b940      	cbnz	r0, 8006442 <__s2b+0x36>
 8006430:	4602      	mov	r2, r0
 8006432:	4b19      	ldr	r3, [pc, #100]	@ (8006498 <__s2b+0x8c>)
 8006434:	4819      	ldr	r0, [pc, #100]	@ (800649c <__s2b+0x90>)
 8006436:	21d3      	movs	r1, #211	@ 0xd3
 8006438:	f001 fcbe 	bl	8007db8 <__assert_func>
 800643c:	0052      	lsls	r2, r2, #1
 800643e:	3101      	adds	r1, #1
 8006440:	e7f0      	b.n	8006424 <__s2b+0x18>
 8006442:	9b08      	ldr	r3, [sp, #32]
 8006444:	6143      	str	r3, [r0, #20]
 8006446:	2d09      	cmp	r5, #9
 8006448:	f04f 0301 	mov.w	r3, #1
 800644c:	6103      	str	r3, [r0, #16]
 800644e:	dd16      	ble.n	800647e <__s2b+0x72>
 8006450:	f104 0909 	add.w	r9, r4, #9
 8006454:	46c8      	mov	r8, r9
 8006456:	442c      	add	r4, r5
 8006458:	f818 3b01 	ldrb.w	r3, [r8], #1
 800645c:	4601      	mov	r1, r0
 800645e:	3b30      	subs	r3, #48	@ 0x30
 8006460:	220a      	movs	r2, #10
 8006462:	4630      	mov	r0, r6
 8006464:	f7ff ff8c 	bl	8006380 <__multadd>
 8006468:	45a0      	cmp	r8, r4
 800646a:	d1f5      	bne.n	8006458 <__s2b+0x4c>
 800646c:	f1a5 0408 	sub.w	r4, r5, #8
 8006470:	444c      	add	r4, r9
 8006472:	1b2d      	subs	r5, r5, r4
 8006474:	1963      	adds	r3, r4, r5
 8006476:	42bb      	cmp	r3, r7
 8006478:	db04      	blt.n	8006484 <__s2b+0x78>
 800647a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800647e:	340a      	adds	r4, #10
 8006480:	2509      	movs	r5, #9
 8006482:	e7f6      	b.n	8006472 <__s2b+0x66>
 8006484:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006488:	4601      	mov	r1, r0
 800648a:	3b30      	subs	r3, #48	@ 0x30
 800648c:	220a      	movs	r2, #10
 800648e:	4630      	mov	r0, r6
 8006490:	f7ff ff76 	bl	8006380 <__multadd>
 8006494:	e7ee      	b.n	8006474 <__s2b+0x68>
 8006496:	bf00      	nop
 8006498:	0800a299 	.word	0x0800a299
 800649c:	0800a2aa 	.word	0x0800a2aa

080064a0 <__hi0bits>:
 80064a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80064a4:	4603      	mov	r3, r0
 80064a6:	bf36      	itet	cc
 80064a8:	0403      	lslcc	r3, r0, #16
 80064aa:	2000      	movcs	r0, #0
 80064ac:	2010      	movcc	r0, #16
 80064ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064b2:	bf3c      	itt	cc
 80064b4:	021b      	lslcc	r3, r3, #8
 80064b6:	3008      	addcc	r0, #8
 80064b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064bc:	bf3c      	itt	cc
 80064be:	011b      	lslcc	r3, r3, #4
 80064c0:	3004      	addcc	r0, #4
 80064c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c6:	bf3c      	itt	cc
 80064c8:	009b      	lslcc	r3, r3, #2
 80064ca:	3002      	addcc	r0, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	db05      	blt.n	80064dc <__hi0bits+0x3c>
 80064d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80064d4:	f100 0001 	add.w	r0, r0, #1
 80064d8:	bf08      	it	eq
 80064da:	2020      	moveq	r0, #32
 80064dc:	4770      	bx	lr

080064de <__lo0bits>:
 80064de:	6803      	ldr	r3, [r0, #0]
 80064e0:	4602      	mov	r2, r0
 80064e2:	f013 0007 	ands.w	r0, r3, #7
 80064e6:	d00b      	beq.n	8006500 <__lo0bits+0x22>
 80064e8:	07d9      	lsls	r1, r3, #31
 80064ea:	d421      	bmi.n	8006530 <__lo0bits+0x52>
 80064ec:	0798      	lsls	r0, r3, #30
 80064ee:	bf49      	itett	mi
 80064f0:	085b      	lsrmi	r3, r3, #1
 80064f2:	089b      	lsrpl	r3, r3, #2
 80064f4:	2001      	movmi	r0, #1
 80064f6:	6013      	strmi	r3, [r2, #0]
 80064f8:	bf5c      	itt	pl
 80064fa:	6013      	strpl	r3, [r2, #0]
 80064fc:	2002      	movpl	r0, #2
 80064fe:	4770      	bx	lr
 8006500:	b299      	uxth	r1, r3
 8006502:	b909      	cbnz	r1, 8006508 <__lo0bits+0x2a>
 8006504:	0c1b      	lsrs	r3, r3, #16
 8006506:	2010      	movs	r0, #16
 8006508:	b2d9      	uxtb	r1, r3
 800650a:	b909      	cbnz	r1, 8006510 <__lo0bits+0x32>
 800650c:	3008      	adds	r0, #8
 800650e:	0a1b      	lsrs	r3, r3, #8
 8006510:	0719      	lsls	r1, r3, #28
 8006512:	bf04      	itt	eq
 8006514:	091b      	lsreq	r3, r3, #4
 8006516:	3004      	addeq	r0, #4
 8006518:	0799      	lsls	r1, r3, #30
 800651a:	bf04      	itt	eq
 800651c:	089b      	lsreq	r3, r3, #2
 800651e:	3002      	addeq	r0, #2
 8006520:	07d9      	lsls	r1, r3, #31
 8006522:	d403      	bmi.n	800652c <__lo0bits+0x4e>
 8006524:	085b      	lsrs	r3, r3, #1
 8006526:	f100 0001 	add.w	r0, r0, #1
 800652a:	d003      	beq.n	8006534 <__lo0bits+0x56>
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	4770      	bx	lr
 8006530:	2000      	movs	r0, #0
 8006532:	4770      	bx	lr
 8006534:	2020      	movs	r0, #32
 8006536:	4770      	bx	lr

08006538 <__i2b>:
 8006538:	b510      	push	{r4, lr}
 800653a:	460c      	mov	r4, r1
 800653c:	2101      	movs	r1, #1
 800653e:	f7ff febd 	bl	80062bc <_Balloc>
 8006542:	4602      	mov	r2, r0
 8006544:	b928      	cbnz	r0, 8006552 <__i2b+0x1a>
 8006546:	4b05      	ldr	r3, [pc, #20]	@ (800655c <__i2b+0x24>)
 8006548:	4805      	ldr	r0, [pc, #20]	@ (8006560 <__i2b+0x28>)
 800654a:	f240 1145 	movw	r1, #325	@ 0x145
 800654e:	f001 fc33 	bl	8007db8 <__assert_func>
 8006552:	2301      	movs	r3, #1
 8006554:	6144      	str	r4, [r0, #20]
 8006556:	6103      	str	r3, [r0, #16]
 8006558:	bd10      	pop	{r4, pc}
 800655a:	bf00      	nop
 800655c:	0800a299 	.word	0x0800a299
 8006560:	0800a2aa 	.word	0x0800a2aa

08006564 <__multiply>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	4614      	mov	r4, r2
 800656a:	690a      	ldr	r2, [r1, #16]
 800656c:	6923      	ldr	r3, [r4, #16]
 800656e:	429a      	cmp	r2, r3
 8006570:	bfa8      	it	ge
 8006572:	4623      	movge	r3, r4
 8006574:	460f      	mov	r7, r1
 8006576:	bfa4      	itt	ge
 8006578:	460c      	movge	r4, r1
 800657a:	461f      	movge	r7, r3
 800657c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006580:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006584:	68a3      	ldr	r3, [r4, #8]
 8006586:	6861      	ldr	r1, [r4, #4]
 8006588:	eb0a 0609 	add.w	r6, sl, r9
 800658c:	42b3      	cmp	r3, r6
 800658e:	b085      	sub	sp, #20
 8006590:	bfb8      	it	lt
 8006592:	3101      	addlt	r1, #1
 8006594:	f7ff fe92 	bl	80062bc <_Balloc>
 8006598:	b930      	cbnz	r0, 80065a8 <__multiply+0x44>
 800659a:	4602      	mov	r2, r0
 800659c:	4b44      	ldr	r3, [pc, #272]	@ (80066b0 <__multiply+0x14c>)
 800659e:	4845      	ldr	r0, [pc, #276]	@ (80066b4 <__multiply+0x150>)
 80065a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80065a4:	f001 fc08 	bl	8007db8 <__assert_func>
 80065a8:	f100 0514 	add.w	r5, r0, #20
 80065ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065b0:	462b      	mov	r3, r5
 80065b2:	2200      	movs	r2, #0
 80065b4:	4543      	cmp	r3, r8
 80065b6:	d321      	bcc.n	80065fc <__multiply+0x98>
 80065b8:	f107 0114 	add.w	r1, r7, #20
 80065bc:	f104 0214 	add.w	r2, r4, #20
 80065c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80065c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80065c8:	9302      	str	r3, [sp, #8]
 80065ca:	1b13      	subs	r3, r2, r4
 80065cc:	3b15      	subs	r3, #21
 80065ce:	f023 0303 	bic.w	r3, r3, #3
 80065d2:	3304      	adds	r3, #4
 80065d4:	f104 0715 	add.w	r7, r4, #21
 80065d8:	42ba      	cmp	r2, r7
 80065da:	bf38      	it	cc
 80065dc:	2304      	movcc	r3, #4
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	9b02      	ldr	r3, [sp, #8]
 80065e2:	9103      	str	r1, [sp, #12]
 80065e4:	428b      	cmp	r3, r1
 80065e6:	d80c      	bhi.n	8006602 <__multiply+0x9e>
 80065e8:	2e00      	cmp	r6, #0
 80065ea:	dd03      	ble.n	80065f4 <__multiply+0x90>
 80065ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d05b      	beq.n	80066ac <__multiply+0x148>
 80065f4:	6106      	str	r6, [r0, #16]
 80065f6:	b005      	add	sp, #20
 80065f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fc:	f843 2b04 	str.w	r2, [r3], #4
 8006600:	e7d8      	b.n	80065b4 <__multiply+0x50>
 8006602:	f8b1 a000 	ldrh.w	sl, [r1]
 8006606:	f1ba 0f00 	cmp.w	sl, #0
 800660a:	d024      	beq.n	8006656 <__multiply+0xf2>
 800660c:	f104 0e14 	add.w	lr, r4, #20
 8006610:	46a9      	mov	r9, r5
 8006612:	f04f 0c00 	mov.w	ip, #0
 8006616:	f85e 7b04 	ldr.w	r7, [lr], #4
 800661a:	f8d9 3000 	ldr.w	r3, [r9]
 800661e:	fa1f fb87 	uxth.w	fp, r7
 8006622:	b29b      	uxth	r3, r3
 8006624:	fb0a 330b 	mla	r3, sl, fp, r3
 8006628:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800662c:	f8d9 7000 	ldr.w	r7, [r9]
 8006630:	4463      	add	r3, ip
 8006632:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006636:	fb0a c70b 	mla	r7, sl, fp, ip
 800663a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800663e:	b29b      	uxth	r3, r3
 8006640:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006644:	4572      	cmp	r2, lr
 8006646:	f849 3b04 	str.w	r3, [r9], #4
 800664a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800664e:	d8e2      	bhi.n	8006616 <__multiply+0xb2>
 8006650:	9b01      	ldr	r3, [sp, #4]
 8006652:	f845 c003 	str.w	ip, [r5, r3]
 8006656:	9b03      	ldr	r3, [sp, #12]
 8006658:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800665c:	3104      	adds	r1, #4
 800665e:	f1b9 0f00 	cmp.w	r9, #0
 8006662:	d021      	beq.n	80066a8 <__multiply+0x144>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	f104 0c14 	add.w	ip, r4, #20
 800666a:	46ae      	mov	lr, r5
 800666c:	f04f 0a00 	mov.w	sl, #0
 8006670:	f8bc b000 	ldrh.w	fp, [ip]
 8006674:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006678:	fb09 770b 	mla	r7, r9, fp, r7
 800667c:	4457      	add	r7, sl
 800667e:	b29b      	uxth	r3, r3
 8006680:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006684:	f84e 3b04 	str.w	r3, [lr], #4
 8006688:	f85c 3b04 	ldr.w	r3, [ip], #4
 800668c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006690:	f8be 3000 	ldrh.w	r3, [lr]
 8006694:	fb09 330a 	mla	r3, r9, sl, r3
 8006698:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800669c:	4562      	cmp	r2, ip
 800669e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066a2:	d8e5      	bhi.n	8006670 <__multiply+0x10c>
 80066a4:	9f01      	ldr	r7, [sp, #4]
 80066a6:	51eb      	str	r3, [r5, r7]
 80066a8:	3504      	adds	r5, #4
 80066aa:	e799      	b.n	80065e0 <__multiply+0x7c>
 80066ac:	3e01      	subs	r6, #1
 80066ae:	e79b      	b.n	80065e8 <__multiply+0x84>
 80066b0:	0800a299 	.word	0x0800a299
 80066b4:	0800a2aa 	.word	0x0800a2aa

080066b8 <__pow5mult>:
 80066b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066bc:	4615      	mov	r5, r2
 80066be:	f012 0203 	ands.w	r2, r2, #3
 80066c2:	4607      	mov	r7, r0
 80066c4:	460e      	mov	r6, r1
 80066c6:	d007      	beq.n	80066d8 <__pow5mult+0x20>
 80066c8:	4c25      	ldr	r4, [pc, #148]	@ (8006760 <__pow5mult+0xa8>)
 80066ca:	3a01      	subs	r2, #1
 80066cc:	2300      	movs	r3, #0
 80066ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066d2:	f7ff fe55 	bl	8006380 <__multadd>
 80066d6:	4606      	mov	r6, r0
 80066d8:	10ad      	asrs	r5, r5, #2
 80066da:	d03d      	beq.n	8006758 <__pow5mult+0xa0>
 80066dc:	69fc      	ldr	r4, [r7, #28]
 80066de:	b97c      	cbnz	r4, 8006700 <__pow5mult+0x48>
 80066e0:	2010      	movs	r0, #16
 80066e2:	f7fd fe6d 	bl	80043c0 <malloc>
 80066e6:	4602      	mov	r2, r0
 80066e8:	61f8      	str	r0, [r7, #28]
 80066ea:	b928      	cbnz	r0, 80066f8 <__pow5mult+0x40>
 80066ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006764 <__pow5mult+0xac>)
 80066ee:	481e      	ldr	r0, [pc, #120]	@ (8006768 <__pow5mult+0xb0>)
 80066f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80066f4:	f001 fb60 	bl	8007db8 <__assert_func>
 80066f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066fc:	6004      	str	r4, [r0, #0]
 80066fe:	60c4      	str	r4, [r0, #12]
 8006700:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006704:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006708:	b94c      	cbnz	r4, 800671e <__pow5mult+0x66>
 800670a:	f240 2171 	movw	r1, #625	@ 0x271
 800670e:	4638      	mov	r0, r7
 8006710:	f7ff ff12 	bl	8006538 <__i2b>
 8006714:	2300      	movs	r3, #0
 8006716:	f8c8 0008 	str.w	r0, [r8, #8]
 800671a:	4604      	mov	r4, r0
 800671c:	6003      	str	r3, [r0, #0]
 800671e:	f04f 0900 	mov.w	r9, #0
 8006722:	07eb      	lsls	r3, r5, #31
 8006724:	d50a      	bpl.n	800673c <__pow5mult+0x84>
 8006726:	4631      	mov	r1, r6
 8006728:	4622      	mov	r2, r4
 800672a:	4638      	mov	r0, r7
 800672c:	f7ff ff1a 	bl	8006564 <__multiply>
 8006730:	4631      	mov	r1, r6
 8006732:	4680      	mov	r8, r0
 8006734:	4638      	mov	r0, r7
 8006736:	f7ff fe01 	bl	800633c <_Bfree>
 800673a:	4646      	mov	r6, r8
 800673c:	106d      	asrs	r5, r5, #1
 800673e:	d00b      	beq.n	8006758 <__pow5mult+0xa0>
 8006740:	6820      	ldr	r0, [r4, #0]
 8006742:	b938      	cbnz	r0, 8006754 <__pow5mult+0x9c>
 8006744:	4622      	mov	r2, r4
 8006746:	4621      	mov	r1, r4
 8006748:	4638      	mov	r0, r7
 800674a:	f7ff ff0b 	bl	8006564 <__multiply>
 800674e:	6020      	str	r0, [r4, #0]
 8006750:	f8c0 9000 	str.w	r9, [r0]
 8006754:	4604      	mov	r4, r0
 8006756:	e7e4      	b.n	8006722 <__pow5mult+0x6a>
 8006758:	4630      	mov	r0, r6
 800675a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800675e:	bf00      	nop
 8006760:	0800a304 	.word	0x0800a304
 8006764:	0800a22a 	.word	0x0800a22a
 8006768:	0800a2aa 	.word	0x0800a2aa

0800676c <__lshift>:
 800676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	460c      	mov	r4, r1
 8006772:	6849      	ldr	r1, [r1, #4]
 8006774:	6923      	ldr	r3, [r4, #16]
 8006776:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800677a:	68a3      	ldr	r3, [r4, #8]
 800677c:	4607      	mov	r7, r0
 800677e:	4691      	mov	r9, r2
 8006780:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006784:	f108 0601 	add.w	r6, r8, #1
 8006788:	42b3      	cmp	r3, r6
 800678a:	db0b      	blt.n	80067a4 <__lshift+0x38>
 800678c:	4638      	mov	r0, r7
 800678e:	f7ff fd95 	bl	80062bc <_Balloc>
 8006792:	4605      	mov	r5, r0
 8006794:	b948      	cbnz	r0, 80067aa <__lshift+0x3e>
 8006796:	4602      	mov	r2, r0
 8006798:	4b28      	ldr	r3, [pc, #160]	@ (800683c <__lshift+0xd0>)
 800679a:	4829      	ldr	r0, [pc, #164]	@ (8006840 <__lshift+0xd4>)
 800679c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80067a0:	f001 fb0a 	bl	8007db8 <__assert_func>
 80067a4:	3101      	adds	r1, #1
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	e7ee      	b.n	8006788 <__lshift+0x1c>
 80067aa:	2300      	movs	r3, #0
 80067ac:	f100 0114 	add.w	r1, r0, #20
 80067b0:	f100 0210 	add.w	r2, r0, #16
 80067b4:	4618      	mov	r0, r3
 80067b6:	4553      	cmp	r3, sl
 80067b8:	db33      	blt.n	8006822 <__lshift+0xb6>
 80067ba:	6920      	ldr	r0, [r4, #16]
 80067bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067c0:	f104 0314 	add.w	r3, r4, #20
 80067c4:	f019 091f 	ands.w	r9, r9, #31
 80067c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067d0:	d02b      	beq.n	800682a <__lshift+0xbe>
 80067d2:	f1c9 0e20 	rsb	lr, r9, #32
 80067d6:	468a      	mov	sl, r1
 80067d8:	2200      	movs	r2, #0
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	fa00 f009 	lsl.w	r0, r0, r9
 80067e0:	4310      	orrs	r0, r2
 80067e2:	f84a 0b04 	str.w	r0, [sl], #4
 80067e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ea:	459c      	cmp	ip, r3
 80067ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80067f0:	d8f3      	bhi.n	80067da <__lshift+0x6e>
 80067f2:	ebac 0304 	sub.w	r3, ip, r4
 80067f6:	3b15      	subs	r3, #21
 80067f8:	f023 0303 	bic.w	r3, r3, #3
 80067fc:	3304      	adds	r3, #4
 80067fe:	f104 0015 	add.w	r0, r4, #21
 8006802:	4584      	cmp	ip, r0
 8006804:	bf38      	it	cc
 8006806:	2304      	movcc	r3, #4
 8006808:	50ca      	str	r2, [r1, r3]
 800680a:	b10a      	cbz	r2, 8006810 <__lshift+0xa4>
 800680c:	f108 0602 	add.w	r6, r8, #2
 8006810:	3e01      	subs	r6, #1
 8006812:	4638      	mov	r0, r7
 8006814:	612e      	str	r6, [r5, #16]
 8006816:	4621      	mov	r1, r4
 8006818:	f7ff fd90 	bl	800633c <_Bfree>
 800681c:	4628      	mov	r0, r5
 800681e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006822:	f842 0f04 	str.w	r0, [r2, #4]!
 8006826:	3301      	adds	r3, #1
 8006828:	e7c5      	b.n	80067b6 <__lshift+0x4a>
 800682a:	3904      	subs	r1, #4
 800682c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006830:	f841 2f04 	str.w	r2, [r1, #4]!
 8006834:	459c      	cmp	ip, r3
 8006836:	d8f9      	bhi.n	800682c <__lshift+0xc0>
 8006838:	e7ea      	b.n	8006810 <__lshift+0xa4>
 800683a:	bf00      	nop
 800683c:	0800a299 	.word	0x0800a299
 8006840:	0800a2aa 	.word	0x0800a2aa

08006844 <__mcmp>:
 8006844:	690a      	ldr	r2, [r1, #16]
 8006846:	4603      	mov	r3, r0
 8006848:	6900      	ldr	r0, [r0, #16]
 800684a:	1a80      	subs	r0, r0, r2
 800684c:	b530      	push	{r4, r5, lr}
 800684e:	d10e      	bne.n	800686e <__mcmp+0x2a>
 8006850:	3314      	adds	r3, #20
 8006852:	3114      	adds	r1, #20
 8006854:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006858:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800685c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006860:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006864:	4295      	cmp	r5, r2
 8006866:	d003      	beq.n	8006870 <__mcmp+0x2c>
 8006868:	d205      	bcs.n	8006876 <__mcmp+0x32>
 800686a:	f04f 30ff 	mov.w	r0, #4294967295
 800686e:	bd30      	pop	{r4, r5, pc}
 8006870:	42a3      	cmp	r3, r4
 8006872:	d3f3      	bcc.n	800685c <__mcmp+0x18>
 8006874:	e7fb      	b.n	800686e <__mcmp+0x2a>
 8006876:	2001      	movs	r0, #1
 8006878:	e7f9      	b.n	800686e <__mcmp+0x2a>
	...

0800687c <__mdiff>:
 800687c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006880:	4689      	mov	r9, r1
 8006882:	4606      	mov	r6, r0
 8006884:	4611      	mov	r1, r2
 8006886:	4648      	mov	r0, r9
 8006888:	4614      	mov	r4, r2
 800688a:	f7ff ffdb 	bl	8006844 <__mcmp>
 800688e:	1e05      	subs	r5, r0, #0
 8006890:	d112      	bne.n	80068b8 <__mdiff+0x3c>
 8006892:	4629      	mov	r1, r5
 8006894:	4630      	mov	r0, r6
 8006896:	f7ff fd11 	bl	80062bc <_Balloc>
 800689a:	4602      	mov	r2, r0
 800689c:	b928      	cbnz	r0, 80068aa <__mdiff+0x2e>
 800689e:	4b3f      	ldr	r3, [pc, #252]	@ (800699c <__mdiff+0x120>)
 80068a0:	f240 2137 	movw	r1, #567	@ 0x237
 80068a4:	483e      	ldr	r0, [pc, #248]	@ (80069a0 <__mdiff+0x124>)
 80068a6:	f001 fa87 	bl	8007db8 <__assert_func>
 80068aa:	2301      	movs	r3, #1
 80068ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068b0:	4610      	mov	r0, r2
 80068b2:	b003      	add	sp, #12
 80068b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b8:	bfbc      	itt	lt
 80068ba:	464b      	movlt	r3, r9
 80068bc:	46a1      	movlt	r9, r4
 80068be:	4630      	mov	r0, r6
 80068c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80068c4:	bfba      	itte	lt
 80068c6:	461c      	movlt	r4, r3
 80068c8:	2501      	movlt	r5, #1
 80068ca:	2500      	movge	r5, #0
 80068cc:	f7ff fcf6 	bl	80062bc <_Balloc>
 80068d0:	4602      	mov	r2, r0
 80068d2:	b918      	cbnz	r0, 80068dc <__mdiff+0x60>
 80068d4:	4b31      	ldr	r3, [pc, #196]	@ (800699c <__mdiff+0x120>)
 80068d6:	f240 2145 	movw	r1, #581	@ 0x245
 80068da:	e7e3      	b.n	80068a4 <__mdiff+0x28>
 80068dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80068e0:	6926      	ldr	r6, [r4, #16]
 80068e2:	60c5      	str	r5, [r0, #12]
 80068e4:	f109 0310 	add.w	r3, r9, #16
 80068e8:	f109 0514 	add.w	r5, r9, #20
 80068ec:	f104 0e14 	add.w	lr, r4, #20
 80068f0:	f100 0b14 	add.w	fp, r0, #20
 80068f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80068f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	46d9      	mov	r9, fp
 8006900:	f04f 0c00 	mov.w	ip, #0
 8006904:	9b01      	ldr	r3, [sp, #4]
 8006906:	f85e 0b04 	ldr.w	r0, [lr], #4
 800690a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	fa1f f38a 	uxth.w	r3, sl
 8006914:	4619      	mov	r1, r3
 8006916:	b283      	uxth	r3, r0
 8006918:	1acb      	subs	r3, r1, r3
 800691a:	0c00      	lsrs	r0, r0, #16
 800691c:	4463      	add	r3, ip
 800691e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006922:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006926:	b29b      	uxth	r3, r3
 8006928:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800692c:	4576      	cmp	r6, lr
 800692e:	f849 3b04 	str.w	r3, [r9], #4
 8006932:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006936:	d8e5      	bhi.n	8006904 <__mdiff+0x88>
 8006938:	1b33      	subs	r3, r6, r4
 800693a:	3b15      	subs	r3, #21
 800693c:	f023 0303 	bic.w	r3, r3, #3
 8006940:	3415      	adds	r4, #21
 8006942:	3304      	adds	r3, #4
 8006944:	42a6      	cmp	r6, r4
 8006946:	bf38      	it	cc
 8006948:	2304      	movcc	r3, #4
 800694a:	441d      	add	r5, r3
 800694c:	445b      	add	r3, fp
 800694e:	461e      	mov	r6, r3
 8006950:	462c      	mov	r4, r5
 8006952:	4544      	cmp	r4, r8
 8006954:	d30e      	bcc.n	8006974 <__mdiff+0xf8>
 8006956:	f108 0103 	add.w	r1, r8, #3
 800695a:	1b49      	subs	r1, r1, r5
 800695c:	f021 0103 	bic.w	r1, r1, #3
 8006960:	3d03      	subs	r5, #3
 8006962:	45a8      	cmp	r8, r5
 8006964:	bf38      	it	cc
 8006966:	2100      	movcc	r1, #0
 8006968:	440b      	add	r3, r1
 800696a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800696e:	b191      	cbz	r1, 8006996 <__mdiff+0x11a>
 8006970:	6117      	str	r7, [r2, #16]
 8006972:	e79d      	b.n	80068b0 <__mdiff+0x34>
 8006974:	f854 1b04 	ldr.w	r1, [r4], #4
 8006978:	46e6      	mov	lr, ip
 800697a:	0c08      	lsrs	r0, r1, #16
 800697c:	fa1c fc81 	uxtah	ip, ip, r1
 8006980:	4471      	add	r1, lr
 8006982:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006986:	b289      	uxth	r1, r1
 8006988:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800698c:	f846 1b04 	str.w	r1, [r6], #4
 8006990:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006994:	e7dd      	b.n	8006952 <__mdiff+0xd6>
 8006996:	3f01      	subs	r7, #1
 8006998:	e7e7      	b.n	800696a <__mdiff+0xee>
 800699a:	bf00      	nop
 800699c:	0800a299 	.word	0x0800a299
 80069a0:	0800a2aa 	.word	0x0800a2aa

080069a4 <__ulp>:
 80069a4:	b082      	sub	sp, #8
 80069a6:	ed8d 0b00 	vstr	d0, [sp]
 80069aa:	9a01      	ldr	r2, [sp, #4]
 80069ac:	4b0f      	ldr	r3, [pc, #60]	@ (80069ec <__ulp+0x48>)
 80069ae:	4013      	ands	r3, r2
 80069b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	dc08      	bgt.n	80069ca <__ulp+0x26>
 80069b8:	425b      	negs	r3, r3
 80069ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80069be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80069c2:	da04      	bge.n	80069ce <__ulp+0x2a>
 80069c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80069c8:	4113      	asrs	r3, r2
 80069ca:	2200      	movs	r2, #0
 80069cc:	e008      	b.n	80069e0 <__ulp+0x3c>
 80069ce:	f1a2 0314 	sub.w	r3, r2, #20
 80069d2:	2b1e      	cmp	r3, #30
 80069d4:	bfda      	itte	le
 80069d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80069da:	40da      	lsrle	r2, r3
 80069dc:	2201      	movgt	r2, #1
 80069de:	2300      	movs	r3, #0
 80069e0:	4619      	mov	r1, r3
 80069e2:	4610      	mov	r0, r2
 80069e4:	ec41 0b10 	vmov	d0, r0, r1
 80069e8:	b002      	add	sp, #8
 80069ea:	4770      	bx	lr
 80069ec:	7ff00000 	.word	0x7ff00000

080069f0 <__b2d>:
 80069f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069f4:	6906      	ldr	r6, [r0, #16]
 80069f6:	f100 0814 	add.w	r8, r0, #20
 80069fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80069fe:	1f37      	subs	r7, r6, #4
 8006a00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006a04:	4610      	mov	r0, r2
 8006a06:	f7ff fd4b 	bl	80064a0 <__hi0bits>
 8006a0a:	f1c0 0320 	rsb	r3, r0, #32
 8006a0e:	280a      	cmp	r0, #10
 8006a10:	600b      	str	r3, [r1, #0]
 8006a12:	491b      	ldr	r1, [pc, #108]	@ (8006a80 <__b2d+0x90>)
 8006a14:	dc15      	bgt.n	8006a42 <__b2d+0x52>
 8006a16:	f1c0 0c0b 	rsb	ip, r0, #11
 8006a1a:	fa22 f30c 	lsr.w	r3, r2, ip
 8006a1e:	45b8      	cmp	r8, r7
 8006a20:	ea43 0501 	orr.w	r5, r3, r1
 8006a24:	bf34      	ite	cc
 8006a26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006a2a:	2300      	movcs	r3, #0
 8006a2c:	3015      	adds	r0, #21
 8006a2e:	fa02 f000 	lsl.w	r0, r2, r0
 8006a32:	fa23 f30c 	lsr.w	r3, r3, ip
 8006a36:	4303      	orrs	r3, r0
 8006a38:	461c      	mov	r4, r3
 8006a3a:	ec45 4b10 	vmov	d0, r4, r5
 8006a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a42:	45b8      	cmp	r8, r7
 8006a44:	bf3a      	itte	cc
 8006a46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006a4a:	f1a6 0708 	subcc.w	r7, r6, #8
 8006a4e:	2300      	movcs	r3, #0
 8006a50:	380b      	subs	r0, #11
 8006a52:	d012      	beq.n	8006a7a <__b2d+0x8a>
 8006a54:	f1c0 0120 	rsb	r1, r0, #32
 8006a58:	fa23 f401 	lsr.w	r4, r3, r1
 8006a5c:	4082      	lsls	r2, r0
 8006a5e:	4322      	orrs	r2, r4
 8006a60:	4547      	cmp	r7, r8
 8006a62:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006a66:	bf8c      	ite	hi
 8006a68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006a6c:	2200      	movls	r2, #0
 8006a6e:	4083      	lsls	r3, r0
 8006a70:	40ca      	lsrs	r2, r1
 8006a72:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006a76:	4313      	orrs	r3, r2
 8006a78:	e7de      	b.n	8006a38 <__b2d+0x48>
 8006a7a:	ea42 0501 	orr.w	r5, r2, r1
 8006a7e:	e7db      	b.n	8006a38 <__b2d+0x48>
 8006a80:	3ff00000 	.word	0x3ff00000

08006a84 <__d2b>:
 8006a84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a88:	460f      	mov	r7, r1
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	ec59 8b10 	vmov	r8, r9, d0
 8006a90:	4616      	mov	r6, r2
 8006a92:	f7ff fc13 	bl	80062bc <_Balloc>
 8006a96:	4604      	mov	r4, r0
 8006a98:	b930      	cbnz	r0, 8006aa8 <__d2b+0x24>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	4b23      	ldr	r3, [pc, #140]	@ (8006b2c <__d2b+0xa8>)
 8006a9e:	4824      	ldr	r0, [pc, #144]	@ (8006b30 <__d2b+0xac>)
 8006aa0:	f240 310f 	movw	r1, #783	@ 0x30f
 8006aa4:	f001 f988 	bl	8007db8 <__assert_func>
 8006aa8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006aac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ab0:	b10d      	cbz	r5, 8006ab6 <__d2b+0x32>
 8006ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	f1b8 0300 	subs.w	r3, r8, #0
 8006abc:	d023      	beq.n	8006b06 <__d2b+0x82>
 8006abe:	4668      	mov	r0, sp
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	f7ff fd0c 	bl	80064de <__lo0bits>
 8006ac6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006aca:	b1d0      	cbz	r0, 8006b02 <__d2b+0x7e>
 8006acc:	f1c0 0320 	rsb	r3, r0, #32
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	430b      	orrs	r3, r1
 8006ad6:	40c2      	lsrs	r2, r0
 8006ad8:	6163      	str	r3, [r4, #20]
 8006ada:	9201      	str	r2, [sp, #4]
 8006adc:	9b01      	ldr	r3, [sp, #4]
 8006ade:	61a3      	str	r3, [r4, #24]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bf0c      	ite	eq
 8006ae4:	2201      	moveq	r2, #1
 8006ae6:	2202      	movne	r2, #2
 8006ae8:	6122      	str	r2, [r4, #16]
 8006aea:	b1a5      	cbz	r5, 8006b16 <__d2b+0x92>
 8006aec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006af0:	4405      	add	r5, r0
 8006af2:	603d      	str	r5, [r7, #0]
 8006af4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006af8:	6030      	str	r0, [r6, #0]
 8006afa:	4620      	mov	r0, r4
 8006afc:	b003      	add	sp, #12
 8006afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b02:	6161      	str	r1, [r4, #20]
 8006b04:	e7ea      	b.n	8006adc <__d2b+0x58>
 8006b06:	a801      	add	r0, sp, #4
 8006b08:	f7ff fce9 	bl	80064de <__lo0bits>
 8006b0c:	9b01      	ldr	r3, [sp, #4]
 8006b0e:	6163      	str	r3, [r4, #20]
 8006b10:	3020      	adds	r0, #32
 8006b12:	2201      	movs	r2, #1
 8006b14:	e7e8      	b.n	8006ae8 <__d2b+0x64>
 8006b16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b1e:	6038      	str	r0, [r7, #0]
 8006b20:	6918      	ldr	r0, [r3, #16]
 8006b22:	f7ff fcbd 	bl	80064a0 <__hi0bits>
 8006b26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b2a:	e7e5      	b.n	8006af8 <__d2b+0x74>
 8006b2c:	0800a299 	.word	0x0800a299
 8006b30:	0800a2aa 	.word	0x0800a2aa

08006b34 <__ratio>:
 8006b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	e9cd 1000 	strd	r1, r0, [sp]
 8006b3e:	a902      	add	r1, sp, #8
 8006b40:	f7ff ff56 	bl	80069f0 <__b2d>
 8006b44:	9800      	ldr	r0, [sp, #0]
 8006b46:	a903      	add	r1, sp, #12
 8006b48:	ec55 4b10 	vmov	r4, r5, d0
 8006b4c:	f7ff ff50 	bl	80069f0 <__b2d>
 8006b50:	9b01      	ldr	r3, [sp, #4]
 8006b52:	6919      	ldr	r1, [r3, #16]
 8006b54:	9b00      	ldr	r3, [sp, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	1ac9      	subs	r1, r1, r3
 8006b5a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	ec5b ab10 	vmov	sl, fp, d0
 8006b64:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	bfce      	itee	gt
 8006b6c:	462a      	movgt	r2, r5
 8006b6e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006b72:	465a      	movle	r2, fp
 8006b74:	462f      	mov	r7, r5
 8006b76:	46d9      	mov	r9, fp
 8006b78:	bfcc      	ite	gt
 8006b7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006b7e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006b82:	464b      	mov	r3, r9
 8006b84:	4652      	mov	r2, sl
 8006b86:	4620      	mov	r0, r4
 8006b88:	4639      	mov	r1, r7
 8006b8a:	f7f9 fe67 	bl	800085c <__aeabi_ddiv>
 8006b8e:	ec41 0b10 	vmov	d0, r0, r1
 8006b92:	b005      	add	sp, #20
 8006b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b98 <__copybits>:
 8006b98:	3901      	subs	r1, #1
 8006b9a:	b570      	push	{r4, r5, r6, lr}
 8006b9c:	1149      	asrs	r1, r1, #5
 8006b9e:	6914      	ldr	r4, [r2, #16]
 8006ba0:	3101      	adds	r1, #1
 8006ba2:	f102 0314 	add.w	r3, r2, #20
 8006ba6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006baa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006bae:	1f05      	subs	r5, r0, #4
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	d30c      	bcc.n	8006bce <__copybits+0x36>
 8006bb4:	1aa3      	subs	r3, r4, r2
 8006bb6:	3b11      	subs	r3, #17
 8006bb8:	f023 0303 	bic.w	r3, r3, #3
 8006bbc:	3211      	adds	r2, #17
 8006bbe:	42a2      	cmp	r2, r4
 8006bc0:	bf88      	it	hi
 8006bc2:	2300      	movhi	r3, #0
 8006bc4:	4418      	add	r0, r3
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	4288      	cmp	r0, r1
 8006bca:	d305      	bcc.n	8006bd8 <__copybits+0x40>
 8006bcc:	bd70      	pop	{r4, r5, r6, pc}
 8006bce:	f853 6b04 	ldr.w	r6, [r3], #4
 8006bd2:	f845 6f04 	str.w	r6, [r5, #4]!
 8006bd6:	e7eb      	b.n	8006bb0 <__copybits+0x18>
 8006bd8:	f840 3b04 	str.w	r3, [r0], #4
 8006bdc:	e7f4      	b.n	8006bc8 <__copybits+0x30>

08006bde <__any_on>:
 8006bde:	f100 0214 	add.w	r2, r0, #20
 8006be2:	6900      	ldr	r0, [r0, #16]
 8006be4:	114b      	asrs	r3, r1, #5
 8006be6:	4298      	cmp	r0, r3
 8006be8:	b510      	push	{r4, lr}
 8006bea:	db11      	blt.n	8006c10 <__any_on+0x32>
 8006bec:	dd0a      	ble.n	8006c04 <__any_on+0x26>
 8006bee:	f011 011f 	ands.w	r1, r1, #31
 8006bf2:	d007      	beq.n	8006c04 <__any_on+0x26>
 8006bf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006bf8:	fa24 f001 	lsr.w	r0, r4, r1
 8006bfc:	fa00 f101 	lsl.w	r1, r0, r1
 8006c00:	428c      	cmp	r4, r1
 8006c02:	d10b      	bne.n	8006c1c <__any_on+0x3e>
 8006c04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d803      	bhi.n	8006c14 <__any_on+0x36>
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	bd10      	pop	{r4, pc}
 8006c10:	4603      	mov	r3, r0
 8006c12:	e7f7      	b.n	8006c04 <__any_on+0x26>
 8006c14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c18:	2900      	cmp	r1, #0
 8006c1a:	d0f5      	beq.n	8006c08 <__any_on+0x2a>
 8006c1c:	2001      	movs	r0, #1
 8006c1e:	e7f6      	b.n	8006c0e <__any_on+0x30>

08006c20 <sulp>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	4604      	mov	r4, r0
 8006c24:	460d      	mov	r5, r1
 8006c26:	ec45 4b10 	vmov	d0, r4, r5
 8006c2a:	4616      	mov	r6, r2
 8006c2c:	f7ff feba 	bl	80069a4 <__ulp>
 8006c30:	ec51 0b10 	vmov	r0, r1, d0
 8006c34:	b17e      	cbz	r6, 8006c56 <sulp+0x36>
 8006c36:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006c3a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	dd09      	ble.n	8006c56 <sulp+0x36>
 8006c42:	051b      	lsls	r3, r3, #20
 8006c44:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006c48:	2400      	movs	r4, #0
 8006c4a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006c4e:	4622      	mov	r2, r4
 8006c50:	462b      	mov	r3, r5
 8006c52:	f7f9 fcd9 	bl	8000608 <__aeabi_dmul>
 8006c56:	ec41 0b10 	vmov	d0, r0, r1
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}
 8006c5c:	0000      	movs	r0, r0
	...

08006c60 <_strtod_l>:
 8006c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	b09f      	sub	sp, #124	@ 0x7c
 8006c66:	460c      	mov	r4, r1
 8006c68:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006c6e:	9005      	str	r0, [sp, #20]
 8006c70:	f04f 0a00 	mov.w	sl, #0
 8006c74:	f04f 0b00 	mov.w	fp, #0
 8006c78:	460a      	mov	r2, r1
 8006c7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c7c:	7811      	ldrb	r1, [r2, #0]
 8006c7e:	292b      	cmp	r1, #43	@ 0x2b
 8006c80:	d04a      	beq.n	8006d18 <_strtod_l+0xb8>
 8006c82:	d838      	bhi.n	8006cf6 <_strtod_l+0x96>
 8006c84:	290d      	cmp	r1, #13
 8006c86:	d832      	bhi.n	8006cee <_strtod_l+0x8e>
 8006c88:	2908      	cmp	r1, #8
 8006c8a:	d832      	bhi.n	8006cf2 <_strtod_l+0x92>
 8006c8c:	2900      	cmp	r1, #0
 8006c8e:	d03b      	beq.n	8006d08 <_strtod_l+0xa8>
 8006c90:	2200      	movs	r2, #0
 8006c92:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006c94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006c96:	782a      	ldrb	r2, [r5, #0]
 8006c98:	2a30      	cmp	r2, #48	@ 0x30
 8006c9a:	f040 80b3 	bne.w	8006e04 <_strtod_l+0x1a4>
 8006c9e:	786a      	ldrb	r2, [r5, #1]
 8006ca0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006ca4:	2a58      	cmp	r2, #88	@ 0x58
 8006ca6:	d16e      	bne.n	8006d86 <_strtod_l+0x126>
 8006ca8:	9302      	str	r3, [sp, #8]
 8006caa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cac:	9301      	str	r3, [sp, #4]
 8006cae:	ab1a      	add	r3, sp, #104	@ 0x68
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	4a8e      	ldr	r2, [pc, #568]	@ (8006eec <_strtod_l+0x28c>)
 8006cb4:	9805      	ldr	r0, [sp, #20]
 8006cb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006cb8:	a919      	add	r1, sp, #100	@ 0x64
 8006cba:	f001 f917 	bl	8007eec <__gethex>
 8006cbe:	f010 060f 	ands.w	r6, r0, #15
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	d005      	beq.n	8006cd2 <_strtod_l+0x72>
 8006cc6:	2e06      	cmp	r6, #6
 8006cc8:	d128      	bne.n	8006d1c <_strtod_l+0xbc>
 8006cca:	3501      	adds	r5, #1
 8006ccc:	2300      	movs	r3, #0
 8006cce:	9519      	str	r5, [sp, #100]	@ 0x64
 8006cd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 858e 	bne.w	80077f6 <_strtod_l+0xb96>
 8006cda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cdc:	b1cb      	cbz	r3, 8006d12 <_strtod_l+0xb2>
 8006cde:	4652      	mov	r2, sl
 8006ce0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006ce4:	ec43 2b10 	vmov	d0, r2, r3
 8006ce8:	b01f      	add	sp, #124	@ 0x7c
 8006cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cee:	2920      	cmp	r1, #32
 8006cf0:	d1ce      	bne.n	8006c90 <_strtod_l+0x30>
 8006cf2:	3201      	adds	r2, #1
 8006cf4:	e7c1      	b.n	8006c7a <_strtod_l+0x1a>
 8006cf6:	292d      	cmp	r1, #45	@ 0x2d
 8006cf8:	d1ca      	bne.n	8006c90 <_strtod_l+0x30>
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006cfe:	1c51      	adds	r1, r2, #1
 8006d00:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d02:	7852      	ldrb	r2, [r2, #1]
 8006d04:	2a00      	cmp	r2, #0
 8006d06:	d1c5      	bne.n	8006c94 <_strtod_l+0x34>
 8006d08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d0a:	9419      	str	r4, [sp, #100]	@ 0x64
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f040 8570 	bne.w	80077f2 <_strtod_l+0xb92>
 8006d12:	4652      	mov	r2, sl
 8006d14:	465b      	mov	r3, fp
 8006d16:	e7e5      	b.n	8006ce4 <_strtod_l+0x84>
 8006d18:	2100      	movs	r1, #0
 8006d1a:	e7ef      	b.n	8006cfc <_strtod_l+0x9c>
 8006d1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006d1e:	b13a      	cbz	r2, 8006d30 <_strtod_l+0xd0>
 8006d20:	2135      	movs	r1, #53	@ 0x35
 8006d22:	a81c      	add	r0, sp, #112	@ 0x70
 8006d24:	f7ff ff38 	bl	8006b98 <__copybits>
 8006d28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d2a:	9805      	ldr	r0, [sp, #20]
 8006d2c:	f7ff fb06 	bl	800633c <_Bfree>
 8006d30:	3e01      	subs	r6, #1
 8006d32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006d34:	2e04      	cmp	r6, #4
 8006d36:	d806      	bhi.n	8006d46 <_strtod_l+0xe6>
 8006d38:	e8df f006 	tbb	[pc, r6]
 8006d3c:	201d0314 	.word	0x201d0314
 8006d40:	14          	.byte	0x14
 8006d41:	00          	.byte	0x00
 8006d42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006d46:	05e1      	lsls	r1, r4, #23
 8006d48:	bf48      	it	mi
 8006d4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006d4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d52:	0d1b      	lsrs	r3, r3, #20
 8006d54:	051b      	lsls	r3, r3, #20
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1bb      	bne.n	8006cd2 <_strtod_l+0x72>
 8006d5a:	f7fe fbe3 	bl	8005524 <__errno>
 8006d5e:	2322      	movs	r3, #34	@ 0x22
 8006d60:	6003      	str	r3, [r0, #0]
 8006d62:	e7b6      	b.n	8006cd2 <_strtod_l+0x72>
 8006d64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006d68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006d6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006d70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006d74:	e7e7      	b.n	8006d46 <_strtod_l+0xe6>
 8006d76:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006ef4 <_strtod_l+0x294>
 8006d7a:	e7e4      	b.n	8006d46 <_strtod_l+0xe6>
 8006d7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006d80:	f04f 3aff 	mov.w	sl, #4294967295
 8006d84:	e7df      	b.n	8006d46 <_strtod_l+0xe6>
 8006d86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	2b30      	cmp	r3, #48	@ 0x30
 8006d90:	d0f9      	beq.n	8006d86 <_strtod_l+0x126>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d09d      	beq.n	8006cd2 <_strtod_l+0x72>
 8006d96:	2301      	movs	r3, #1
 8006d98:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d9e:	2300      	movs	r3, #0
 8006da0:	9308      	str	r3, [sp, #32]
 8006da2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006da4:	461f      	mov	r7, r3
 8006da6:	220a      	movs	r2, #10
 8006da8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006daa:	7805      	ldrb	r5, [r0, #0]
 8006dac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006db0:	b2d9      	uxtb	r1, r3
 8006db2:	2909      	cmp	r1, #9
 8006db4:	d928      	bls.n	8006e08 <_strtod_l+0x1a8>
 8006db6:	494e      	ldr	r1, [pc, #312]	@ (8006ef0 <_strtod_l+0x290>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	f000 ffd5 	bl	8007d68 <strncmp>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d032      	beq.n	8006e28 <_strtod_l+0x1c8>
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	462a      	mov	r2, r5
 8006dc6:	4681      	mov	r9, r0
 8006dc8:	463d      	mov	r5, r7
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2a65      	cmp	r2, #101	@ 0x65
 8006dce:	d001      	beq.n	8006dd4 <_strtod_l+0x174>
 8006dd0:	2a45      	cmp	r2, #69	@ 0x45
 8006dd2:	d114      	bne.n	8006dfe <_strtod_l+0x19e>
 8006dd4:	b91d      	cbnz	r5, 8006dde <_strtod_l+0x17e>
 8006dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dd8:	4302      	orrs	r2, r0
 8006dda:	d095      	beq.n	8006d08 <_strtod_l+0xa8>
 8006ddc:	2500      	movs	r5, #0
 8006dde:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006de0:	1c62      	adds	r2, r4, #1
 8006de2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006de4:	7862      	ldrb	r2, [r4, #1]
 8006de6:	2a2b      	cmp	r2, #43	@ 0x2b
 8006de8:	d077      	beq.n	8006eda <_strtod_l+0x27a>
 8006dea:	2a2d      	cmp	r2, #45	@ 0x2d
 8006dec:	d07b      	beq.n	8006ee6 <_strtod_l+0x286>
 8006dee:	f04f 0c00 	mov.w	ip, #0
 8006df2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006df6:	2909      	cmp	r1, #9
 8006df8:	f240 8082 	bls.w	8006f00 <_strtod_l+0x2a0>
 8006dfc:	9419      	str	r4, [sp, #100]	@ 0x64
 8006dfe:	f04f 0800 	mov.w	r8, #0
 8006e02:	e0a2      	b.n	8006f4a <_strtod_l+0x2ea>
 8006e04:	2300      	movs	r3, #0
 8006e06:	e7c7      	b.n	8006d98 <_strtod_l+0x138>
 8006e08:	2f08      	cmp	r7, #8
 8006e0a:	bfd5      	itete	le
 8006e0c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006e0e:	9908      	ldrgt	r1, [sp, #32]
 8006e10:	fb02 3301 	mlale	r3, r2, r1, r3
 8006e14:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006e18:	f100 0001 	add.w	r0, r0, #1
 8006e1c:	bfd4      	ite	le
 8006e1e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006e20:	9308      	strgt	r3, [sp, #32]
 8006e22:	3701      	adds	r7, #1
 8006e24:	9019      	str	r0, [sp, #100]	@ 0x64
 8006e26:	e7bf      	b.n	8006da8 <_strtod_l+0x148>
 8006e28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e2e:	785a      	ldrb	r2, [r3, #1]
 8006e30:	b37f      	cbz	r7, 8006e92 <_strtod_l+0x232>
 8006e32:	4681      	mov	r9, r0
 8006e34:	463d      	mov	r5, r7
 8006e36:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006e3a:	2b09      	cmp	r3, #9
 8006e3c:	d912      	bls.n	8006e64 <_strtod_l+0x204>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e7c4      	b.n	8006dcc <_strtod_l+0x16c>
 8006e42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e48:	785a      	ldrb	r2, [r3, #1]
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	2a30      	cmp	r2, #48	@ 0x30
 8006e4e:	d0f8      	beq.n	8006e42 <_strtod_l+0x1e2>
 8006e50:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	f200 84d3 	bhi.w	8007800 <_strtod_l+0xba0>
 8006e5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e5e:	4681      	mov	r9, r0
 8006e60:	2000      	movs	r0, #0
 8006e62:	4605      	mov	r5, r0
 8006e64:	3a30      	subs	r2, #48	@ 0x30
 8006e66:	f100 0301 	add.w	r3, r0, #1
 8006e6a:	d02a      	beq.n	8006ec2 <_strtod_l+0x262>
 8006e6c:	4499      	add	r9, r3
 8006e6e:	eb00 0c05 	add.w	ip, r0, r5
 8006e72:	462b      	mov	r3, r5
 8006e74:	210a      	movs	r1, #10
 8006e76:	4563      	cmp	r3, ip
 8006e78:	d10d      	bne.n	8006e96 <_strtod_l+0x236>
 8006e7a:	1c69      	adds	r1, r5, #1
 8006e7c:	4401      	add	r1, r0
 8006e7e:	4428      	add	r0, r5
 8006e80:	2808      	cmp	r0, #8
 8006e82:	dc16      	bgt.n	8006eb2 <_strtod_l+0x252>
 8006e84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e86:	230a      	movs	r3, #10
 8006e88:	fb03 2300 	mla	r3, r3, r0, r2
 8006e8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e018      	b.n	8006ec4 <_strtod_l+0x264>
 8006e92:	4638      	mov	r0, r7
 8006e94:	e7da      	b.n	8006e4c <_strtod_l+0x1ec>
 8006e96:	2b08      	cmp	r3, #8
 8006e98:	f103 0301 	add.w	r3, r3, #1
 8006e9c:	dc03      	bgt.n	8006ea6 <_strtod_l+0x246>
 8006e9e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006ea0:	434e      	muls	r6, r1
 8006ea2:	960a      	str	r6, [sp, #40]	@ 0x28
 8006ea4:	e7e7      	b.n	8006e76 <_strtod_l+0x216>
 8006ea6:	2b10      	cmp	r3, #16
 8006ea8:	bfde      	ittt	le
 8006eaa:	9e08      	ldrle	r6, [sp, #32]
 8006eac:	434e      	mulle	r6, r1
 8006eae:	9608      	strle	r6, [sp, #32]
 8006eb0:	e7e1      	b.n	8006e76 <_strtod_l+0x216>
 8006eb2:	280f      	cmp	r0, #15
 8006eb4:	dceb      	bgt.n	8006e8e <_strtod_l+0x22e>
 8006eb6:	9808      	ldr	r0, [sp, #32]
 8006eb8:	230a      	movs	r3, #10
 8006eba:	fb03 2300 	mla	r3, r3, r0, r2
 8006ebe:	9308      	str	r3, [sp, #32]
 8006ec0:	e7e5      	b.n	8006e8e <_strtod_l+0x22e>
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006ec6:	1c50      	adds	r0, r2, #1
 8006ec8:	9019      	str	r0, [sp, #100]	@ 0x64
 8006eca:	7852      	ldrb	r2, [r2, #1]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	460d      	mov	r5, r1
 8006ed0:	e7b1      	b.n	8006e36 <_strtod_l+0x1d6>
 8006ed2:	f04f 0900 	mov.w	r9, #0
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e77d      	b.n	8006dd6 <_strtod_l+0x176>
 8006eda:	f04f 0c00 	mov.w	ip, #0
 8006ede:	1ca2      	adds	r2, r4, #2
 8006ee0:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ee2:	78a2      	ldrb	r2, [r4, #2]
 8006ee4:	e785      	b.n	8006df2 <_strtod_l+0x192>
 8006ee6:	f04f 0c01 	mov.w	ip, #1
 8006eea:	e7f8      	b.n	8006ede <_strtod_l+0x27e>
 8006eec:	0800a418 	.word	0x0800a418
 8006ef0:	0800a400 	.word	0x0800a400
 8006ef4:	7ff00000 	.word	0x7ff00000
 8006ef8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006efa:	1c51      	adds	r1, r2, #1
 8006efc:	9119      	str	r1, [sp, #100]	@ 0x64
 8006efe:	7852      	ldrb	r2, [r2, #1]
 8006f00:	2a30      	cmp	r2, #48	@ 0x30
 8006f02:	d0f9      	beq.n	8006ef8 <_strtod_l+0x298>
 8006f04:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006f08:	2908      	cmp	r1, #8
 8006f0a:	f63f af78 	bhi.w	8006dfe <_strtod_l+0x19e>
 8006f0e:	3a30      	subs	r2, #48	@ 0x30
 8006f10:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f14:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006f16:	f04f 080a 	mov.w	r8, #10
 8006f1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f1c:	1c56      	adds	r6, r2, #1
 8006f1e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006f20:	7852      	ldrb	r2, [r2, #1]
 8006f22:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006f26:	f1be 0f09 	cmp.w	lr, #9
 8006f2a:	d939      	bls.n	8006fa0 <_strtod_l+0x340>
 8006f2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006f2e:	1a76      	subs	r6, r6, r1
 8006f30:	2e08      	cmp	r6, #8
 8006f32:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006f36:	dc03      	bgt.n	8006f40 <_strtod_l+0x2e0>
 8006f38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006f3a:	4588      	cmp	r8, r1
 8006f3c:	bfa8      	it	ge
 8006f3e:	4688      	movge	r8, r1
 8006f40:	f1bc 0f00 	cmp.w	ip, #0
 8006f44:	d001      	beq.n	8006f4a <_strtod_l+0x2ea>
 8006f46:	f1c8 0800 	rsb	r8, r8, #0
 8006f4a:	2d00      	cmp	r5, #0
 8006f4c:	d14e      	bne.n	8006fec <_strtod_l+0x38c>
 8006f4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f50:	4308      	orrs	r0, r1
 8006f52:	f47f aebe 	bne.w	8006cd2 <_strtod_l+0x72>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f47f aed6 	bne.w	8006d08 <_strtod_l+0xa8>
 8006f5c:	2a69      	cmp	r2, #105	@ 0x69
 8006f5e:	d028      	beq.n	8006fb2 <_strtod_l+0x352>
 8006f60:	dc25      	bgt.n	8006fae <_strtod_l+0x34e>
 8006f62:	2a49      	cmp	r2, #73	@ 0x49
 8006f64:	d025      	beq.n	8006fb2 <_strtod_l+0x352>
 8006f66:	2a4e      	cmp	r2, #78	@ 0x4e
 8006f68:	f47f aece 	bne.w	8006d08 <_strtod_l+0xa8>
 8006f6c:	499b      	ldr	r1, [pc, #620]	@ (80071dc <_strtod_l+0x57c>)
 8006f6e:	a819      	add	r0, sp, #100	@ 0x64
 8006f70:	f001 f9de 	bl	8008330 <__match>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	f43f aec7 	beq.w	8006d08 <_strtod_l+0xa8>
 8006f7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b28      	cmp	r3, #40	@ 0x28
 8006f80:	d12e      	bne.n	8006fe0 <_strtod_l+0x380>
 8006f82:	4997      	ldr	r1, [pc, #604]	@ (80071e0 <_strtod_l+0x580>)
 8006f84:	aa1c      	add	r2, sp, #112	@ 0x70
 8006f86:	a819      	add	r0, sp, #100	@ 0x64
 8006f88:	f001 f9e6 	bl	8008358 <__hexnan>
 8006f8c:	2805      	cmp	r0, #5
 8006f8e:	d127      	bne.n	8006fe0 <_strtod_l+0x380>
 8006f90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006f92:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006f96:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006f9a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006f9e:	e698      	b.n	8006cd2 <_strtod_l+0x72>
 8006fa0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006fa2:	fb08 2101 	mla	r1, r8, r1, r2
 8006fa6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006faa:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fac:	e7b5      	b.n	8006f1a <_strtod_l+0x2ba>
 8006fae:	2a6e      	cmp	r2, #110	@ 0x6e
 8006fb0:	e7da      	b.n	8006f68 <_strtod_l+0x308>
 8006fb2:	498c      	ldr	r1, [pc, #560]	@ (80071e4 <_strtod_l+0x584>)
 8006fb4:	a819      	add	r0, sp, #100	@ 0x64
 8006fb6:	f001 f9bb 	bl	8008330 <__match>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	f43f aea4 	beq.w	8006d08 <_strtod_l+0xa8>
 8006fc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fc2:	4989      	ldr	r1, [pc, #548]	@ (80071e8 <_strtod_l+0x588>)
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	a819      	add	r0, sp, #100	@ 0x64
 8006fc8:	9319      	str	r3, [sp, #100]	@ 0x64
 8006fca:	f001 f9b1 	bl	8008330 <__match>
 8006fce:	b910      	cbnz	r0, 8006fd6 <_strtod_l+0x376>
 8006fd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	9319      	str	r3, [sp, #100]	@ 0x64
 8006fd6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80071f8 <_strtod_l+0x598>
 8006fda:	f04f 0a00 	mov.w	sl, #0
 8006fde:	e678      	b.n	8006cd2 <_strtod_l+0x72>
 8006fe0:	4882      	ldr	r0, [pc, #520]	@ (80071ec <_strtod_l+0x58c>)
 8006fe2:	f000 fee1 	bl	8007da8 <nan>
 8006fe6:	ec5b ab10 	vmov	sl, fp, d0
 8006fea:	e672      	b.n	8006cd2 <_strtod_l+0x72>
 8006fec:	eba8 0309 	sub.w	r3, r8, r9
 8006ff0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ff4:	2f00      	cmp	r7, #0
 8006ff6:	bf08      	it	eq
 8006ff8:	462f      	moveq	r7, r5
 8006ffa:	2d10      	cmp	r5, #16
 8006ffc:	462c      	mov	r4, r5
 8006ffe:	bfa8      	it	ge
 8007000:	2410      	movge	r4, #16
 8007002:	f7f9 fa87 	bl	8000514 <__aeabi_ui2d>
 8007006:	2d09      	cmp	r5, #9
 8007008:	4682      	mov	sl, r0
 800700a:	468b      	mov	fp, r1
 800700c:	dc13      	bgt.n	8007036 <_strtod_l+0x3d6>
 800700e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007010:	2b00      	cmp	r3, #0
 8007012:	f43f ae5e 	beq.w	8006cd2 <_strtod_l+0x72>
 8007016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007018:	dd78      	ble.n	800710c <_strtod_l+0x4ac>
 800701a:	2b16      	cmp	r3, #22
 800701c:	dc5f      	bgt.n	80070de <_strtod_l+0x47e>
 800701e:	4974      	ldr	r1, [pc, #464]	@ (80071f0 <_strtod_l+0x590>)
 8007020:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007028:	4652      	mov	r2, sl
 800702a:	465b      	mov	r3, fp
 800702c:	f7f9 faec 	bl	8000608 <__aeabi_dmul>
 8007030:	4682      	mov	sl, r0
 8007032:	468b      	mov	fp, r1
 8007034:	e64d      	b.n	8006cd2 <_strtod_l+0x72>
 8007036:	4b6e      	ldr	r3, [pc, #440]	@ (80071f0 <_strtod_l+0x590>)
 8007038:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800703c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007040:	f7f9 fae2 	bl	8000608 <__aeabi_dmul>
 8007044:	4682      	mov	sl, r0
 8007046:	9808      	ldr	r0, [sp, #32]
 8007048:	468b      	mov	fp, r1
 800704a:	f7f9 fa63 	bl	8000514 <__aeabi_ui2d>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4650      	mov	r0, sl
 8007054:	4659      	mov	r1, fp
 8007056:	f7f9 f921 	bl	800029c <__adddf3>
 800705a:	2d0f      	cmp	r5, #15
 800705c:	4682      	mov	sl, r0
 800705e:	468b      	mov	fp, r1
 8007060:	ddd5      	ble.n	800700e <_strtod_l+0x3ae>
 8007062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007064:	1b2c      	subs	r4, r5, r4
 8007066:	441c      	add	r4, r3
 8007068:	2c00      	cmp	r4, #0
 800706a:	f340 8096 	ble.w	800719a <_strtod_l+0x53a>
 800706e:	f014 030f 	ands.w	r3, r4, #15
 8007072:	d00a      	beq.n	800708a <_strtod_l+0x42a>
 8007074:	495e      	ldr	r1, [pc, #376]	@ (80071f0 <_strtod_l+0x590>)
 8007076:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800707a:	4652      	mov	r2, sl
 800707c:	465b      	mov	r3, fp
 800707e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007082:	f7f9 fac1 	bl	8000608 <__aeabi_dmul>
 8007086:	4682      	mov	sl, r0
 8007088:	468b      	mov	fp, r1
 800708a:	f034 040f 	bics.w	r4, r4, #15
 800708e:	d073      	beq.n	8007178 <_strtod_l+0x518>
 8007090:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007094:	dd48      	ble.n	8007128 <_strtod_l+0x4c8>
 8007096:	2400      	movs	r4, #0
 8007098:	46a0      	mov	r8, r4
 800709a:	940a      	str	r4, [sp, #40]	@ 0x28
 800709c:	46a1      	mov	r9, r4
 800709e:	9a05      	ldr	r2, [sp, #20]
 80070a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80071f8 <_strtod_l+0x598>
 80070a4:	2322      	movs	r3, #34	@ 0x22
 80070a6:	6013      	str	r3, [r2, #0]
 80070a8:	f04f 0a00 	mov.w	sl, #0
 80070ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f43f ae0f 	beq.w	8006cd2 <_strtod_l+0x72>
 80070b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070b6:	9805      	ldr	r0, [sp, #20]
 80070b8:	f7ff f940 	bl	800633c <_Bfree>
 80070bc:	9805      	ldr	r0, [sp, #20]
 80070be:	4649      	mov	r1, r9
 80070c0:	f7ff f93c 	bl	800633c <_Bfree>
 80070c4:	9805      	ldr	r0, [sp, #20]
 80070c6:	4641      	mov	r1, r8
 80070c8:	f7ff f938 	bl	800633c <_Bfree>
 80070cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070ce:	9805      	ldr	r0, [sp, #20]
 80070d0:	f7ff f934 	bl	800633c <_Bfree>
 80070d4:	9805      	ldr	r0, [sp, #20]
 80070d6:	4621      	mov	r1, r4
 80070d8:	f7ff f930 	bl	800633c <_Bfree>
 80070dc:	e5f9      	b.n	8006cd2 <_strtod_l+0x72>
 80070de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80070e4:	4293      	cmp	r3, r2
 80070e6:	dbbc      	blt.n	8007062 <_strtod_l+0x402>
 80070e8:	4c41      	ldr	r4, [pc, #260]	@ (80071f0 <_strtod_l+0x590>)
 80070ea:	f1c5 050f 	rsb	r5, r5, #15
 80070ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80070f2:	4652      	mov	r2, sl
 80070f4:	465b      	mov	r3, fp
 80070f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070fa:	f7f9 fa85 	bl	8000608 <__aeabi_dmul>
 80070fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007100:	1b5d      	subs	r5, r3, r5
 8007102:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007106:	e9d4 2300 	ldrd	r2, r3, [r4]
 800710a:	e78f      	b.n	800702c <_strtod_l+0x3cc>
 800710c:	3316      	adds	r3, #22
 800710e:	dba8      	blt.n	8007062 <_strtod_l+0x402>
 8007110:	4b37      	ldr	r3, [pc, #220]	@ (80071f0 <_strtod_l+0x590>)
 8007112:	eba9 0808 	sub.w	r8, r9, r8
 8007116:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800711a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800711e:	4650      	mov	r0, sl
 8007120:	4659      	mov	r1, fp
 8007122:	f7f9 fb9b 	bl	800085c <__aeabi_ddiv>
 8007126:	e783      	b.n	8007030 <_strtod_l+0x3d0>
 8007128:	4b32      	ldr	r3, [pc, #200]	@ (80071f4 <_strtod_l+0x594>)
 800712a:	9308      	str	r3, [sp, #32]
 800712c:	2300      	movs	r3, #0
 800712e:	1124      	asrs	r4, r4, #4
 8007130:	4650      	mov	r0, sl
 8007132:	4659      	mov	r1, fp
 8007134:	461e      	mov	r6, r3
 8007136:	2c01      	cmp	r4, #1
 8007138:	dc21      	bgt.n	800717e <_strtod_l+0x51e>
 800713a:	b10b      	cbz	r3, 8007140 <_strtod_l+0x4e0>
 800713c:	4682      	mov	sl, r0
 800713e:	468b      	mov	fp, r1
 8007140:	492c      	ldr	r1, [pc, #176]	@ (80071f4 <_strtod_l+0x594>)
 8007142:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007146:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800714a:	4652      	mov	r2, sl
 800714c:	465b      	mov	r3, fp
 800714e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007152:	f7f9 fa59 	bl	8000608 <__aeabi_dmul>
 8007156:	4b28      	ldr	r3, [pc, #160]	@ (80071f8 <_strtod_l+0x598>)
 8007158:	460a      	mov	r2, r1
 800715a:	400b      	ands	r3, r1
 800715c:	4927      	ldr	r1, [pc, #156]	@ (80071fc <_strtod_l+0x59c>)
 800715e:	428b      	cmp	r3, r1
 8007160:	4682      	mov	sl, r0
 8007162:	d898      	bhi.n	8007096 <_strtod_l+0x436>
 8007164:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007168:	428b      	cmp	r3, r1
 800716a:	bf86      	itte	hi
 800716c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007200 <_strtod_l+0x5a0>
 8007170:	f04f 3aff 	movhi.w	sl, #4294967295
 8007174:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007178:	2300      	movs	r3, #0
 800717a:	9308      	str	r3, [sp, #32]
 800717c:	e07a      	b.n	8007274 <_strtod_l+0x614>
 800717e:	07e2      	lsls	r2, r4, #31
 8007180:	d505      	bpl.n	800718e <_strtod_l+0x52e>
 8007182:	9b08      	ldr	r3, [sp, #32]
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	f7f9 fa3e 	bl	8000608 <__aeabi_dmul>
 800718c:	2301      	movs	r3, #1
 800718e:	9a08      	ldr	r2, [sp, #32]
 8007190:	3208      	adds	r2, #8
 8007192:	3601      	adds	r6, #1
 8007194:	1064      	asrs	r4, r4, #1
 8007196:	9208      	str	r2, [sp, #32]
 8007198:	e7cd      	b.n	8007136 <_strtod_l+0x4d6>
 800719a:	d0ed      	beq.n	8007178 <_strtod_l+0x518>
 800719c:	4264      	negs	r4, r4
 800719e:	f014 020f 	ands.w	r2, r4, #15
 80071a2:	d00a      	beq.n	80071ba <_strtod_l+0x55a>
 80071a4:	4b12      	ldr	r3, [pc, #72]	@ (80071f0 <_strtod_l+0x590>)
 80071a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071aa:	4650      	mov	r0, sl
 80071ac:	4659      	mov	r1, fp
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	f7f9 fb53 	bl	800085c <__aeabi_ddiv>
 80071b6:	4682      	mov	sl, r0
 80071b8:	468b      	mov	fp, r1
 80071ba:	1124      	asrs	r4, r4, #4
 80071bc:	d0dc      	beq.n	8007178 <_strtod_l+0x518>
 80071be:	2c1f      	cmp	r4, #31
 80071c0:	dd20      	ble.n	8007204 <_strtod_l+0x5a4>
 80071c2:	2400      	movs	r4, #0
 80071c4:	46a0      	mov	r8, r4
 80071c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80071c8:	46a1      	mov	r9, r4
 80071ca:	9a05      	ldr	r2, [sp, #20]
 80071cc:	2322      	movs	r3, #34	@ 0x22
 80071ce:	f04f 0a00 	mov.w	sl, #0
 80071d2:	f04f 0b00 	mov.w	fp, #0
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	e768      	b.n	80070ac <_strtod_l+0x44c>
 80071da:	bf00      	nop
 80071dc:	0800a1f1 	.word	0x0800a1f1
 80071e0:	0800a404 	.word	0x0800a404
 80071e4:	0800a1e9 	.word	0x0800a1e9
 80071e8:	0800a220 	.word	0x0800a220
 80071ec:	0800a5ad 	.word	0x0800a5ad
 80071f0:	0800a338 	.word	0x0800a338
 80071f4:	0800a310 	.word	0x0800a310
 80071f8:	7ff00000 	.word	0x7ff00000
 80071fc:	7ca00000 	.word	0x7ca00000
 8007200:	7fefffff 	.word	0x7fefffff
 8007204:	f014 0310 	ands.w	r3, r4, #16
 8007208:	bf18      	it	ne
 800720a:	236a      	movne	r3, #106	@ 0x6a
 800720c:	4ea9      	ldr	r6, [pc, #676]	@ (80074b4 <_strtod_l+0x854>)
 800720e:	9308      	str	r3, [sp, #32]
 8007210:	4650      	mov	r0, sl
 8007212:	4659      	mov	r1, fp
 8007214:	2300      	movs	r3, #0
 8007216:	07e2      	lsls	r2, r4, #31
 8007218:	d504      	bpl.n	8007224 <_strtod_l+0x5c4>
 800721a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800721e:	f7f9 f9f3 	bl	8000608 <__aeabi_dmul>
 8007222:	2301      	movs	r3, #1
 8007224:	1064      	asrs	r4, r4, #1
 8007226:	f106 0608 	add.w	r6, r6, #8
 800722a:	d1f4      	bne.n	8007216 <_strtod_l+0x5b6>
 800722c:	b10b      	cbz	r3, 8007232 <_strtod_l+0x5d2>
 800722e:	4682      	mov	sl, r0
 8007230:	468b      	mov	fp, r1
 8007232:	9b08      	ldr	r3, [sp, #32]
 8007234:	b1b3      	cbz	r3, 8007264 <_strtod_l+0x604>
 8007236:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800723a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800723e:	2b00      	cmp	r3, #0
 8007240:	4659      	mov	r1, fp
 8007242:	dd0f      	ble.n	8007264 <_strtod_l+0x604>
 8007244:	2b1f      	cmp	r3, #31
 8007246:	dd55      	ble.n	80072f4 <_strtod_l+0x694>
 8007248:	2b34      	cmp	r3, #52	@ 0x34
 800724a:	bfde      	ittt	le
 800724c:	f04f 33ff 	movle.w	r3, #4294967295
 8007250:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007254:	4093      	lslle	r3, r2
 8007256:	f04f 0a00 	mov.w	sl, #0
 800725a:	bfcc      	ite	gt
 800725c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007260:	ea03 0b01 	andle.w	fp, r3, r1
 8007264:	2200      	movs	r2, #0
 8007266:	2300      	movs	r3, #0
 8007268:	4650      	mov	r0, sl
 800726a:	4659      	mov	r1, fp
 800726c:	f7f9 fc34 	bl	8000ad8 <__aeabi_dcmpeq>
 8007270:	2800      	cmp	r0, #0
 8007272:	d1a6      	bne.n	80071c2 <_strtod_l+0x562>
 8007274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800727a:	9805      	ldr	r0, [sp, #20]
 800727c:	462b      	mov	r3, r5
 800727e:	463a      	mov	r2, r7
 8007280:	f7ff f8c4 	bl	800640c <__s2b>
 8007284:	900a      	str	r0, [sp, #40]	@ 0x28
 8007286:	2800      	cmp	r0, #0
 8007288:	f43f af05 	beq.w	8007096 <_strtod_l+0x436>
 800728c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800728e:	2a00      	cmp	r2, #0
 8007290:	eba9 0308 	sub.w	r3, r9, r8
 8007294:	bfa8      	it	ge
 8007296:	2300      	movge	r3, #0
 8007298:	9312      	str	r3, [sp, #72]	@ 0x48
 800729a:	2400      	movs	r4, #0
 800729c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80072a0:	9316      	str	r3, [sp, #88]	@ 0x58
 80072a2:	46a0      	mov	r8, r4
 80072a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072a6:	9805      	ldr	r0, [sp, #20]
 80072a8:	6859      	ldr	r1, [r3, #4]
 80072aa:	f7ff f807 	bl	80062bc <_Balloc>
 80072ae:	4681      	mov	r9, r0
 80072b0:	2800      	cmp	r0, #0
 80072b2:	f43f aef4 	beq.w	800709e <_strtod_l+0x43e>
 80072b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072b8:	691a      	ldr	r2, [r3, #16]
 80072ba:	3202      	adds	r2, #2
 80072bc:	f103 010c 	add.w	r1, r3, #12
 80072c0:	0092      	lsls	r2, r2, #2
 80072c2:	300c      	adds	r0, #12
 80072c4:	f000 fd62 	bl	8007d8c <memcpy>
 80072c8:	ec4b ab10 	vmov	d0, sl, fp
 80072cc:	9805      	ldr	r0, [sp, #20]
 80072ce:	aa1c      	add	r2, sp, #112	@ 0x70
 80072d0:	a91b      	add	r1, sp, #108	@ 0x6c
 80072d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80072d6:	f7ff fbd5 	bl	8006a84 <__d2b>
 80072da:	901a      	str	r0, [sp, #104]	@ 0x68
 80072dc:	2800      	cmp	r0, #0
 80072de:	f43f aede 	beq.w	800709e <_strtod_l+0x43e>
 80072e2:	9805      	ldr	r0, [sp, #20]
 80072e4:	2101      	movs	r1, #1
 80072e6:	f7ff f927 	bl	8006538 <__i2b>
 80072ea:	4680      	mov	r8, r0
 80072ec:	b948      	cbnz	r0, 8007302 <_strtod_l+0x6a2>
 80072ee:	f04f 0800 	mov.w	r8, #0
 80072f2:	e6d4      	b.n	800709e <_strtod_l+0x43e>
 80072f4:	f04f 32ff 	mov.w	r2, #4294967295
 80072f8:	fa02 f303 	lsl.w	r3, r2, r3
 80072fc:	ea03 0a0a 	and.w	sl, r3, sl
 8007300:	e7b0      	b.n	8007264 <_strtod_l+0x604>
 8007302:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007304:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007306:	2d00      	cmp	r5, #0
 8007308:	bfab      	itete	ge
 800730a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800730c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800730e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007310:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007312:	bfac      	ite	ge
 8007314:	18ef      	addge	r7, r5, r3
 8007316:	1b5e      	sublt	r6, r3, r5
 8007318:	9b08      	ldr	r3, [sp, #32]
 800731a:	1aed      	subs	r5, r5, r3
 800731c:	4415      	add	r5, r2
 800731e:	4b66      	ldr	r3, [pc, #408]	@ (80074b8 <_strtod_l+0x858>)
 8007320:	3d01      	subs	r5, #1
 8007322:	429d      	cmp	r5, r3
 8007324:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007328:	da50      	bge.n	80073cc <_strtod_l+0x76c>
 800732a:	1b5b      	subs	r3, r3, r5
 800732c:	2b1f      	cmp	r3, #31
 800732e:	eba2 0203 	sub.w	r2, r2, r3
 8007332:	f04f 0101 	mov.w	r1, #1
 8007336:	dc3d      	bgt.n	80073b4 <_strtod_l+0x754>
 8007338:	fa01 f303 	lsl.w	r3, r1, r3
 800733c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800733e:	2300      	movs	r3, #0
 8007340:	9310      	str	r3, [sp, #64]	@ 0x40
 8007342:	18bd      	adds	r5, r7, r2
 8007344:	9b08      	ldr	r3, [sp, #32]
 8007346:	42af      	cmp	r7, r5
 8007348:	4416      	add	r6, r2
 800734a:	441e      	add	r6, r3
 800734c:	463b      	mov	r3, r7
 800734e:	bfa8      	it	ge
 8007350:	462b      	movge	r3, r5
 8007352:	42b3      	cmp	r3, r6
 8007354:	bfa8      	it	ge
 8007356:	4633      	movge	r3, r6
 8007358:	2b00      	cmp	r3, #0
 800735a:	bfc2      	ittt	gt
 800735c:	1aed      	subgt	r5, r5, r3
 800735e:	1af6      	subgt	r6, r6, r3
 8007360:	1aff      	subgt	r7, r7, r3
 8007362:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007364:	2b00      	cmp	r3, #0
 8007366:	dd16      	ble.n	8007396 <_strtod_l+0x736>
 8007368:	4641      	mov	r1, r8
 800736a:	9805      	ldr	r0, [sp, #20]
 800736c:	461a      	mov	r2, r3
 800736e:	f7ff f9a3 	bl	80066b8 <__pow5mult>
 8007372:	4680      	mov	r8, r0
 8007374:	2800      	cmp	r0, #0
 8007376:	d0ba      	beq.n	80072ee <_strtod_l+0x68e>
 8007378:	4601      	mov	r1, r0
 800737a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800737c:	9805      	ldr	r0, [sp, #20]
 800737e:	f7ff f8f1 	bl	8006564 <__multiply>
 8007382:	900e      	str	r0, [sp, #56]	@ 0x38
 8007384:	2800      	cmp	r0, #0
 8007386:	f43f ae8a 	beq.w	800709e <_strtod_l+0x43e>
 800738a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800738c:	9805      	ldr	r0, [sp, #20]
 800738e:	f7fe ffd5 	bl	800633c <_Bfree>
 8007392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007394:	931a      	str	r3, [sp, #104]	@ 0x68
 8007396:	2d00      	cmp	r5, #0
 8007398:	dc1d      	bgt.n	80073d6 <_strtod_l+0x776>
 800739a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800739c:	2b00      	cmp	r3, #0
 800739e:	dd23      	ble.n	80073e8 <_strtod_l+0x788>
 80073a0:	4649      	mov	r1, r9
 80073a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80073a4:	9805      	ldr	r0, [sp, #20]
 80073a6:	f7ff f987 	bl	80066b8 <__pow5mult>
 80073aa:	4681      	mov	r9, r0
 80073ac:	b9e0      	cbnz	r0, 80073e8 <_strtod_l+0x788>
 80073ae:	f04f 0900 	mov.w	r9, #0
 80073b2:	e674      	b.n	800709e <_strtod_l+0x43e>
 80073b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80073b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80073bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80073c0:	35e2      	adds	r5, #226	@ 0xe2
 80073c2:	fa01 f305 	lsl.w	r3, r1, r5
 80073c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80073c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80073ca:	e7ba      	b.n	8007342 <_strtod_l+0x6e2>
 80073cc:	2300      	movs	r3, #0
 80073ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80073d0:	2301      	movs	r3, #1
 80073d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073d4:	e7b5      	b.n	8007342 <_strtod_l+0x6e2>
 80073d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80073d8:	9805      	ldr	r0, [sp, #20]
 80073da:	462a      	mov	r2, r5
 80073dc:	f7ff f9c6 	bl	800676c <__lshift>
 80073e0:	901a      	str	r0, [sp, #104]	@ 0x68
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d1d9      	bne.n	800739a <_strtod_l+0x73a>
 80073e6:	e65a      	b.n	800709e <_strtod_l+0x43e>
 80073e8:	2e00      	cmp	r6, #0
 80073ea:	dd07      	ble.n	80073fc <_strtod_l+0x79c>
 80073ec:	4649      	mov	r1, r9
 80073ee:	9805      	ldr	r0, [sp, #20]
 80073f0:	4632      	mov	r2, r6
 80073f2:	f7ff f9bb 	bl	800676c <__lshift>
 80073f6:	4681      	mov	r9, r0
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d0d8      	beq.n	80073ae <_strtod_l+0x74e>
 80073fc:	2f00      	cmp	r7, #0
 80073fe:	dd08      	ble.n	8007412 <_strtod_l+0x7b2>
 8007400:	4641      	mov	r1, r8
 8007402:	9805      	ldr	r0, [sp, #20]
 8007404:	463a      	mov	r2, r7
 8007406:	f7ff f9b1 	bl	800676c <__lshift>
 800740a:	4680      	mov	r8, r0
 800740c:	2800      	cmp	r0, #0
 800740e:	f43f ae46 	beq.w	800709e <_strtod_l+0x43e>
 8007412:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007414:	9805      	ldr	r0, [sp, #20]
 8007416:	464a      	mov	r2, r9
 8007418:	f7ff fa30 	bl	800687c <__mdiff>
 800741c:	4604      	mov	r4, r0
 800741e:	2800      	cmp	r0, #0
 8007420:	f43f ae3d 	beq.w	800709e <_strtod_l+0x43e>
 8007424:	68c3      	ldr	r3, [r0, #12]
 8007426:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007428:	2300      	movs	r3, #0
 800742a:	60c3      	str	r3, [r0, #12]
 800742c:	4641      	mov	r1, r8
 800742e:	f7ff fa09 	bl	8006844 <__mcmp>
 8007432:	2800      	cmp	r0, #0
 8007434:	da46      	bge.n	80074c4 <_strtod_l+0x864>
 8007436:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007438:	ea53 030a 	orrs.w	r3, r3, sl
 800743c:	d16c      	bne.n	8007518 <_strtod_l+0x8b8>
 800743e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007442:	2b00      	cmp	r3, #0
 8007444:	d168      	bne.n	8007518 <_strtod_l+0x8b8>
 8007446:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800744a:	0d1b      	lsrs	r3, r3, #20
 800744c:	051b      	lsls	r3, r3, #20
 800744e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007452:	d961      	bls.n	8007518 <_strtod_l+0x8b8>
 8007454:	6963      	ldr	r3, [r4, #20]
 8007456:	b913      	cbnz	r3, 800745e <_strtod_l+0x7fe>
 8007458:	6923      	ldr	r3, [r4, #16]
 800745a:	2b01      	cmp	r3, #1
 800745c:	dd5c      	ble.n	8007518 <_strtod_l+0x8b8>
 800745e:	4621      	mov	r1, r4
 8007460:	2201      	movs	r2, #1
 8007462:	9805      	ldr	r0, [sp, #20]
 8007464:	f7ff f982 	bl	800676c <__lshift>
 8007468:	4641      	mov	r1, r8
 800746a:	4604      	mov	r4, r0
 800746c:	f7ff f9ea 	bl	8006844 <__mcmp>
 8007470:	2800      	cmp	r0, #0
 8007472:	dd51      	ble.n	8007518 <_strtod_l+0x8b8>
 8007474:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007478:	9a08      	ldr	r2, [sp, #32]
 800747a:	0d1b      	lsrs	r3, r3, #20
 800747c:	051b      	lsls	r3, r3, #20
 800747e:	2a00      	cmp	r2, #0
 8007480:	d06b      	beq.n	800755a <_strtod_l+0x8fa>
 8007482:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007486:	d868      	bhi.n	800755a <_strtod_l+0x8fa>
 8007488:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800748c:	f67f ae9d 	bls.w	80071ca <_strtod_l+0x56a>
 8007490:	4b0a      	ldr	r3, [pc, #40]	@ (80074bc <_strtod_l+0x85c>)
 8007492:	4650      	mov	r0, sl
 8007494:	4659      	mov	r1, fp
 8007496:	2200      	movs	r2, #0
 8007498:	f7f9 f8b6 	bl	8000608 <__aeabi_dmul>
 800749c:	4b08      	ldr	r3, [pc, #32]	@ (80074c0 <_strtod_l+0x860>)
 800749e:	400b      	ands	r3, r1
 80074a0:	4682      	mov	sl, r0
 80074a2:	468b      	mov	fp, r1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f47f ae05 	bne.w	80070b4 <_strtod_l+0x454>
 80074aa:	9a05      	ldr	r2, [sp, #20]
 80074ac:	2322      	movs	r3, #34	@ 0x22
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	e600      	b.n	80070b4 <_strtod_l+0x454>
 80074b2:	bf00      	nop
 80074b4:	0800a430 	.word	0x0800a430
 80074b8:	fffffc02 	.word	0xfffffc02
 80074bc:	39500000 	.word	0x39500000
 80074c0:	7ff00000 	.word	0x7ff00000
 80074c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80074c8:	d165      	bne.n	8007596 <_strtod_l+0x936>
 80074ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80074cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074d0:	b35a      	cbz	r2, 800752a <_strtod_l+0x8ca>
 80074d2:	4a9f      	ldr	r2, [pc, #636]	@ (8007750 <_strtod_l+0xaf0>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d12b      	bne.n	8007530 <_strtod_l+0x8d0>
 80074d8:	9b08      	ldr	r3, [sp, #32]
 80074da:	4651      	mov	r1, sl
 80074dc:	b303      	cbz	r3, 8007520 <_strtod_l+0x8c0>
 80074de:	4b9d      	ldr	r3, [pc, #628]	@ (8007754 <_strtod_l+0xaf4>)
 80074e0:	465a      	mov	r2, fp
 80074e2:	4013      	ands	r3, r2
 80074e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80074e8:	f04f 32ff 	mov.w	r2, #4294967295
 80074ec:	d81b      	bhi.n	8007526 <_strtod_l+0x8c6>
 80074ee:	0d1b      	lsrs	r3, r3, #20
 80074f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80074f4:	fa02 f303 	lsl.w	r3, r2, r3
 80074f8:	4299      	cmp	r1, r3
 80074fa:	d119      	bne.n	8007530 <_strtod_l+0x8d0>
 80074fc:	4b96      	ldr	r3, [pc, #600]	@ (8007758 <_strtod_l+0xaf8>)
 80074fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007500:	429a      	cmp	r2, r3
 8007502:	d102      	bne.n	800750a <_strtod_l+0x8aa>
 8007504:	3101      	adds	r1, #1
 8007506:	f43f adca 	beq.w	800709e <_strtod_l+0x43e>
 800750a:	4b92      	ldr	r3, [pc, #584]	@ (8007754 <_strtod_l+0xaf4>)
 800750c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800750e:	401a      	ands	r2, r3
 8007510:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007514:	f04f 0a00 	mov.w	sl, #0
 8007518:	9b08      	ldr	r3, [sp, #32]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1b8      	bne.n	8007490 <_strtod_l+0x830>
 800751e:	e5c9      	b.n	80070b4 <_strtod_l+0x454>
 8007520:	f04f 33ff 	mov.w	r3, #4294967295
 8007524:	e7e8      	b.n	80074f8 <_strtod_l+0x898>
 8007526:	4613      	mov	r3, r2
 8007528:	e7e6      	b.n	80074f8 <_strtod_l+0x898>
 800752a:	ea53 030a 	orrs.w	r3, r3, sl
 800752e:	d0a1      	beq.n	8007474 <_strtod_l+0x814>
 8007530:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007532:	b1db      	cbz	r3, 800756c <_strtod_l+0x90c>
 8007534:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007536:	4213      	tst	r3, r2
 8007538:	d0ee      	beq.n	8007518 <_strtod_l+0x8b8>
 800753a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800753c:	9a08      	ldr	r2, [sp, #32]
 800753e:	4650      	mov	r0, sl
 8007540:	4659      	mov	r1, fp
 8007542:	b1bb      	cbz	r3, 8007574 <_strtod_l+0x914>
 8007544:	f7ff fb6c 	bl	8006c20 <sulp>
 8007548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800754c:	ec53 2b10 	vmov	r2, r3, d0
 8007550:	f7f8 fea4 	bl	800029c <__adddf3>
 8007554:	4682      	mov	sl, r0
 8007556:	468b      	mov	fp, r1
 8007558:	e7de      	b.n	8007518 <_strtod_l+0x8b8>
 800755a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800755e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007562:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007566:	f04f 3aff 	mov.w	sl, #4294967295
 800756a:	e7d5      	b.n	8007518 <_strtod_l+0x8b8>
 800756c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800756e:	ea13 0f0a 	tst.w	r3, sl
 8007572:	e7e1      	b.n	8007538 <_strtod_l+0x8d8>
 8007574:	f7ff fb54 	bl	8006c20 <sulp>
 8007578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800757c:	ec53 2b10 	vmov	r2, r3, d0
 8007580:	f7f8 fe8a 	bl	8000298 <__aeabi_dsub>
 8007584:	2200      	movs	r2, #0
 8007586:	2300      	movs	r3, #0
 8007588:	4682      	mov	sl, r0
 800758a:	468b      	mov	fp, r1
 800758c:	f7f9 faa4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007590:	2800      	cmp	r0, #0
 8007592:	d0c1      	beq.n	8007518 <_strtod_l+0x8b8>
 8007594:	e619      	b.n	80071ca <_strtod_l+0x56a>
 8007596:	4641      	mov	r1, r8
 8007598:	4620      	mov	r0, r4
 800759a:	f7ff facb 	bl	8006b34 <__ratio>
 800759e:	ec57 6b10 	vmov	r6, r7, d0
 80075a2:	2200      	movs	r2, #0
 80075a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80075a8:	4630      	mov	r0, r6
 80075aa:	4639      	mov	r1, r7
 80075ac:	f7f9 faa8 	bl	8000b00 <__aeabi_dcmple>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	d06f      	beq.n	8007694 <_strtod_l+0xa34>
 80075b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d17a      	bne.n	80076b0 <_strtod_l+0xa50>
 80075ba:	f1ba 0f00 	cmp.w	sl, #0
 80075be:	d158      	bne.n	8007672 <_strtod_l+0xa12>
 80075c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d15a      	bne.n	8007680 <_strtod_l+0xa20>
 80075ca:	4b64      	ldr	r3, [pc, #400]	@ (800775c <_strtod_l+0xafc>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	4630      	mov	r0, r6
 80075d0:	4639      	mov	r1, r7
 80075d2:	f7f9 fa8b 	bl	8000aec <__aeabi_dcmplt>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	d159      	bne.n	800768e <_strtod_l+0xa2e>
 80075da:	4630      	mov	r0, r6
 80075dc:	4639      	mov	r1, r7
 80075de:	4b60      	ldr	r3, [pc, #384]	@ (8007760 <_strtod_l+0xb00>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	f7f9 f811 	bl	8000608 <__aeabi_dmul>
 80075e6:	4606      	mov	r6, r0
 80075e8:	460f      	mov	r7, r1
 80075ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80075ee:	9606      	str	r6, [sp, #24]
 80075f0:	9307      	str	r3, [sp, #28]
 80075f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075f6:	4d57      	ldr	r5, [pc, #348]	@ (8007754 <_strtod_l+0xaf4>)
 80075f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80075fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075fe:	401d      	ands	r5, r3
 8007600:	4b58      	ldr	r3, [pc, #352]	@ (8007764 <_strtod_l+0xb04>)
 8007602:	429d      	cmp	r5, r3
 8007604:	f040 80b2 	bne.w	800776c <_strtod_l+0xb0c>
 8007608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800760a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800760e:	ec4b ab10 	vmov	d0, sl, fp
 8007612:	f7ff f9c7 	bl	80069a4 <__ulp>
 8007616:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800761a:	ec51 0b10 	vmov	r0, r1, d0
 800761e:	f7f8 fff3 	bl	8000608 <__aeabi_dmul>
 8007622:	4652      	mov	r2, sl
 8007624:	465b      	mov	r3, fp
 8007626:	f7f8 fe39 	bl	800029c <__adddf3>
 800762a:	460b      	mov	r3, r1
 800762c:	4949      	ldr	r1, [pc, #292]	@ (8007754 <_strtod_l+0xaf4>)
 800762e:	4a4e      	ldr	r2, [pc, #312]	@ (8007768 <_strtod_l+0xb08>)
 8007630:	4019      	ands	r1, r3
 8007632:	4291      	cmp	r1, r2
 8007634:	4682      	mov	sl, r0
 8007636:	d942      	bls.n	80076be <_strtod_l+0xa5e>
 8007638:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800763a:	4b47      	ldr	r3, [pc, #284]	@ (8007758 <_strtod_l+0xaf8>)
 800763c:	429a      	cmp	r2, r3
 800763e:	d103      	bne.n	8007648 <_strtod_l+0x9e8>
 8007640:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007642:	3301      	adds	r3, #1
 8007644:	f43f ad2b 	beq.w	800709e <_strtod_l+0x43e>
 8007648:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007758 <_strtod_l+0xaf8>
 800764c:	f04f 3aff 	mov.w	sl, #4294967295
 8007650:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007652:	9805      	ldr	r0, [sp, #20]
 8007654:	f7fe fe72 	bl	800633c <_Bfree>
 8007658:	9805      	ldr	r0, [sp, #20]
 800765a:	4649      	mov	r1, r9
 800765c:	f7fe fe6e 	bl	800633c <_Bfree>
 8007660:	9805      	ldr	r0, [sp, #20]
 8007662:	4641      	mov	r1, r8
 8007664:	f7fe fe6a 	bl	800633c <_Bfree>
 8007668:	9805      	ldr	r0, [sp, #20]
 800766a:	4621      	mov	r1, r4
 800766c:	f7fe fe66 	bl	800633c <_Bfree>
 8007670:	e618      	b.n	80072a4 <_strtod_l+0x644>
 8007672:	f1ba 0f01 	cmp.w	sl, #1
 8007676:	d103      	bne.n	8007680 <_strtod_l+0xa20>
 8007678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800767a:	2b00      	cmp	r3, #0
 800767c:	f43f ada5 	beq.w	80071ca <_strtod_l+0x56a>
 8007680:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007730 <_strtod_l+0xad0>
 8007684:	4f35      	ldr	r7, [pc, #212]	@ (800775c <_strtod_l+0xafc>)
 8007686:	ed8d 7b06 	vstr	d7, [sp, #24]
 800768a:	2600      	movs	r6, #0
 800768c:	e7b1      	b.n	80075f2 <_strtod_l+0x992>
 800768e:	4f34      	ldr	r7, [pc, #208]	@ (8007760 <_strtod_l+0xb00>)
 8007690:	2600      	movs	r6, #0
 8007692:	e7aa      	b.n	80075ea <_strtod_l+0x98a>
 8007694:	4b32      	ldr	r3, [pc, #200]	@ (8007760 <_strtod_l+0xb00>)
 8007696:	4630      	mov	r0, r6
 8007698:	4639      	mov	r1, r7
 800769a:	2200      	movs	r2, #0
 800769c:	f7f8 ffb4 	bl	8000608 <__aeabi_dmul>
 80076a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076a2:	4606      	mov	r6, r0
 80076a4:	460f      	mov	r7, r1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d09f      	beq.n	80075ea <_strtod_l+0x98a>
 80076aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80076ae:	e7a0      	b.n	80075f2 <_strtod_l+0x992>
 80076b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007738 <_strtod_l+0xad8>
 80076b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80076b8:	ec57 6b17 	vmov	r6, r7, d7
 80076bc:	e799      	b.n	80075f2 <_strtod_l+0x992>
 80076be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80076c2:	9b08      	ldr	r3, [sp, #32]
 80076c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1c1      	bne.n	8007650 <_strtod_l+0x9f0>
 80076cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80076d0:	0d1b      	lsrs	r3, r3, #20
 80076d2:	051b      	lsls	r3, r3, #20
 80076d4:	429d      	cmp	r5, r3
 80076d6:	d1bb      	bne.n	8007650 <_strtod_l+0x9f0>
 80076d8:	4630      	mov	r0, r6
 80076da:	4639      	mov	r1, r7
 80076dc:	f7f9 faf4 	bl	8000cc8 <__aeabi_d2lz>
 80076e0:	f7f8 ff64 	bl	80005ac <__aeabi_l2d>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4630      	mov	r0, r6
 80076ea:	4639      	mov	r1, r7
 80076ec:	f7f8 fdd4 	bl	8000298 <__aeabi_dsub>
 80076f0:	460b      	mov	r3, r1
 80076f2:	4602      	mov	r2, r0
 80076f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80076f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80076fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076fe:	ea46 060a 	orr.w	r6, r6, sl
 8007702:	431e      	orrs	r6, r3
 8007704:	d06f      	beq.n	80077e6 <_strtod_l+0xb86>
 8007706:	a30e      	add	r3, pc, #56	@ (adr r3, 8007740 <_strtod_l+0xae0>)
 8007708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770c:	f7f9 f9ee 	bl	8000aec <__aeabi_dcmplt>
 8007710:	2800      	cmp	r0, #0
 8007712:	f47f accf 	bne.w	80070b4 <_strtod_l+0x454>
 8007716:	a30c      	add	r3, pc, #48	@ (adr r3, 8007748 <_strtod_l+0xae8>)
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007720:	f7f9 fa02 	bl	8000b28 <__aeabi_dcmpgt>
 8007724:	2800      	cmp	r0, #0
 8007726:	d093      	beq.n	8007650 <_strtod_l+0x9f0>
 8007728:	e4c4      	b.n	80070b4 <_strtod_l+0x454>
 800772a:	bf00      	nop
 800772c:	f3af 8000 	nop.w
 8007730:	00000000 	.word	0x00000000
 8007734:	bff00000 	.word	0xbff00000
 8007738:	00000000 	.word	0x00000000
 800773c:	3ff00000 	.word	0x3ff00000
 8007740:	94a03595 	.word	0x94a03595
 8007744:	3fdfffff 	.word	0x3fdfffff
 8007748:	35afe535 	.word	0x35afe535
 800774c:	3fe00000 	.word	0x3fe00000
 8007750:	000fffff 	.word	0x000fffff
 8007754:	7ff00000 	.word	0x7ff00000
 8007758:	7fefffff 	.word	0x7fefffff
 800775c:	3ff00000 	.word	0x3ff00000
 8007760:	3fe00000 	.word	0x3fe00000
 8007764:	7fe00000 	.word	0x7fe00000
 8007768:	7c9fffff 	.word	0x7c9fffff
 800776c:	9b08      	ldr	r3, [sp, #32]
 800776e:	b323      	cbz	r3, 80077ba <_strtod_l+0xb5a>
 8007770:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007774:	d821      	bhi.n	80077ba <_strtod_l+0xb5a>
 8007776:	a328      	add	r3, pc, #160	@ (adr r3, 8007818 <_strtod_l+0xbb8>)
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	4630      	mov	r0, r6
 800777e:	4639      	mov	r1, r7
 8007780:	f7f9 f9be 	bl	8000b00 <__aeabi_dcmple>
 8007784:	b1a0      	cbz	r0, 80077b0 <_strtod_l+0xb50>
 8007786:	4639      	mov	r1, r7
 8007788:	4630      	mov	r0, r6
 800778a:	f7f9 fa15 	bl	8000bb8 <__aeabi_d2uiz>
 800778e:	2801      	cmp	r0, #1
 8007790:	bf38      	it	cc
 8007792:	2001      	movcc	r0, #1
 8007794:	f7f8 febe 	bl	8000514 <__aeabi_ui2d>
 8007798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800779a:	4606      	mov	r6, r0
 800779c:	460f      	mov	r7, r1
 800779e:	b9fb      	cbnz	r3, 80077e0 <_strtod_l+0xb80>
 80077a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80077a4:	9014      	str	r0, [sp, #80]	@ 0x50
 80077a6:	9315      	str	r3, [sp, #84]	@ 0x54
 80077a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80077ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80077b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80077b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80077b6:	1b5b      	subs	r3, r3, r5
 80077b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80077ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80077be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80077c2:	f7ff f8ef 	bl	80069a4 <__ulp>
 80077c6:	4650      	mov	r0, sl
 80077c8:	ec53 2b10 	vmov	r2, r3, d0
 80077cc:	4659      	mov	r1, fp
 80077ce:	f7f8 ff1b 	bl	8000608 <__aeabi_dmul>
 80077d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80077d6:	f7f8 fd61 	bl	800029c <__adddf3>
 80077da:	4682      	mov	sl, r0
 80077dc:	468b      	mov	fp, r1
 80077de:	e770      	b.n	80076c2 <_strtod_l+0xa62>
 80077e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80077e4:	e7e0      	b.n	80077a8 <_strtod_l+0xb48>
 80077e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007820 <_strtod_l+0xbc0>)
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	f7f9 f97e 	bl	8000aec <__aeabi_dcmplt>
 80077f0:	e798      	b.n	8007724 <_strtod_l+0xac4>
 80077f2:	2300      	movs	r3, #0
 80077f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80077f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	f7ff ba6d 	b.w	8006cda <_strtod_l+0x7a>
 8007800:	2a65      	cmp	r2, #101	@ 0x65
 8007802:	f43f ab66 	beq.w	8006ed2 <_strtod_l+0x272>
 8007806:	2a45      	cmp	r2, #69	@ 0x45
 8007808:	f43f ab63 	beq.w	8006ed2 <_strtod_l+0x272>
 800780c:	2301      	movs	r3, #1
 800780e:	f7ff bb9e 	b.w	8006f4e <_strtod_l+0x2ee>
 8007812:	bf00      	nop
 8007814:	f3af 8000 	nop.w
 8007818:	ffc00000 	.word	0xffc00000
 800781c:	41dfffff 	.word	0x41dfffff
 8007820:	94a03595 	.word	0x94a03595
 8007824:	3fcfffff 	.word	0x3fcfffff

08007828 <_strtod_r>:
 8007828:	4b01      	ldr	r3, [pc, #4]	@ (8007830 <_strtod_r+0x8>)
 800782a:	f7ff ba19 	b.w	8006c60 <_strtod_l>
 800782e:	bf00      	nop
 8007830:	20003568 	.word	0x20003568

08007834 <_strtol_l.constprop.0>:
 8007834:	2b24      	cmp	r3, #36	@ 0x24
 8007836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800783a:	4686      	mov	lr, r0
 800783c:	4690      	mov	r8, r2
 800783e:	d801      	bhi.n	8007844 <_strtol_l.constprop.0+0x10>
 8007840:	2b01      	cmp	r3, #1
 8007842:	d106      	bne.n	8007852 <_strtol_l.constprop.0+0x1e>
 8007844:	f7fd fe6e 	bl	8005524 <__errno>
 8007848:	2316      	movs	r3, #22
 800784a:	6003      	str	r3, [r0, #0]
 800784c:	2000      	movs	r0, #0
 800784e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007852:	4834      	ldr	r0, [pc, #208]	@ (8007924 <_strtol_l.constprop.0+0xf0>)
 8007854:	460d      	mov	r5, r1
 8007856:	462a      	mov	r2, r5
 8007858:	f815 4b01 	ldrb.w	r4, [r5], #1
 800785c:	5d06      	ldrb	r6, [r0, r4]
 800785e:	f016 0608 	ands.w	r6, r6, #8
 8007862:	d1f8      	bne.n	8007856 <_strtol_l.constprop.0+0x22>
 8007864:	2c2d      	cmp	r4, #45	@ 0x2d
 8007866:	d12d      	bne.n	80078c4 <_strtol_l.constprop.0+0x90>
 8007868:	782c      	ldrb	r4, [r5, #0]
 800786a:	2601      	movs	r6, #1
 800786c:	1c95      	adds	r5, r2, #2
 800786e:	f033 0210 	bics.w	r2, r3, #16
 8007872:	d109      	bne.n	8007888 <_strtol_l.constprop.0+0x54>
 8007874:	2c30      	cmp	r4, #48	@ 0x30
 8007876:	d12a      	bne.n	80078ce <_strtol_l.constprop.0+0x9a>
 8007878:	782a      	ldrb	r2, [r5, #0]
 800787a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800787e:	2a58      	cmp	r2, #88	@ 0x58
 8007880:	d125      	bne.n	80078ce <_strtol_l.constprop.0+0x9a>
 8007882:	786c      	ldrb	r4, [r5, #1]
 8007884:	2310      	movs	r3, #16
 8007886:	3502      	adds	r5, #2
 8007888:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800788c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007890:	2200      	movs	r2, #0
 8007892:	fbbc f9f3 	udiv	r9, ip, r3
 8007896:	4610      	mov	r0, r2
 8007898:	fb03 ca19 	mls	sl, r3, r9, ip
 800789c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80078a0:	2f09      	cmp	r7, #9
 80078a2:	d81b      	bhi.n	80078dc <_strtol_l.constprop.0+0xa8>
 80078a4:	463c      	mov	r4, r7
 80078a6:	42a3      	cmp	r3, r4
 80078a8:	dd27      	ble.n	80078fa <_strtol_l.constprop.0+0xc6>
 80078aa:	1c57      	adds	r7, r2, #1
 80078ac:	d007      	beq.n	80078be <_strtol_l.constprop.0+0x8a>
 80078ae:	4581      	cmp	r9, r0
 80078b0:	d320      	bcc.n	80078f4 <_strtol_l.constprop.0+0xc0>
 80078b2:	d101      	bne.n	80078b8 <_strtol_l.constprop.0+0x84>
 80078b4:	45a2      	cmp	sl, r4
 80078b6:	db1d      	blt.n	80078f4 <_strtol_l.constprop.0+0xc0>
 80078b8:	fb00 4003 	mla	r0, r0, r3, r4
 80078bc:	2201      	movs	r2, #1
 80078be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078c2:	e7eb      	b.n	800789c <_strtol_l.constprop.0+0x68>
 80078c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80078c6:	bf04      	itt	eq
 80078c8:	782c      	ldrbeq	r4, [r5, #0]
 80078ca:	1c95      	addeq	r5, r2, #2
 80078cc:	e7cf      	b.n	800786e <_strtol_l.constprop.0+0x3a>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1da      	bne.n	8007888 <_strtol_l.constprop.0+0x54>
 80078d2:	2c30      	cmp	r4, #48	@ 0x30
 80078d4:	bf0c      	ite	eq
 80078d6:	2308      	moveq	r3, #8
 80078d8:	230a      	movne	r3, #10
 80078da:	e7d5      	b.n	8007888 <_strtol_l.constprop.0+0x54>
 80078dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80078e0:	2f19      	cmp	r7, #25
 80078e2:	d801      	bhi.n	80078e8 <_strtol_l.constprop.0+0xb4>
 80078e4:	3c37      	subs	r4, #55	@ 0x37
 80078e6:	e7de      	b.n	80078a6 <_strtol_l.constprop.0+0x72>
 80078e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80078ec:	2f19      	cmp	r7, #25
 80078ee:	d804      	bhi.n	80078fa <_strtol_l.constprop.0+0xc6>
 80078f0:	3c57      	subs	r4, #87	@ 0x57
 80078f2:	e7d8      	b.n	80078a6 <_strtol_l.constprop.0+0x72>
 80078f4:	f04f 32ff 	mov.w	r2, #4294967295
 80078f8:	e7e1      	b.n	80078be <_strtol_l.constprop.0+0x8a>
 80078fa:	1c53      	adds	r3, r2, #1
 80078fc:	d108      	bne.n	8007910 <_strtol_l.constprop.0+0xdc>
 80078fe:	2322      	movs	r3, #34	@ 0x22
 8007900:	f8ce 3000 	str.w	r3, [lr]
 8007904:	4660      	mov	r0, ip
 8007906:	f1b8 0f00 	cmp.w	r8, #0
 800790a:	d0a0      	beq.n	800784e <_strtol_l.constprop.0+0x1a>
 800790c:	1e69      	subs	r1, r5, #1
 800790e:	e006      	b.n	800791e <_strtol_l.constprop.0+0xea>
 8007910:	b106      	cbz	r6, 8007914 <_strtol_l.constprop.0+0xe0>
 8007912:	4240      	negs	r0, r0
 8007914:	f1b8 0f00 	cmp.w	r8, #0
 8007918:	d099      	beq.n	800784e <_strtol_l.constprop.0+0x1a>
 800791a:	2a00      	cmp	r2, #0
 800791c:	d1f6      	bne.n	800790c <_strtol_l.constprop.0+0xd8>
 800791e:	f8c8 1000 	str.w	r1, [r8]
 8007922:	e794      	b.n	800784e <_strtol_l.constprop.0+0x1a>
 8007924:	0800a459 	.word	0x0800a459

08007928 <_strtol_r>:
 8007928:	f7ff bf84 	b.w	8007834 <_strtol_l.constprop.0>

0800792c <__ssputs_r>:
 800792c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007930:	688e      	ldr	r6, [r1, #8]
 8007932:	461f      	mov	r7, r3
 8007934:	42be      	cmp	r6, r7
 8007936:	680b      	ldr	r3, [r1, #0]
 8007938:	4682      	mov	sl, r0
 800793a:	460c      	mov	r4, r1
 800793c:	4690      	mov	r8, r2
 800793e:	d82d      	bhi.n	800799c <__ssputs_r+0x70>
 8007940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007948:	d026      	beq.n	8007998 <__ssputs_r+0x6c>
 800794a:	6965      	ldr	r5, [r4, #20]
 800794c:	6909      	ldr	r1, [r1, #16]
 800794e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007952:	eba3 0901 	sub.w	r9, r3, r1
 8007956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800795a:	1c7b      	adds	r3, r7, #1
 800795c:	444b      	add	r3, r9
 800795e:	106d      	asrs	r5, r5, #1
 8007960:	429d      	cmp	r5, r3
 8007962:	bf38      	it	cc
 8007964:	461d      	movcc	r5, r3
 8007966:	0553      	lsls	r3, r2, #21
 8007968:	d527      	bpl.n	80079ba <__ssputs_r+0x8e>
 800796a:	4629      	mov	r1, r5
 800796c:	f7fc fd5a 	bl	8004424 <_malloc_r>
 8007970:	4606      	mov	r6, r0
 8007972:	b360      	cbz	r0, 80079ce <__ssputs_r+0xa2>
 8007974:	6921      	ldr	r1, [r4, #16]
 8007976:	464a      	mov	r2, r9
 8007978:	f000 fa08 	bl	8007d8c <memcpy>
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007986:	81a3      	strh	r3, [r4, #12]
 8007988:	6126      	str	r6, [r4, #16]
 800798a:	6165      	str	r5, [r4, #20]
 800798c:	444e      	add	r6, r9
 800798e:	eba5 0509 	sub.w	r5, r5, r9
 8007992:	6026      	str	r6, [r4, #0]
 8007994:	60a5      	str	r5, [r4, #8]
 8007996:	463e      	mov	r6, r7
 8007998:	42be      	cmp	r6, r7
 800799a:	d900      	bls.n	800799e <__ssputs_r+0x72>
 800799c:	463e      	mov	r6, r7
 800799e:	6820      	ldr	r0, [r4, #0]
 80079a0:	4632      	mov	r2, r6
 80079a2:	4641      	mov	r1, r8
 80079a4:	f000 f9c6 	bl	8007d34 <memmove>
 80079a8:	68a3      	ldr	r3, [r4, #8]
 80079aa:	1b9b      	subs	r3, r3, r6
 80079ac:	60a3      	str	r3, [r4, #8]
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	4433      	add	r3, r6
 80079b2:	6023      	str	r3, [r4, #0]
 80079b4:	2000      	movs	r0, #0
 80079b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ba:	462a      	mov	r2, r5
 80079bc:	f000 fd79 	bl	80084b2 <_realloc_r>
 80079c0:	4606      	mov	r6, r0
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d1e0      	bne.n	8007988 <__ssputs_r+0x5c>
 80079c6:	6921      	ldr	r1, [r4, #16]
 80079c8:	4650      	mov	r0, sl
 80079ca:	f7fe fc2d 	bl	8006228 <_free_r>
 80079ce:	230c      	movs	r3, #12
 80079d0:	f8ca 3000 	str.w	r3, [sl]
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079da:	81a3      	strh	r3, [r4, #12]
 80079dc:	f04f 30ff 	mov.w	r0, #4294967295
 80079e0:	e7e9      	b.n	80079b6 <__ssputs_r+0x8a>
	...

080079e4 <_svfiprintf_r>:
 80079e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	4698      	mov	r8, r3
 80079ea:	898b      	ldrh	r3, [r1, #12]
 80079ec:	061b      	lsls	r3, r3, #24
 80079ee:	b09d      	sub	sp, #116	@ 0x74
 80079f0:	4607      	mov	r7, r0
 80079f2:	460d      	mov	r5, r1
 80079f4:	4614      	mov	r4, r2
 80079f6:	d510      	bpl.n	8007a1a <_svfiprintf_r+0x36>
 80079f8:	690b      	ldr	r3, [r1, #16]
 80079fa:	b973      	cbnz	r3, 8007a1a <_svfiprintf_r+0x36>
 80079fc:	2140      	movs	r1, #64	@ 0x40
 80079fe:	f7fc fd11 	bl	8004424 <_malloc_r>
 8007a02:	6028      	str	r0, [r5, #0]
 8007a04:	6128      	str	r0, [r5, #16]
 8007a06:	b930      	cbnz	r0, 8007a16 <_svfiprintf_r+0x32>
 8007a08:	230c      	movs	r3, #12
 8007a0a:	603b      	str	r3, [r7, #0]
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a10:	b01d      	add	sp, #116	@ 0x74
 8007a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a16:	2340      	movs	r3, #64	@ 0x40
 8007a18:	616b      	str	r3, [r5, #20]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a1e:	2320      	movs	r3, #32
 8007a20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a24:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a28:	2330      	movs	r3, #48	@ 0x30
 8007a2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007bc8 <_svfiprintf_r+0x1e4>
 8007a2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a32:	f04f 0901 	mov.w	r9, #1
 8007a36:	4623      	mov	r3, r4
 8007a38:	469a      	mov	sl, r3
 8007a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a3e:	b10a      	cbz	r2, 8007a44 <_svfiprintf_r+0x60>
 8007a40:	2a25      	cmp	r2, #37	@ 0x25
 8007a42:	d1f9      	bne.n	8007a38 <_svfiprintf_r+0x54>
 8007a44:	ebba 0b04 	subs.w	fp, sl, r4
 8007a48:	d00b      	beq.n	8007a62 <_svfiprintf_r+0x7e>
 8007a4a:	465b      	mov	r3, fp
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	4629      	mov	r1, r5
 8007a50:	4638      	mov	r0, r7
 8007a52:	f7ff ff6b 	bl	800792c <__ssputs_r>
 8007a56:	3001      	adds	r0, #1
 8007a58:	f000 80a7 	beq.w	8007baa <_svfiprintf_r+0x1c6>
 8007a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a5e:	445a      	add	r2, fp
 8007a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a62:	f89a 3000 	ldrb.w	r3, [sl]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 809f 	beq.w	8007baa <_svfiprintf_r+0x1c6>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a76:	f10a 0a01 	add.w	sl, sl, #1
 8007a7a:	9304      	str	r3, [sp, #16]
 8007a7c:	9307      	str	r3, [sp, #28]
 8007a7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a82:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a84:	4654      	mov	r4, sl
 8007a86:	2205      	movs	r2, #5
 8007a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a8c:	484e      	ldr	r0, [pc, #312]	@ (8007bc8 <_svfiprintf_r+0x1e4>)
 8007a8e:	f7f8 fba7 	bl	80001e0 <memchr>
 8007a92:	9a04      	ldr	r2, [sp, #16]
 8007a94:	b9d8      	cbnz	r0, 8007ace <_svfiprintf_r+0xea>
 8007a96:	06d0      	lsls	r0, r2, #27
 8007a98:	bf44      	itt	mi
 8007a9a:	2320      	movmi	r3, #32
 8007a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007aa0:	0711      	lsls	r1, r2, #28
 8007aa2:	bf44      	itt	mi
 8007aa4:	232b      	movmi	r3, #43	@ 0x2b
 8007aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8007aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ab0:	d015      	beq.n	8007ade <_svfiprintf_r+0xfa>
 8007ab2:	9a07      	ldr	r2, [sp, #28]
 8007ab4:	4654      	mov	r4, sl
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	f04f 0c0a 	mov.w	ip, #10
 8007abc:	4621      	mov	r1, r4
 8007abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ac2:	3b30      	subs	r3, #48	@ 0x30
 8007ac4:	2b09      	cmp	r3, #9
 8007ac6:	d94b      	bls.n	8007b60 <_svfiprintf_r+0x17c>
 8007ac8:	b1b0      	cbz	r0, 8007af8 <_svfiprintf_r+0x114>
 8007aca:	9207      	str	r2, [sp, #28]
 8007acc:	e014      	b.n	8007af8 <_svfiprintf_r+0x114>
 8007ace:	eba0 0308 	sub.w	r3, r0, r8
 8007ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	9304      	str	r3, [sp, #16]
 8007ada:	46a2      	mov	sl, r4
 8007adc:	e7d2      	b.n	8007a84 <_svfiprintf_r+0xa0>
 8007ade:	9b03      	ldr	r3, [sp, #12]
 8007ae0:	1d19      	adds	r1, r3, #4
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	9103      	str	r1, [sp, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	bfbb      	ittet	lt
 8007aea:	425b      	neglt	r3, r3
 8007aec:	f042 0202 	orrlt.w	r2, r2, #2
 8007af0:	9307      	strge	r3, [sp, #28]
 8007af2:	9307      	strlt	r3, [sp, #28]
 8007af4:	bfb8      	it	lt
 8007af6:	9204      	strlt	r2, [sp, #16]
 8007af8:	7823      	ldrb	r3, [r4, #0]
 8007afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8007afc:	d10a      	bne.n	8007b14 <_svfiprintf_r+0x130>
 8007afe:	7863      	ldrb	r3, [r4, #1]
 8007b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b02:	d132      	bne.n	8007b6a <_svfiprintf_r+0x186>
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	1d1a      	adds	r2, r3, #4
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	9203      	str	r2, [sp, #12]
 8007b0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b10:	3402      	adds	r4, #2
 8007b12:	9305      	str	r3, [sp, #20]
 8007b14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007bd8 <_svfiprintf_r+0x1f4>
 8007b18:	7821      	ldrb	r1, [r4, #0]
 8007b1a:	2203      	movs	r2, #3
 8007b1c:	4650      	mov	r0, sl
 8007b1e:	f7f8 fb5f 	bl	80001e0 <memchr>
 8007b22:	b138      	cbz	r0, 8007b34 <_svfiprintf_r+0x150>
 8007b24:	9b04      	ldr	r3, [sp, #16]
 8007b26:	eba0 000a 	sub.w	r0, r0, sl
 8007b2a:	2240      	movs	r2, #64	@ 0x40
 8007b2c:	4082      	lsls	r2, r0
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	3401      	adds	r4, #1
 8007b32:	9304      	str	r3, [sp, #16]
 8007b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b38:	4824      	ldr	r0, [pc, #144]	@ (8007bcc <_svfiprintf_r+0x1e8>)
 8007b3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b3e:	2206      	movs	r2, #6
 8007b40:	f7f8 fb4e 	bl	80001e0 <memchr>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d036      	beq.n	8007bb6 <_svfiprintf_r+0x1d2>
 8007b48:	4b21      	ldr	r3, [pc, #132]	@ (8007bd0 <_svfiprintf_r+0x1ec>)
 8007b4a:	bb1b      	cbnz	r3, 8007b94 <_svfiprintf_r+0x1b0>
 8007b4c:	9b03      	ldr	r3, [sp, #12]
 8007b4e:	3307      	adds	r3, #7
 8007b50:	f023 0307 	bic.w	r3, r3, #7
 8007b54:	3308      	adds	r3, #8
 8007b56:	9303      	str	r3, [sp, #12]
 8007b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b5a:	4433      	add	r3, r6
 8007b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b5e:	e76a      	b.n	8007a36 <_svfiprintf_r+0x52>
 8007b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b64:	460c      	mov	r4, r1
 8007b66:	2001      	movs	r0, #1
 8007b68:	e7a8      	b.n	8007abc <_svfiprintf_r+0xd8>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	3401      	adds	r4, #1
 8007b6e:	9305      	str	r3, [sp, #20]
 8007b70:	4619      	mov	r1, r3
 8007b72:	f04f 0c0a 	mov.w	ip, #10
 8007b76:	4620      	mov	r0, r4
 8007b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b7c:	3a30      	subs	r2, #48	@ 0x30
 8007b7e:	2a09      	cmp	r2, #9
 8007b80:	d903      	bls.n	8007b8a <_svfiprintf_r+0x1a6>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0c6      	beq.n	8007b14 <_svfiprintf_r+0x130>
 8007b86:	9105      	str	r1, [sp, #20]
 8007b88:	e7c4      	b.n	8007b14 <_svfiprintf_r+0x130>
 8007b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b8e:	4604      	mov	r4, r0
 8007b90:	2301      	movs	r3, #1
 8007b92:	e7f0      	b.n	8007b76 <_svfiprintf_r+0x192>
 8007b94:	ab03      	add	r3, sp, #12
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	462a      	mov	r2, r5
 8007b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8007bd4 <_svfiprintf_r+0x1f0>)
 8007b9c:	a904      	add	r1, sp, #16
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	f7fc fd6c 	bl	800467c <_printf_float>
 8007ba4:	1c42      	adds	r2, r0, #1
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	d1d6      	bne.n	8007b58 <_svfiprintf_r+0x174>
 8007baa:	89ab      	ldrh	r3, [r5, #12]
 8007bac:	065b      	lsls	r3, r3, #25
 8007bae:	f53f af2d 	bmi.w	8007a0c <_svfiprintf_r+0x28>
 8007bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bb4:	e72c      	b.n	8007a10 <_svfiprintf_r+0x2c>
 8007bb6:	ab03      	add	r3, sp, #12
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	462a      	mov	r2, r5
 8007bbc:	4b05      	ldr	r3, [pc, #20]	@ (8007bd4 <_svfiprintf_r+0x1f0>)
 8007bbe:	a904      	add	r1, sp, #16
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	f7fc fff3 	bl	8004bac <_printf_i>
 8007bc6:	e7ed      	b.n	8007ba4 <_svfiprintf_r+0x1c0>
 8007bc8:	0800a559 	.word	0x0800a559
 8007bcc:	0800a563 	.word	0x0800a563
 8007bd0:	0800467d 	.word	0x0800467d
 8007bd4:	0800792d 	.word	0x0800792d
 8007bd8:	0800a55f 	.word	0x0800a55f

08007bdc <__sflush_r>:
 8007bdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be4:	0716      	lsls	r6, r2, #28
 8007be6:	4605      	mov	r5, r0
 8007be8:	460c      	mov	r4, r1
 8007bea:	d454      	bmi.n	8007c96 <__sflush_r+0xba>
 8007bec:	684b      	ldr	r3, [r1, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	dc02      	bgt.n	8007bf8 <__sflush_r+0x1c>
 8007bf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dd48      	ble.n	8007c8a <__sflush_r+0xae>
 8007bf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bfa:	2e00      	cmp	r6, #0
 8007bfc:	d045      	beq.n	8007c8a <__sflush_r+0xae>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c04:	682f      	ldr	r7, [r5, #0]
 8007c06:	6a21      	ldr	r1, [r4, #32]
 8007c08:	602b      	str	r3, [r5, #0]
 8007c0a:	d030      	beq.n	8007c6e <__sflush_r+0x92>
 8007c0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	0759      	lsls	r1, r3, #29
 8007c12:	d505      	bpl.n	8007c20 <__sflush_r+0x44>
 8007c14:	6863      	ldr	r3, [r4, #4]
 8007c16:	1ad2      	subs	r2, r2, r3
 8007c18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c1a:	b10b      	cbz	r3, 8007c20 <__sflush_r+0x44>
 8007c1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c1e:	1ad2      	subs	r2, r2, r3
 8007c20:	2300      	movs	r3, #0
 8007c22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c24:	6a21      	ldr	r1, [r4, #32]
 8007c26:	4628      	mov	r0, r5
 8007c28:	47b0      	blx	r6
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	d106      	bne.n	8007c3e <__sflush_r+0x62>
 8007c30:	6829      	ldr	r1, [r5, #0]
 8007c32:	291d      	cmp	r1, #29
 8007c34:	d82b      	bhi.n	8007c8e <__sflush_r+0xb2>
 8007c36:	4a2a      	ldr	r2, [pc, #168]	@ (8007ce0 <__sflush_r+0x104>)
 8007c38:	410a      	asrs	r2, r1
 8007c3a:	07d6      	lsls	r6, r2, #31
 8007c3c:	d427      	bmi.n	8007c8e <__sflush_r+0xb2>
 8007c3e:	2200      	movs	r2, #0
 8007c40:	6062      	str	r2, [r4, #4]
 8007c42:	04d9      	lsls	r1, r3, #19
 8007c44:	6922      	ldr	r2, [r4, #16]
 8007c46:	6022      	str	r2, [r4, #0]
 8007c48:	d504      	bpl.n	8007c54 <__sflush_r+0x78>
 8007c4a:	1c42      	adds	r2, r0, #1
 8007c4c:	d101      	bne.n	8007c52 <__sflush_r+0x76>
 8007c4e:	682b      	ldr	r3, [r5, #0]
 8007c50:	b903      	cbnz	r3, 8007c54 <__sflush_r+0x78>
 8007c52:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c56:	602f      	str	r7, [r5, #0]
 8007c58:	b1b9      	cbz	r1, 8007c8a <__sflush_r+0xae>
 8007c5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c5e:	4299      	cmp	r1, r3
 8007c60:	d002      	beq.n	8007c68 <__sflush_r+0x8c>
 8007c62:	4628      	mov	r0, r5
 8007c64:	f7fe fae0 	bl	8006228 <_free_r>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c6c:	e00d      	b.n	8007c8a <__sflush_r+0xae>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	4628      	mov	r0, r5
 8007c72:	47b0      	blx	r6
 8007c74:	4602      	mov	r2, r0
 8007c76:	1c50      	adds	r0, r2, #1
 8007c78:	d1c9      	bne.n	8007c0e <__sflush_r+0x32>
 8007c7a:	682b      	ldr	r3, [r5, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d0c6      	beq.n	8007c0e <__sflush_r+0x32>
 8007c80:	2b1d      	cmp	r3, #29
 8007c82:	d001      	beq.n	8007c88 <__sflush_r+0xac>
 8007c84:	2b16      	cmp	r3, #22
 8007c86:	d11e      	bne.n	8007cc6 <__sflush_r+0xea>
 8007c88:	602f      	str	r7, [r5, #0]
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	e022      	b.n	8007cd4 <__sflush_r+0xf8>
 8007c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c92:	b21b      	sxth	r3, r3
 8007c94:	e01b      	b.n	8007cce <__sflush_r+0xf2>
 8007c96:	690f      	ldr	r7, [r1, #16]
 8007c98:	2f00      	cmp	r7, #0
 8007c9a:	d0f6      	beq.n	8007c8a <__sflush_r+0xae>
 8007c9c:	0793      	lsls	r3, r2, #30
 8007c9e:	680e      	ldr	r6, [r1, #0]
 8007ca0:	bf08      	it	eq
 8007ca2:	694b      	ldreq	r3, [r1, #20]
 8007ca4:	600f      	str	r7, [r1, #0]
 8007ca6:	bf18      	it	ne
 8007ca8:	2300      	movne	r3, #0
 8007caa:	eba6 0807 	sub.w	r8, r6, r7
 8007cae:	608b      	str	r3, [r1, #8]
 8007cb0:	f1b8 0f00 	cmp.w	r8, #0
 8007cb4:	dde9      	ble.n	8007c8a <__sflush_r+0xae>
 8007cb6:	6a21      	ldr	r1, [r4, #32]
 8007cb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007cba:	4643      	mov	r3, r8
 8007cbc:	463a      	mov	r2, r7
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b0      	blx	r6
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	dc08      	bgt.n	8007cd8 <__sflush_r+0xfc>
 8007cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cce:	81a3      	strh	r3, [r4, #12]
 8007cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd8:	4407      	add	r7, r0
 8007cda:	eba8 0800 	sub.w	r8, r8, r0
 8007cde:	e7e7      	b.n	8007cb0 <__sflush_r+0xd4>
 8007ce0:	dfbffffe 	.word	0xdfbffffe

08007ce4 <_fflush_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	690b      	ldr	r3, [r1, #16]
 8007ce8:	4605      	mov	r5, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	b913      	cbnz	r3, 8007cf4 <_fflush_r+0x10>
 8007cee:	2500      	movs	r5, #0
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	b118      	cbz	r0, 8007cfe <_fflush_r+0x1a>
 8007cf6:	6a03      	ldr	r3, [r0, #32]
 8007cf8:	b90b      	cbnz	r3, 8007cfe <_fflush_r+0x1a>
 8007cfa:	f7fd fb17 	bl	800532c <__sinit>
 8007cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0f3      	beq.n	8007cee <_fflush_r+0xa>
 8007d06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d08:	07d0      	lsls	r0, r2, #31
 8007d0a:	d404      	bmi.n	8007d16 <_fflush_r+0x32>
 8007d0c:	0599      	lsls	r1, r3, #22
 8007d0e:	d402      	bmi.n	8007d16 <_fflush_r+0x32>
 8007d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d12:	f7fd fc32 	bl	800557a <__retarget_lock_acquire_recursive>
 8007d16:	4628      	mov	r0, r5
 8007d18:	4621      	mov	r1, r4
 8007d1a:	f7ff ff5f 	bl	8007bdc <__sflush_r>
 8007d1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d20:	07da      	lsls	r2, r3, #31
 8007d22:	4605      	mov	r5, r0
 8007d24:	d4e4      	bmi.n	8007cf0 <_fflush_r+0xc>
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	059b      	lsls	r3, r3, #22
 8007d2a:	d4e1      	bmi.n	8007cf0 <_fflush_r+0xc>
 8007d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d2e:	f7fd fc25 	bl	800557c <__retarget_lock_release_recursive>
 8007d32:	e7dd      	b.n	8007cf0 <_fflush_r+0xc>

08007d34 <memmove>:
 8007d34:	4288      	cmp	r0, r1
 8007d36:	b510      	push	{r4, lr}
 8007d38:	eb01 0402 	add.w	r4, r1, r2
 8007d3c:	d902      	bls.n	8007d44 <memmove+0x10>
 8007d3e:	4284      	cmp	r4, r0
 8007d40:	4623      	mov	r3, r4
 8007d42:	d807      	bhi.n	8007d54 <memmove+0x20>
 8007d44:	1e43      	subs	r3, r0, #1
 8007d46:	42a1      	cmp	r1, r4
 8007d48:	d008      	beq.n	8007d5c <memmove+0x28>
 8007d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d52:	e7f8      	b.n	8007d46 <memmove+0x12>
 8007d54:	4402      	add	r2, r0
 8007d56:	4601      	mov	r1, r0
 8007d58:	428a      	cmp	r2, r1
 8007d5a:	d100      	bne.n	8007d5e <memmove+0x2a>
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d66:	e7f7      	b.n	8007d58 <memmove+0x24>

08007d68 <strncmp>:
 8007d68:	b510      	push	{r4, lr}
 8007d6a:	b16a      	cbz	r2, 8007d88 <strncmp+0x20>
 8007d6c:	3901      	subs	r1, #1
 8007d6e:	1884      	adds	r4, r0, r2
 8007d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d74:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d103      	bne.n	8007d84 <strncmp+0x1c>
 8007d7c:	42a0      	cmp	r0, r4
 8007d7e:	d001      	beq.n	8007d84 <strncmp+0x1c>
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	d1f5      	bne.n	8007d70 <strncmp+0x8>
 8007d84:	1ad0      	subs	r0, r2, r3
 8007d86:	bd10      	pop	{r4, pc}
 8007d88:	4610      	mov	r0, r2
 8007d8a:	e7fc      	b.n	8007d86 <strncmp+0x1e>

08007d8c <memcpy>:
 8007d8c:	440a      	add	r2, r1
 8007d8e:	4291      	cmp	r1, r2
 8007d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d94:	d100      	bne.n	8007d98 <memcpy+0xc>
 8007d96:	4770      	bx	lr
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007da2:	4291      	cmp	r1, r2
 8007da4:	d1f9      	bne.n	8007d9a <memcpy+0xe>
 8007da6:	bd10      	pop	{r4, pc}

08007da8 <nan>:
 8007da8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007db0 <nan+0x8>
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	00000000 	.word	0x00000000
 8007db4:	7ff80000 	.word	0x7ff80000

08007db8 <__assert_func>:
 8007db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dba:	4614      	mov	r4, r2
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	4b09      	ldr	r3, [pc, #36]	@ (8007de4 <__assert_func+0x2c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	68d8      	ldr	r0, [r3, #12]
 8007dc6:	b954      	cbnz	r4, 8007dde <__assert_func+0x26>
 8007dc8:	4b07      	ldr	r3, [pc, #28]	@ (8007de8 <__assert_func+0x30>)
 8007dca:	461c      	mov	r4, r3
 8007dcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007dd0:	9100      	str	r1, [sp, #0]
 8007dd2:	462b      	mov	r3, r5
 8007dd4:	4905      	ldr	r1, [pc, #20]	@ (8007dec <__assert_func+0x34>)
 8007dd6:	f000 fba7 	bl	8008528 <fiprintf>
 8007dda:	f000 fbb7 	bl	800854c <abort>
 8007dde:	4b04      	ldr	r3, [pc, #16]	@ (8007df0 <__assert_func+0x38>)
 8007de0:	e7f4      	b.n	8007dcc <__assert_func+0x14>
 8007de2:	bf00      	nop
 8007de4:	20003518 	.word	0x20003518
 8007de8:	0800a5ad 	.word	0x0800a5ad
 8007dec:	0800a57f 	.word	0x0800a57f
 8007df0:	0800a572 	.word	0x0800a572

08007df4 <_calloc_r>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	fba1 5402 	umull	r5, r4, r1, r2
 8007dfa:	b93c      	cbnz	r4, 8007e0c <_calloc_r+0x18>
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	f7fc fb11 	bl	8004424 <_malloc_r>
 8007e02:	4606      	mov	r6, r0
 8007e04:	b928      	cbnz	r0, 8007e12 <_calloc_r+0x1e>
 8007e06:	2600      	movs	r6, #0
 8007e08:	4630      	mov	r0, r6
 8007e0a:	bd70      	pop	{r4, r5, r6, pc}
 8007e0c:	220c      	movs	r2, #12
 8007e0e:	6002      	str	r2, [r0, #0]
 8007e10:	e7f9      	b.n	8007e06 <_calloc_r+0x12>
 8007e12:	462a      	mov	r2, r5
 8007e14:	4621      	mov	r1, r4
 8007e16:	f7fd fb22 	bl	800545e <memset>
 8007e1a:	e7f5      	b.n	8007e08 <_calloc_r+0x14>

08007e1c <rshift>:
 8007e1c:	6903      	ldr	r3, [r0, #16]
 8007e1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e2a:	f100 0414 	add.w	r4, r0, #20
 8007e2e:	dd45      	ble.n	8007ebc <rshift+0xa0>
 8007e30:	f011 011f 	ands.w	r1, r1, #31
 8007e34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007e38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007e3c:	d10c      	bne.n	8007e58 <rshift+0x3c>
 8007e3e:	f100 0710 	add.w	r7, r0, #16
 8007e42:	4629      	mov	r1, r5
 8007e44:	42b1      	cmp	r1, r6
 8007e46:	d334      	bcc.n	8007eb2 <rshift+0x96>
 8007e48:	1a9b      	subs	r3, r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	1eea      	subs	r2, r5, #3
 8007e4e:	4296      	cmp	r6, r2
 8007e50:	bf38      	it	cc
 8007e52:	2300      	movcc	r3, #0
 8007e54:	4423      	add	r3, r4
 8007e56:	e015      	b.n	8007e84 <rshift+0x68>
 8007e58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007e5c:	f1c1 0820 	rsb	r8, r1, #32
 8007e60:	40cf      	lsrs	r7, r1
 8007e62:	f105 0e04 	add.w	lr, r5, #4
 8007e66:	46a1      	mov	r9, r4
 8007e68:	4576      	cmp	r6, lr
 8007e6a:	46f4      	mov	ip, lr
 8007e6c:	d815      	bhi.n	8007e9a <rshift+0x7e>
 8007e6e:	1a9a      	subs	r2, r3, r2
 8007e70:	0092      	lsls	r2, r2, #2
 8007e72:	3a04      	subs	r2, #4
 8007e74:	3501      	adds	r5, #1
 8007e76:	42ae      	cmp	r6, r5
 8007e78:	bf38      	it	cc
 8007e7a:	2200      	movcc	r2, #0
 8007e7c:	18a3      	adds	r3, r4, r2
 8007e7e:	50a7      	str	r7, [r4, r2]
 8007e80:	b107      	cbz	r7, 8007e84 <rshift+0x68>
 8007e82:	3304      	adds	r3, #4
 8007e84:	1b1a      	subs	r2, r3, r4
 8007e86:	42a3      	cmp	r3, r4
 8007e88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e8c:	bf08      	it	eq
 8007e8e:	2300      	moveq	r3, #0
 8007e90:	6102      	str	r2, [r0, #16]
 8007e92:	bf08      	it	eq
 8007e94:	6143      	streq	r3, [r0, #20]
 8007e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e9a:	f8dc c000 	ldr.w	ip, [ip]
 8007e9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ea2:	ea4c 0707 	orr.w	r7, ip, r7
 8007ea6:	f849 7b04 	str.w	r7, [r9], #4
 8007eaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007eae:	40cf      	lsrs	r7, r1
 8007eb0:	e7da      	b.n	8007e68 <rshift+0x4c>
 8007eb2:	f851 cb04 	ldr.w	ip, [r1], #4
 8007eb6:	f847 cf04 	str.w	ip, [r7, #4]!
 8007eba:	e7c3      	b.n	8007e44 <rshift+0x28>
 8007ebc:	4623      	mov	r3, r4
 8007ebe:	e7e1      	b.n	8007e84 <rshift+0x68>

08007ec0 <__hexdig_fun>:
 8007ec0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007ec4:	2b09      	cmp	r3, #9
 8007ec6:	d802      	bhi.n	8007ece <__hexdig_fun+0xe>
 8007ec8:	3820      	subs	r0, #32
 8007eca:	b2c0      	uxtb	r0, r0
 8007ecc:	4770      	bx	lr
 8007ece:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007ed2:	2b05      	cmp	r3, #5
 8007ed4:	d801      	bhi.n	8007eda <__hexdig_fun+0x1a>
 8007ed6:	3847      	subs	r0, #71	@ 0x47
 8007ed8:	e7f7      	b.n	8007eca <__hexdig_fun+0xa>
 8007eda:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007ede:	2b05      	cmp	r3, #5
 8007ee0:	d801      	bhi.n	8007ee6 <__hexdig_fun+0x26>
 8007ee2:	3827      	subs	r0, #39	@ 0x27
 8007ee4:	e7f1      	b.n	8007eca <__hexdig_fun+0xa>
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	4770      	bx	lr
	...

08007eec <__gethex>:
 8007eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	b085      	sub	sp, #20
 8007ef2:	468a      	mov	sl, r1
 8007ef4:	9302      	str	r3, [sp, #8]
 8007ef6:	680b      	ldr	r3, [r1, #0]
 8007ef8:	9001      	str	r0, [sp, #4]
 8007efa:	4690      	mov	r8, r2
 8007efc:	1c9c      	adds	r4, r3, #2
 8007efe:	46a1      	mov	r9, r4
 8007f00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007f04:	2830      	cmp	r0, #48	@ 0x30
 8007f06:	d0fa      	beq.n	8007efe <__gethex+0x12>
 8007f08:	eba9 0303 	sub.w	r3, r9, r3
 8007f0c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007f10:	f7ff ffd6 	bl	8007ec0 <__hexdig_fun>
 8007f14:	4605      	mov	r5, r0
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d168      	bne.n	8007fec <__gethex+0x100>
 8007f1a:	49a0      	ldr	r1, [pc, #640]	@ (800819c <__gethex+0x2b0>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	4648      	mov	r0, r9
 8007f20:	f7ff ff22 	bl	8007d68 <strncmp>
 8007f24:	4607      	mov	r7, r0
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d167      	bne.n	8007ffa <__gethex+0x10e>
 8007f2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007f2e:	4626      	mov	r6, r4
 8007f30:	f7ff ffc6 	bl	8007ec0 <__hexdig_fun>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d062      	beq.n	8007ffe <__gethex+0x112>
 8007f38:	4623      	mov	r3, r4
 8007f3a:	7818      	ldrb	r0, [r3, #0]
 8007f3c:	2830      	cmp	r0, #48	@ 0x30
 8007f3e:	4699      	mov	r9, r3
 8007f40:	f103 0301 	add.w	r3, r3, #1
 8007f44:	d0f9      	beq.n	8007f3a <__gethex+0x4e>
 8007f46:	f7ff ffbb 	bl	8007ec0 <__hexdig_fun>
 8007f4a:	fab0 f580 	clz	r5, r0
 8007f4e:	096d      	lsrs	r5, r5, #5
 8007f50:	f04f 0b01 	mov.w	fp, #1
 8007f54:	464a      	mov	r2, r9
 8007f56:	4616      	mov	r6, r2
 8007f58:	3201      	adds	r2, #1
 8007f5a:	7830      	ldrb	r0, [r6, #0]
 8007f5c:	f7ff ffb0 	bl	8007ec0 <__hexdig_fun>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d1f8      	bne.n	8007f56 <__gethex+0x6a>
 8007f64:	498d      	ldr	r1, [pc, #564]	@ (800819c <__gethex+0x2b0>)
 8007f66:	2201      	movs	r2, #1
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f7ff fefd 	bl	8007d68 <strncmp>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d13f      	bne.n	8007ff2 <__gethex+0x106>
 8007f72:	b944      	cbnz	r4, 8007f86 <__gethex+0x9a>
 8007f74:	1c74      	adds	r4, r6, #1
 8007f76:	4622      	mov	r2, r4
 8007f78:	4616      	mov	r6, r2
 8007f7a:	3201      	adds	r2, #1
 8007f7c:	7830      	ldrb	r0, [r6, #0]
 8007f7e:	f7ff ff9f 	bl	8007ec0 <__hexdig_fun>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d1f8      	bne.n	8007f78 <__gethex+0x8c>
 8007f86:	1ba4      	subs	r4, r4, r6
 8007f88:	00a7      	lsls	r7, r4, #2
 8007f8a:	7833      	ldrb	r3, [r6, #0]
 8007f8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007f90:	2b50      	cmp	r3, #80	@ 0x50
 8007f92:	d13e      	bne.n	8008012 <__gethex+0x126>
 8007f94:	7873      	ldrb	r3, [r6, #1]
 8007f96:	2b2b      	cmp	r3, #43	@ 0x2b
 8007f98:	d033      	beq.n	8008002 <__gethex+0x116>
 8007f9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8007f9c:	d034      	beq.n	8008008 <__gethex+0x11c>
 8007f9e:	1c71      	adds	r1, r6, #1
 8007fa0:	2400      	movs	r4, #0
 8007fa2:	7808      	ldrb	r0, [r1, #0]
 8007fa4:	f7ff ff8c 	bl	8007ec0 <__hexdig_fun>
 8007fa8:	1e43      	subs	r3, r0, #1
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b18      	cmp	r3, #24
 8007fae:	d830      	bhi.n	8008012 <__gethex+0x126>
 8007fb0:	f1a0 0210 	sub.w	r2, r0, #16
 8007fb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007fb8:	f7ff ff82 	bl	8007ec0 <__hexdig_fun>
 8007fbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8007fc0:	fa5f fc8c 	uxtb.w	ip, ip
 8007fc4:	f1bc 0f18 	cmp.w	ip, #24
 8007fc8:	f04f 030a 	mov.w	r3, #10
 8007fcc:	d91e      	bls.n	800800c <__gethex+0x120>
 8007fce:	b104      	cbz	r4, 8007fd2 <__gethex+0xe6>
 8007fd0:	4252      	negs	r2, r2
 8007fd2:	4417      	add	r7, r2
 8007fd4:	f8ca 1000 	str.w	r1, [sl]
 8007fd8:	b1ed      	cbz	r5, 8008016 <__gethex+0x12a>
 8007fda:	f1bb 0f00 	cmp.w	fp, #0
 8007fde:	bf0c      	ite	eq
 8007fe0:	2506      	moveq	r5, #6
 8007fe2:	2500      	movne	r5, #0
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	b005      	add	sp, #20
 8007fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fec:	2500      	movs	r5, #0
 8007fee:	462c      	mov	r4, r5
 8007ff0:	e7b0      	b.n	8007f54 <__gethex+0x68>
 8007ff2:	2c00      	cmp	r4, #0
 8007ff4:	d1c7      	bne.n	8007f86 <__gethex+0x9a>
 8007ff6:	4627      	mov	r7, r4
 8007ff8:	e7c7      	b.n	8007f8a <__gethex+0x9e>
 8007ffa:	464e      	mov	r6, r9
 8007ffc:	462f      	mov	r7, r5
 8007ffe:	2501      	movs	r5, #1
 8008000:	e7c3      	b.n	8007f8a <__gethex+0x9e>
 8008002:	2400      	movs	r4, #0
 8008004:	1cb1      	adds	r1, r6, #2
 8008006:	e7cc      	b.n	8007fa2 <__gethex+0xb6>
 8008008:	2401      	movs	r4, #1
 800800a:	e7fb      	b.n	8008004 <__gethex+0x118>
 800800c:	fb03 0002 	mla	r0, r3, r2, r0
 8008010:	e7ce      	b.n	8007fb0 <__gethex+0xc4>
 8008012:	4631      	mov	r1, r6
 8008014:	e7de      	b.n	8007fd4 <__gethex+0xe8>
 8008016:	eba6 0309 	sub.w	r3, r6, r9
 800801a:	3b01      	subs	r3, #1
 800801c:	4629      	mov	r1, r5
 800801e:	2b07      	cmp	r3, #7
 8008020:	dc0a      	bgt.n	8008038 <__gethex+0x14c>
 8008022:	9801      	ldr	r0, [sp, #4]
 8008024:	f7fe f94a 	bl	80062bc <_Balloc>
 8008028:	4604      	mov	r4, r0
 800802a:	b940      	cbnz	r0, 800803e <__gethex+0x152>
 800802c:	4b5c      	ldr	r3, [pc, #368]	@ (80081a0 <__gethex+0x2b4>)
 800802e:	4602      	mov	r2, r0
 8008030:	21e4      	movs	r1, #228	@ 0xe4
 8008032:	485c      	ldr	r0, [pc, #368]	@ (80081a4 <__gethex+0x2b8>)
 8008034:	f7ff fec0 	bl	8007db8 <__assert_func>
 8008038:	3101      	adds	r1, #1
 800803a:	105b      	asrs	r3, r3, #1
 800803c:	e7ef      	b.n	800801e <__gethex+0x132>
 800803e:	f100 0a14 	add.w	sl, r0, #20
 8008042:	2300      	movs	r3, #0
 8008044:	4655      	mov	r5, sl
 8008046:	469b      	mov	fp, r3
 8008048:	45b1      	cmp	r9, r6
 800804a:	d337      	bcc.n	80080bc <__gethex+0x1d0>
 800804c:	f845 bb04 	str.w	fp, [r5], #4
 8008050:	eba5 050a 	sub.w	r5, r5, sl
 8008054:	10ad      	asrs	r5, r5, #2
 8008056:	6125      	str	r5, [r4, #16]
 8008058:	4658      	mov	r0, fp
 800805a:	f7fe fa21 	bl	80064a0 <__hi0bits>
 800805e:	016d      	lsls	r5, r5, #5
 8008060:	f8d8 6000 	ldr.w	r6, [r8]
 8008064:	1a2d      	subs	r5, r5, r0
 8008066:	42b5      	cmp	r5, r6
 8008068:	dd54      	ble.n	8008114 <__gethex+0x228>
 800806a:	1bad      	subs	r5, r5, r6
 800806c:	4629      	mov	r1, r5
 800806e:	4620      	mov	r0, r4
 8008070:	f7fe fdb5 	bl	8006bde <__any_on>
 8008074:	4681      	mov	r9, r0
 8008076:	b178      	cbz	r0, 8008098 <__gethex+0x1ac>
 8008078:	1e6b      	subs	r3, r5, #1
 800807a:	1159      	asrs	r1, r3, #5
 800807c:	f003 021f 	and.w	r2, r3, #31
 8008080:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008084:	f04f 0901 	mov.w	r9, #1
 8008088:	fa09 f202 	lsl.w	r2, r9, r2
 800808c:	420a      	tst	r2, r1
 800808e:	d003      	beq.n	8008098 <__gethex+0x1ac>
 8008090:	454b      	cmp	r3, r9
 8008092:	dc36      	bgt.n	8008102 <__gethex+0x216>
 8008094:	f04f 0902 	mov.w	r9, #2
 8008098:	4629      	mov	r1, r5
 800809a:	4620      	mov	r0, r4
 800809c:	f7ff febe 	bl	8007e1c <rshift>
 80080a0:	442f      	add	r7, r5
 80080a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080a6:	42bb      	cmp	r3, r7
 80080a8:	da42      	bge.n	8008130 <__gethex+0x244>
 80080aa:	9801      	ldr	r0, [sp, #4]
 80080ac:	4621      	mov	r1, r4
 80080ae:	f7fe f945 	bl	800633c <_Bfree>
 80080b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080b4:	2300      	movs	r3, #0
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	25a3      	movs	r5, #163	@ 0xa3
 80080ba:	e793      	b.n	8007fe4 <__gethex+0xf8>
 80080bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80080c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80080c2:	d012      	beq.n	80080ea <__gethex+0x1fe>
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	d104      	bne.n	80080d2 <__gethex+0x1e6>
 80080c8:	f845 bb04 	str.w	fp, [r5], #4
 80080cc:	f04f 0b00 	mov.w	fp, #0
 80080d0:	465b      	mov	r3, fp
 80080d2:	7830      	ldrb	r0, [r6, #0]
 80080d4:	9303      	str	r3, [sp, #12]
 80080d6:	f7ff fef3 	bl	8007ec0 <__hexdig_fun>
 80080da:	9b03      	ldr	r3, [sp, #12]
 80080dc:	f000 000f 	and.w	r0, r0, #15
 80080e0:	4098      	lsls	r0, r3
 80080e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80080e6:	3304      	adds	r3, #4
 80080e8:	e7ae      	b.n	8008048 <__gethex+0x15c>
 80080ea:	45b1      	cmp	r9, r6
 80080ec:	d8ea      	bhi.n	80080c4 <__gethex+0x1d8>
 80080ee:	492b      	ldr	r1, [pc, #172]	@ (800819c <__gethex+0x2b0>)
 80080f0:	9303      	str	r3, [sp, #12]
 80080f2:	2201      	movs	r2, #1
 80080f4:	4630      	mov	r0, r6
 80080f6:	f7ff fe37 	bl	8007d68 <strncmp>
 80080fa:	9b03      	ldr	r3, [sp, #12]
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d1e1      	bne.n	80080c4 <__gethex+0x1d8>
 8008100:	e7a2      	b.n	8008048 <__gethex+0x15c>
 8008102:	1ea9      	subs	r1, r5, #2
 8008104:	4620      	mov	r0, r4
 8008106:	f7fe fd6a 	bl	8006bde <__any_on>
 800810a:	2800      	cmp	r0, #0
 800810c:	d0c2      	beq.n	8008094 <__gethex+0x1a8>
 800810e:	f04f 0903 	mov.w	r9, #3
 8008112:	e7c1      	b.n	8008098 <__gethex+0x1ac>
 8008114:	da09      	bge.n	800812a <__gethex+0x23e>
 8008116:	1b75      	subs	r5, r6, r5
 8008118:	4621      	mov	r1, r4
 800811a:	9801      	ldr	r0, [sp, #4]
 800811c:	462a      	mov	r2, r5
 800811e:	f7fe fb25 	bl	800676c <__lshift>
 8008122:	1b7f      	subs	r7, r7, r5
 8008124:	4604      	mov	r4, r0
 8008126:	f100 0a14 	add.w	sl, r0, #20
 800812a:	f04f 0900 	mov.w	r9, #0
 800812e:	e7b8      	b.n	80080a2 <__gethex+0x1b6>
 8008130:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008134:	42bd      	cmp	r5, r7
 8008136:	dd6f      	ble.n	8008218 <__gethex+0x32c>
 8008138:	1bed      	subs	r5, r5, r7
 800813a:	42ae      	cmp	r6, r5
 800813c:	dc34      	bgt.n	80081a8 <__gethex+0x2bc>
 800813e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008142:	2b02      	cmp	r3, #2
 8008144:	d022      	beq.n	800818c <__gethex+0x2a0>
 8008146:	2b03      	cmp	r3, #3
 8008148:	d024      	beq.n	8008194 <__gethex+0x2a8>
 800814a:	2b01      	cmp	r3, #1
 800814c:	d115      	bne.n	800817a <__gethex+0x28e>
 800814e:	42ae      	cmp	r6, r5
 8008150:	d113      	bne.n	800817a <__gethex+0x28e>
 8008152:	2e01      	cmp	r6, #1
 8008154:	d10b      	bne.n	800816e <__gethex+0x282>
 8008156:	9a02      	ldr	r2, [sp, #8]
 8008158:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	2301      	movs	r3, #1
 8008160:	6123      	str	r3, [r4, #16]
 8008162:	f8ca 3000 	str.w	r3, [sl]
 8008166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008168:	2562      	movs	r5, #98	@ 0x62
 800816a:	601c      	str	r4, [r3, #0]
 800816c:	e73a      	b.n	8007fe4 <__gethex+0xf8>
 800816e:	1e71      	subs	r1, r6, #1
 8008170:	4620      	mov	r0, r4
 8008172:	f7fe fd34 	bl	8006bde <__any_on>
 8008176:	2800      	cmp	r0, #0
 8008178:	d1ed      	bne.n	8008156 <__gethex+0x26a>
 800817a:	9801      	ldr	r0, [sp, #4]
 800817c:	4621      	mov	r1, r4
 800817e:	f7fe f8dd 	bl	800633c <_Bfree>
 8008182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008184:	2300      	movs	r3, #0
 8008186:	6013      	str	r3, [r2, #0]
 8008188:	2550      	movs	r5, #80	@ 0x50
 800818a:	e72b      	b.n	8007fe4 <__gethex+0xf8>
 800818c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1f3      	bne.n	800817a <__gethex+0x28e>
 8008192:	e7e0      	b.n	8008156 <__gethex+0x26a>
 8008194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1dd      	bne.n	8008156 <__gethex+0x26a>
 800819a:	e7ee      	b.n	800817a <__gethex+0x28e>
 800819c:	0800a400 	.word	0x0800a400
 80081a0:	0800a299 	.word	0x0800a299
 80081a4:	0800a5ae 	.word	0x0800a5ae
 80081a8:	1e6f      	subs	r7, r5, #1
 80081aa:	f1b9 0f00 	cmp.w	r9, #0
 80081ae:	d130      	bne.n	8008212 <__gethex+0x326>
 80081b0:	b127      	cbz	r7, 80081bc <__gethex+0x2d0>
 80081b2:	4639      	mov	r1, r7
 80081b4:	4620      	mov	r0, r4
 80081b6:	f7fe fd12 	bl	8006bde <__any_on>
 80081ba:	4681      	mov	r9, r0
 80081bc:	117a      	asrs	r2, r7, #5
 80081be:	2301      	movs	r3, #1
 80081c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80081c4:	f007 071f 	and.w	r7, r7, #31
 80081c8:	40bb      	lsls	r3, r7
 80081ca:	4213      	tst	r3, r2
 80081cc:	4629      	mov	r1, r5
 80081ce:	4620      	mov	r0, r4
 80081d0:	bf18      	it	ne
 80081d2:	f049 0902 	orrne.w	r9, r9, #2
 80081d6:	f7ff fe21 	bl	8007e1c <rshift>
 80081da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80081de:	1b76      	subs	r6, r6, r5
 80081e0:	2502      	movs	r5, #2
 80081e2:	f1b9 0f00 	cmp.w	r9, #0
 80081e6:	d047      	beq.n	8008278 <__gethex+0x38c>
 80081e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d015      	beq.n	800821c <__gethex+0x330>
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d017      	beq.n	8008224 <__gethex+0x338>
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d109      	bne.n	800820c <__gethex+0x320>
 80081f8:	f019 0f02 	tst.w	r9, #2
 80081fc:	d006      	beq.n	800820c <__gethex+0x320>
 80081fe:	f8da 3000 	ldr.w	r3, [sl]
 8008202:	ea49 0903 	orr.w	r9, r9, r3
 8008206:	f019 0f01 	tst.w	r9, #1
 800820a:	d10e      	bne.n	800822a <__gethex+0x33e>
 800820c:	f045 0510 	orr.w	r5, r5, #16
 8008210:	e032      	b.n	8008278 <__gethex+0x38c>
 8008212:	f04f 0901 	mov.w	r9, #1
 8008216:	e7d1      	b.n	80081bc <__gethex+0x2d0>
 8008218:	2501      	movs	r5, #1
 800821a:	e7e2      	b.n	80081e2 <__gethex+0x2f6>
 800821c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800821e:	f1c3 0301 	rsb	r3, r3, #1
 8008222:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0f0      	beq.n	800820c <__gethex+0x320>
 800822a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800822e:	f104 0314 	add.w	r3, r4, #20
 8008232:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008236:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800823a:	f04f 0c00 	mov.w	ip, #0
 800823e:	4618      	mov	r0, r3
 8008240:	f853 2b04 	ldr.w	r2, [r3], #4
 8008244:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008248:	d01b      	beq.n	8008282 <__gethex+0x396>
 800824a:	3201      	adds	r2, #1
 800824c:	6002      	str	r2, [r0, #0]
 800824e:	2d02      	cmp	r5, #2
 8008250:	f104 0314 	add.w	r3, r4, #20
 8008254:	d13c      	bne.n	80082d0 <__gethex+0x3e4>
 8008256:	f8d8 2000 	ldr.w	r2, [r8]
 800825a:	3a01      	subs	r2, #1
 800825c:	42b2      	cmp	r2, r6
 800825e:	d109      	bne.n	8008274 <__gethex+0x388>
 8008260:	1171      	asrs	r1, r6, #5
 8008262:	2201      	movs	r2, #1
 8008264:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008268:	f006 061f 	and.w	r6, r6, #31
 800826c:	fa02 f606 	lsl.w	r6, r2, r6
 8008270:	421e      	tst	r6, r3
 8008272:	d13a      	bne.n	80082ea <__gethex+0x3fe>
 8008274:	f045 0520 	orr.w	r5, r5, #32
 8008278:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800827a:	601c      	str	r4, [r3, #0]
 800827c:	9b02      	ldr	r3, [sp, #8]
 800827e:	601f      	str	r7, [r3, #0]
 8008280:	e6b0      	b.n	8007fe4 <__gethex+0xf8>
 8008282:	4299      	cmp	r1, r3
 8008284:	f843 cc04 	str.w	ip, [r3, #-4]
 8008288:	d8d9      	bhi.n	800823e <__gethex+0x352>
 800828a:	68a3      	ldr	r3, [r4, #8]
 800828c:	459b      	cmp	fp, r3
 800828e:	db17      	blt.n	80082c0 <__gethex+0x3d4>
 8008290:	6861      	ldr	r1, [r4, #4]
 8008292:	9801      	ldr	r0, [sp, #4]
 8008294:	3101      	adds	r1, #1
 8008296:	f7fe f811 	bl	80062bc <_Balloc>
 800829a:	4681      	mov	r9, r0
 800829c:	b918      	cbnz	r0, 80082a6 <__gethex+0x3ba>
 800829e:	4b1a      	ldr	r3, [pc, #104]	@ (8008308 <__gethex+0x41c>)
 80082a0:	4602      	mov	r2, r0
 80082a2:	2184      	movs	r1, #132	@ 0x84
 80082a4:	e6c5      	b.n	8008032 <__gethex+0x146>
 80082a6:	6922      	ldr	r2, [r4, #16]
 80082a8:	3202      	adds	r2, #2
 80082aa:	f104 010c 	add.w	r1, r4, #12
 80082ae:	0092      	lsls	r2, r2, #2
 80082b0:	300c      	adds	r0, #12
 80082b2:	f7ff fd6b 	bl	8007d8c <memcpy>
 80082b6:	4621      	mov	r1, r4
 80082b8:	9801      	ldr	r0, [sp, #4]
 80082ba:	f7fe f83f 	bl	800633c <_Bfree>
 80082be:	464c      	mov	r4, r9
 80082c0:	6923      	ldr	r3, [r4, #16]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082c8:	6122      	str	r2, [r4, #16]
 80082ca:	2201      	movs	r2, #1
 80082cc:	615a      	str	r2, [r3, #20]
 80082ce:	e7be      	b.n	800824e <__gethex+0x362>
 80082d0:	6922      	ldr	r2, [r4, #16]
 80082d2:	455a      	cmp	r2, fp
 80082d4:	dd0b      	ble.n	80082ee <__gethex+0x402>
 80082d6:	2101      	movs	r1, #1
 80082d8:	4620      	mov	r0, r4
 80082da:	f7ff fd9f 	bl	8007e1c <rshift>
 80082de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082e2:	3701      	adds	r7, #1
 80082e4:	42bb      	cmp	r3, r7
 80082e6:	f6ff aee0 	blt.w	80080aa <__gethex+0x1be>
 80082ea:	2501      	movs	r5, #1
 80082ec:	e7c2      	b.n	8008274 <__gethex+0x388>
 80082ee:	f016 061f 	ands.w	r6, r6, #31
 80082f2:	d0fa      	beq.n	80082ea <__gethex+0x3fe>
 80082f4:	4453      	add	r3, sl
 80082f6:	f1c6 0620 	rsb	r6, r6, #32
 80082fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80082fe:	f7fe f8cf 	bl	80064a0 <__hi0bits>
 8008302:	42b0      	cmp	r0, r6
 8008304:	dbe7      	blt.n	80082d6 <__gethex+0x3ea>
 8008306:	e7f0      	b.n	80082ea <__gethex+0x3fe>
 8008308:	0800a299 	.word	0x0800a299

0800830c <L_shift>:
 800830c:	f1c2 0208 	rsb	r2, r2, #8
 8008310:	0092      	lsls	r2, r2, #2
 8008312:	b570      	push	{r4, r5, r6, lr}
 8008314:	f1c2 0620 	rsb	r6, r2, #32
 8008318:	6843      	ldr	r3, [r0, #4]
 800831a:	6804      	ldr	r4, [r0, #0]
 800831c:	fa03 f506 	lsl.w	r5, r3, r6
 8008320:	432c      	orrs	r4, r5
 8008322:	40d3      	lsrs	r3, r2
 8008324:	6004      	str	r4, [r0, #0]
 8008326:	f840 3f04 	str.w	r3, [r0, #4]!
 800832a:	4288      	cmp	r0, r1
 800832c:	d3f4      	bcc.n	8008318 <L_shift+0xc>
 800832e:	bd70      	pop	{r4, r5, r6, pc}

08008330 <__match>:
 8008330:	b530      	push	{r4, r5, lr}
 8008332:	6803      	ldr	r3, [r0, #0]
 8008334:	3301      	adds	r3, #1
 8008336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800833a:	b914      	cbnz	r4, 8008342 <__match+0x12>
 800833c:	6003      	str	r3, [r0, #0]
 800833e:	2001      	movs	r0, #1
 8008340:	bd30      	pop	{r4, r5, pc}
 8008342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008346:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800834a:	2d19      	cmp	r5, #25
 800834c:	bf98      	it	ls
 800834e:	3220      	addls	r2, #32
 8008350:	42a2      	cmp	r2, r4
 8008352:	d0f0      	beq.n	8008336 <__match+0x6>
 8008354:	2000      	movs	r0, #0
 8008356:	e7f3      	b.n	8008340 <__match+0x10>

08008358 <__hexnan>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	680b      	ldr	r3, [r1, #0]
 800835e:	6801      	ldr	r1, [r0, #0]
 8008360:	115e      	asrs	r6, r3, #5
 8008362:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008366:	f013 031f 	ands.w	r3, r3, #31
 800836a:	b087      	sub	sp, #28
 800836c:	bf18      	it	ne
 800836e:	3604      	addne	r6, #4
 8008370:	2500      	movs	r5, #0
 8008372:	1f37      	subs	r7, r6, #4
 8008374:	4682      	mov	sl, r0
 8008376:	4690      	mov	r8, r2
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	f846 5c04 	str.w	r5, [r6, #-4]
 800837e:	46b9      	mov	r9, r7
 8008380:	463c      	mov	r4, r7
 8008382:	9502      	str	r5, [sp, #8]
 8008384:	46ab      	mov	fp, r5
 8008386:	784a      	ldrb	r2, [r1, #1]
 8008388:	1c4b      	adds	r3, r1, #1
 800838a:	9303      	str	r3, [sp, #12]
 800838c:	b342      	cbz	r2, 80083e0 <__hexnan+0x88>
 800838e:	4610      	mov	r0, r2
 8008390:	9105      	str	r1, [sp, #20]
 8008392:	9204      	str	r2, [sp, #16]
 8008394:	f7ff fd94 	bl	8007ec0 <__hexdig_fun>
 8008398:	2800      	cmp	r0, #0
 800839a:	d151      	bne.n	8008440 <__hexnan+0xe8>
 800839c:	9a04      	ldr	r2, [sp, #16]
 800839e:	9905      	ldr	r1, [sp, #20]
 80083a0:	2a20      	cmp	r2, #32
 80083a2:	d818      	bhi.n	80083d6 <__hexnan+0x7e>
 80083a4:	9b02      	ldr	r3, [sp, #8]
 80083a6:	459b      	cmp	fp, r3
 80083a8:	dd13      	ble.n	80083d2 <__hexnan+0x7a>
 80083aa:	454c      	cmp	r4, r9
 80083ac:	d206      	bcs.n	80083bc <__hexnan+0x64>
 80083ae:	2d07      	cmp	r5, #7
 80083b0:	dc04      	bgt.n	80083bc <__hexnan+0x64>
 80083b2:	462a      	mov	r2, r5
 80083b4:	4649      	mov	r1, r9
 80083b6:	4620      	mov	r0, r4
 80083b8:	f7ff ffa8 	bl	800830c <L_shift>
 80083bc:	4544      	cmp	r4, r8
 80083be:	d952      	bls.n	8008466 <__hexnan+0x10e>
 80083c0:	2300      	movs	r3, #0
 80083c2:	f1a4 0904 	sub.w	r9, r4, #4
 80083c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80083ca:	f8cd b008 	str.w	fp, [sp, #8]
 80083ce:	464c      	mov	r4, r9
 80083d0:	461d      	mov	r5, r3
 80083d2:	9903      	ldr	r1, [sp, #12]
 80083d4:	e7d7      	b.n	8008386 <__hexnan+0x2e>
 80083d6:	2a29      	cmp	r2, #41	@ 0x29
 80083d8:	d157      	bne.n	800848a <__hexnan+0x132>
 80083da:	3102      	adds	r1, #2
 80083dc:	f8ca 1000 	str.w	r1, [sl]
 80083e0:	f1bb 0f00 	cmp.w	fp, #0
 80083e4:	d051      	beq.n	800848a <__hexnan+0x132>
 80083e6:	454c      	cmp	r4, r9
 80083e8:	d206      	bcs.n	80083f8 <__hexnan+0xa0>
 80083ea:	2d07      	cmp	r5, #7
 80083ec:	dc04      	bgt.n	80083f8 <__hexnan+0xa0>
 80083ee:	462a      	mov	r2, r5
 80083f0:	4649      	mov	r1, r9
 80083f2:	4620      	mov	r0, r4
 80083f4:	f7ff ff8a 	bl	800830c <L_shift>
 80083f8:	4544      	cmp	r4, r8
 80083fa:	d936      	bls.n	800846a <__hexnan+0x112>
 80083fc:	f1a8 0204 	sub.w	r2, r8, #4
 8008400:	4623      	mov	r3, r4
 8008402:	f853 1b04 	ldr.w	r1, [r3], #4
 8008406:	f842 1f04 	str.w	r1, [r2, #4]!
 800840a:	429f      	cmp	r7, r3
 800840c:	d2f9      	bcs.n	8008402 <__hexnan+0xaa>
 800840e:	1b3b      	subs	r3, r7, r4
 8008410:	f023 0303 	bic.w	r3, r3, #3
 8008414:	3304      	adds	r3, #4
 8008416:	3401      	adds	r4, #1
 8008418:	3e03      	subs	r6, #3
 800841a:	42b4      	cmp	r4, r6
 800841c:	bf88      	it	hi
 800841e:	2304      	movhi	r3, #4
 8008420:	4443      	add	r3, r8
 8008422:	2200      	movs	r2, #0
 8008424:	f843 2b04 	str.w	r2, [r3], #4
 8008428:	429f      	cmp	r7, r3
 800842a:	d2fb      	bcs.n	8008424 <__hexnan+0xcc>
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	b91b      	cbnz	r3, 8008438 <__hexnan+0xe0>
 8008430:	4547      	cmp	r7, r8
 8008432:	d128      	bne.n	8008486 <__hexnan+0x12e>
 8008434:	2301      	movs	r3, #1
 8008436:	603b      	str	r3, [r7, #0]
 8008438:	2005      	movs	r0, #5
 800843a:	b007      	add	sp, #28
 800843c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008440:	3501      	adds	r5, #1
 8008442:	2d08      	cmp	r5, #8
 8008444:	f10b 0b01 	add.w	fp, fp, #1
 8008448:	dd06      	ble.n	8008458 <__hexnan+0x100>
 800844a:	4544      	cmp	r4, r8
 800844c:	d9c1      	bls.n	80083d2 <__hexnan+0x7a>
 800844e:	2300      	movs	r3, #0
 8008450:	f844 3c04 	str.w	r3, [r4, #-4]
 8008454:	2501      	movs	r5, #1
 8008456:	3c04      	subs	r4, #4
 8008458:	6822      	ldr	r2, [r4, #0]
 800845a:	f000 000f 	and.w	r0, r0, #15
 800845e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008462:	6020      	str	r0, [r4, #0]
 8008464:	e7b5      	b.n	80083d2 <__hexnan+0x7a>
 8008466:	2508      	movs	r5, #8
 8008468:	e7b3      	b.n	80083d2 <__hexnan+0x7a>
 800846a:	9b01      	ldr	r3, [sp, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d0dd      	beq.n	800842c <__hexnan+0xd4>
 8008470:	f1c3 0320 	rsb	r3, r3, #32
 8008474:	f04f 32ff 	mov.w	r2, #4294967295
 8008478:	40da      	lsrs	r2, r3
 800847a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800847e:	4013      	ands	r3, r2
 8008480:	f846 3c04 	str.w	r3, [r6, #-4]
 8008484:	e7d2      	b.n	800842c <__hexnan+0xd4>
 8008486:	3f04      	subs	r7, #4
 8008488:	e7d0      	b.n	800842c <__hexnan+0xd4>
 800848a:	2004      	movs	r0, #4
 800848c:	e7d5      	b.n	800843a <__hexnan+0xe2>

0800848e <__ascii_mbtowc>:
 800848e:	b082      	sub	sp, #8
 8008490:	b901      	cbnz	r1, 8008494 <__ascii_mbtowc+0x6>
 8008492:	a901      	add	r1, sp, #4
 8008494:	b142      	cbz	r2, 80084a8 <__ascii_mbtowc+0x1a>
 8008496:	b14b      	cbz	r3, 80084ac <__ascii_mbtowc+0x1e>
 8008498:	7813      	ldrb	r3, [r2, #0]
 800849a:	600b      	str	r3, [r1, #0]
 800849c:	7812      	ldrb	r2, [r2, #0]
 800849e:	1e10      	subs	r0, r2, #0
 80084a0:	bf18      	it	ne
 80084a2:	2001      	movne	r0, #1
 80084a4:	b002      	add	sp, #8
 80084a6:	4770      	bx	lr
 80084a8:	4610      	mov	r0, r2
 80084aa:	e7fb      	b.n	80084a4 <__ascii_mbtowc+0x16>
 80084ac:	f06f 0001 	mvn.w	r0, #1
 80084b0:	e7f8      	b.n	80084a4 <__ascii_mbtowc+0x16>

080084b2 <_realloc_r>:
 80084b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b6:	4680      	mov	r8, r0
 80084b8:	4615      	mov	r5, r2
 80084ba:	460c      	mov	r4, r1
 80084bc:	b921      	cbnz	r1, 80084c8 <_realloc_r+0x16>
 80084be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084c2:	4611      	mov	r1, r2
 80084c4:	f7fb bfae 	b.w	8004424 <_malloc_r>
 80084c8:	b92a      	cbnz	r2, 80084d6 <_realloc_r+0x24>
 80084ca:	f7fd fead 	bl	8006228 <_free_r>
 80084ce:	2400      	movs	r4, #0
 80084d0:	4620      	mov	r0, r4
 80084d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d6:	f000 f840 	bl	800855a <_malloc_usable_size_r>
 80084da:	4285      	cmp	r5, r0
 80084dc:	4606      	mov	r6, r0
 80084de:	d802      	bhi.n	80084e6 <_realloc_r+0x34>
 80084e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80084e4:	d8f4      	bhi.n	80084d0 <_realloc_r+0x1e>
 80084e6:	4629      	mov	r1, r5
 80084e8:	4640      	mov	r0, r8
 80084ea:	f7fb ff9b 	bl	8004424 <_malloc_r>
 80084ee:	4607      	mov	r7, r0
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d0ec      	beq.n	80084ce <_realloc_r+0x1c>
 80084f4:	42b5      	cmp	r5, r6
 80084f6:	462a      	mov	r2, r5
 80084f8:	4621      	mov	r1, r4
 80084fa:	bf28      	it	cs
 80084fc:	4632      	movcs	r2, r6
 80084fe:	f7ff fc45 	bl	8007d8c <memcpy>
 8008502:	4621      	mov	r1, r4
 8008504:	4640      	mov	r0, r8
 8008506:	f7fd fe8f 	bl	8006228 <_free_r>
 800850a:	463c      	mov	r4, r7
 800850c:	e7e0      	b.n	80084d0 <_realloc_r+0x1e>

0800850e <__ascii_wctomb>:
 800850e:	4603      	mov	r3, r0
 8008510:	4608      	mov	r0, r1
 8008512:	b141      	cbz	r1, 8008526 <__ascii_wctomb+0x18>
 8008514:	2aff      	cmp	r2, #255	@ 0xff
 8008516:	d904      	bls.n	8008522 <__ascii_wctomb+0x14>
 8008518:	228a      	movs	r2, #138	@ 0x8a
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	f04f 30ff 	mov.w	r0, #4294967295
 8008520:	4770      	bx	lr
 8008522:	700a      	strb	r2, [r1, #0]
 8008524:	2001      	movs	r0, #1
 8008526:	4770      	bx	lr

08008528 <fiprintf>:
 8008528:	b40e      	push	{r1, r2, r3}
 800852a:	b503      	push	{r0, r1, lr}
 800852c:	4601      	mov	r1, r0
 800852e:	ab03      	add	r3, sp, #12
 8008530:	4805      	ldr	r0, [pc, #20]	@ (8008548 <fiprintf+0x20>)
 8008532:	f853 2b04 	ldr.w	r2, [r3], #4
 8008536:	6800      	ldr	r0, [r0, #0]
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	f000 f83f 	bl	80085bc <_vfiprintf_r>
 800853e:	b002      	add	sp, #8
 8008540:	f85d eb04 	ldr.w	lr, [sp], #4
 8008544:	b003      	add	sp, #12
 8008546:	4770      	bx	lr
 8008548:	20003518 	.word	0x20003518

0800854c <abort>:
 800854c:	b508      	push	{r3, lr}
 800854e:	2006      	movs	r0, #6
 8008550:	f000 fa08 	bl	8008964 <raise>
 8008554:	2001      	movs	r0, #1
 8008556:	f7f9 fc02 	bl	8001d5e <_exit>

0800855a <_malloc_usable_size_r>:
 800855a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800855e:	1f18      	subs	r0, r3, #4
 8008560:	2b00      	cmp	r3, #0
 8008562:	bfbc      	itt	lt
 8008564:	580b      	ldrlt	r3, [r1, r0]
 8008566:	18c0      	addlt	r0, r0, r3
 8008568:	4770      	bx	lr

0800856a <__sfputc_r>:
 800856a:	6893      	ldr	r3, [r2, #8]
 800856c:	3b01      	subs	r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	b410      	push	{r4}
 8008572:	6093      	str	r3, [r2, #8]
 8008574:	da08      	bge.n	8008588 <__sfputc_r+0x1e>
 8008576:	6994      	ldr	r4, [r2, #24]
 8008578:	42a3      	cmp	r3, r4
 800857a:	db01      	blt.n	8008580 <__sfputc_r+0x16>
 800857c:	290a      	cmp	r1, #10
 800857e:	d103      	bne.n	8008588 <__sfputc_r+0x1e>
 8008580:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008584:	f000 b932 	b.w	80087ec <__swbuf_r>
 8008588:	6813      	ldr	r3, [r2, #0]
 800858a:	1c58      	adds	r0, r3, #1
 800858c:	6010      	str	r0, [r2, #0]
 800858e:	7019      	strb	r1, [r3, #0]
 8008590:	4608      	mov	r0, r1
 8008592:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008596:	4770      	bx	lr

08008598 <__sfputs_r>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	4606      	mov	r6, r0
 800859c:	460f      	mov	r7, r1
 800859e:	4614      	mov	r4, r2
 80085a0:	18d5      	adds	r5, r2, r3
 80085a2:	42ac      	cmp	r4, r5
 80085a4:	d101      	bne.n	80085aa <__sfputs_r+0x12>
 80085a6:	2000      	movs	r0, #0
 80085a8:	e007      	b.n	80085ba <__sfputs_r+0x22>
 80085aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ae:	463a      	mov	r2, r7
 80085b0:	4630      	mov	r0, r6
 80085b2:	f7ff ffda 	bl	800856a <__sfputc_r>
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	d1f3      	bne.n	80085a2 <__sfputs_r+0xa>
 80085ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085bc <_vfiprintf_r>:
 80085bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	460d      	mov	r5, r1
 80085c2:	b09d      	sub	sp, #116	@ 0x74
 80085c4:	4614      	mov	r4, r2
 80085c6:	4698      	mov	r8, r3
 80085c8:	4606      	mov	r6, r0
 80085ca:	b118      	cbz	r0, 80085d4 <_vfiprintf_r+0x18>
 80085cc:	6a03      	ldr	r3, [r0, #32]
 80085ce:	b90b      	cbnz	r3, 80085d4 <_vfiprintf_r+0x18>
 80085d0:	f7fc feac 	bl	800532c <__sinit>
 80085d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085d6:	07d9      	lsls	r1, r3, #31
 80085d8:	d405      	bmi.n	80085e6 <_vfiprintf_r+0x2a>
 80085da:	89ab      	ldrh	r3, [r5, #12]
 80085dc:	059a      	lsls	r2, r3, #22
 80085de:	d402      	bmi.n	80085e6 <_vfiprintf_r+0x2a>
 80085e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085e2:	f7fc ffca 	bl	800557a <__retarget_lock_acquire_recursive>
 80085e6:	89ab      	ldrh	r3, [r5, #12]
 80085e8:	071b      	lsls	r3, r3, #28
 80085ea:	d501      	bpl.n	80085f0 <_vfiprintf_r+0x34>
 80085ec:	692b      	ldr	r3, [r5, #16]
 80085ee:	b99b      	cbnz	r3, 8008618 <_vfiprintf_r+0x5c>
 80085f0:	4629      	mov	r1, r5
 80085f2:	4630      	mov	r0, r6
 80085f4:	f000 f938 	bl	8008868 <__swsetup_r>
 80085f8:	b170      	cbz	r0, 8008618 <_vfiprintf_r+0x5c>
 80085fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085fc:	07dc      	lsls	r4, r3, #31
 80085fe:	d504      	bpl.n	800860a <_vfiprintf_r+0x4e>
 8008600:	f04f 30ff 	mov.w	r0, #4294967295
 8008604:	b01d      	add	sp, #116	@ 0x74
 8008606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860a:	89ab      	ldrh	r3, [r5, #12]
 800860c:	0598      	lsls	r0, r3, #22
 800860e:	d4f7      	bmi.n	8008600 <_vfiprintf_r+0x44>
 8008610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008612:	f7fc ffb3 	bl	800557c <__retarget_lock_release_recursive>
 8008616:	e7f3      	b.n	8008600 <_vfiprintf_r+0x44>
 8008618:	2300      	movs	r3, #0
 800861a:	9309      	str	r3, [sp, #36]	@ 0x24
 800861c:	2320      	movs	r3, #32
 800861e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008622:	f8cd 800c 	str.w	r8, [sp, #12]
 8008626:	2330      	movs	r3, #48	@ 0x30
 8008628:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80087d8 <_vfiprintf_r+0x21c>
 800862c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008630:	f04f 0901 	mov.w	r9, #1
 8008634:	4623      	mov	r3, r4
 8008636:	469a      	mov	sl, r3
 8008638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800863c:	b10a      	cbz	r2, 8008642 <_vfiprintf_r+0x86>
 800863e:	2a25      	cmp	r2, #37	@ 0x25
 8008640:	d1f9      	bne.n	8008636 <_vfiprintf_r+0x7a>
 8008642:	ebba 0b04 	subs.w	fp, sl, r4
 8008646:	d00b      	beq.n	8008660 <_vfiprintf_r+0xa4>
 8008648:	465b      	mov	r3, fp
 800864a:	4622      	mov	r2, r4
 800864c:	4629      	mov	r1, r5
 800864e:	4630      	mov	r0, r6
 8008650:	f7ff ffa2 	bl	8008598 <__sfputs_r>
 8008654:	3001      	adds	r0, #1
 8008656:	f000 80a7 	beq.w	80087a8 <_vfiprintf_r+0x1ec>
 800865a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800865c:	445a      	add	r2, fp
 800865e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008660:	f89a 3000 	ldrb.w	r3, [sl]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 809f 	beq.w	80087a8 <_vfiprintf_r+0x1ec>
 800866a:	2300      	movs	r3, #0
 800866c:	f04f 32ff 	mov.w	r2, #4294967295
 8008670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008674:	f10a 0a01 	add.w	sl, sl, #1
 8008678:	9304      	str	r3, [sp, #16]
 800867a:	9307      	str	r3, [sp, #28]
 800867c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008680:	931a      	str	r3, [sp, #104]	@ 0x68
 8008682:	4654      	mov	r4, sl
 8008684:	2205      	movs	r2, #5
 8008686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800868a:	4853      	ldr	r0, [pc, #332]	@ (80087d8 <_vfiprintf_r+0x21c>)
 800868c:	f7f7 fda8 	bl	80001e0 <memchr>
 8008690:	9a04      	ldr	r2, [sp, #16]
 8008692:	b9d8      	cbnz	r0, 80086cc <_vfiprintf_r+0x110>
 8008694:	06d1      	lsls	r1, r2, #27
 8008696:	bf44      	itt	mi
 8008698:	2320      	movmi	r3, #32
 800869a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800869e:	0713      	lsls	r3, r2, #28
 80086a0:	bf44      	itt	mi
 80086a2:	232b      	movmi	r3, #43	@ 0x2b
 80086a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086a8:	f89a 3000 	ldrb.w	r3, [sl]
 80086ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80086ae:	d015      	beq.n	80086dc <_vfiprintf_r+0x120>
 80086b0:	9a07      	ldr	r2, [sp, #28]
 80086b2:	4654      	mov	r4, sl
 80086b4:	2000      	movs	r0, #0
 80086b6:	f04f 0c0a 	mov.w	ip, #10
 80086ba:	4621      	mov	r1, r4
 80086bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086c0:	3b30      	subs	r3, #48	@ 0x30
 80086c2:	2b09      	cmp	r3, #9
 80086c4:	d94b      	bls.n	800875e <_vfiprintf_r+0x1a2>
 80086c6:	b1b0      	cbz	r0, 80086f6 <_vfiprintf_r+0x13a>
 80086c8:	9207      	str	r2, [sp, #28]
 80086ca:	e014      	b.n	80086f6 <_vfiprintf_r+0x13a>
 80086cc:	eba0 0308 	sub.w	r3, r0, r8
 80086d0:	fa09 f303 	lsl.w	r3, r9, r3
 80086d4:	4313      	orrs	r3, r2
 80086d6:	9304      	str	r3, [sp, #16]
 80086d8:	46a2      	mov	sl, r4
 80086da:	e7d2      	b.n	8008682 <_vfiprintf_r+0xc6>
 80086dc:	9b03      	ldr	r3, [sp, #12]
 80086de:	1d19      	adds	r1, r3, #4
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	9103      	str	r1, [sp, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	bfbb      	ittet	lt
 80086e8:	425b      	neglt	r3, r3
 80086ea:	f042 0202 	orrlt.w	r2, r2, #2
 80086ee:	9307      	strge	r3, [sp, #28]
 80086f0:	9307      	strlt	r3, [sp, #28]
 80086f2:	bfb8      	it	lt
 80086f4:	9204      	strlt	r2, [sp, #16]
 80086f6:	7823      	ldrb	r3, [r4, #0]
 80086f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80086fa:	d10a      	bne.n	8008712 <_vfiprintf_r+0x156>
 80086fc:	7863      	ldrb	r3, [r4, #1]
 80086fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008700:	d132      	bne.n	8008768 <_vfiprintf_r+0x1ac>
 8008702:	9b03      	ldr	r3, [sp, #12]
 8008704:	1d1a      	adds	r2, r3, #4
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	9203      	str	r2, [sp, #12]
 800870a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800870e:	3402      	adds	r4, #2
 8008710:	9305      	str	r3, [sp, #20]
 8008712:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80087e8 <_vfiprintf_r+0x22c>
 8008716:	7821      	ldrb	r1, [r4, #0]
 8008718:	2203      	movs	r2, #3
 800871a:	4650      	mov	r0, sl
 800871c:	f7f7 fd60 	bl	80001e0 <memchr>
 8008720:	b138      	cbz	r0, 8008732 <_vfiprintf_r+0x176>
 8008722:	9b04      	ldr	r3, [sp, #16]
 8008724:	eba0 000a 	sub.w	r0, r0, sl
 8008728:	2240      	movs	r2, #64	@ 0x40
 800872a:	4082      	lsls	r2, r0
 800872c:	4313      	orrs	r3, r2
 800872e:	3401      	adds	r4, #1
 8008730:	9304      	str	r3, [sp, #16]
 8008732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008736:	4829      	ldr	r0, [pc, #164]	@ (80087dc <_vfiprintf_r+0x220>)
 8008738:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800873c:	2206      	movs	r2, #6
 800873e:	f7f7 fd4f 	bl	80001e0 <memchr>
 8008742:	2800      	cmp	r0, #0
 8008744:	d03f      	beq.n	80087c6 <_vfiprintf_r+0x20a>
 8008746:	4b26      	ldr	r3, [pc, #152]	@ (80087e0 <_vfiprintf_r+0x224>)
 8008748:	bb1b      	cbnz	r3, 8008792 <_vfiprintf_r+0x1d6>
 800874a:	9b03      	ldr	r3, [sp, #12]
 800874c:	3307      	adds	r3, #7
 800874e:	f023 0307 	bic.w	r3, r3, #7
 8008752:	3308      	adds	r3, #8
 8008754:	9303      	str	r3, [sp, #12]
 8008756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008758:	443b      	add	r3, r7
 800875a:	9309      	str	r3, [sp, #36]	@ 0x24
 800875c:	e76a      	b.n	8008634 <_vfiprintf_r+0x78>
 800875e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008762:	460c      	mov	r4, r1
 8008764:	2001      	movs	r0, #1
 8008766:	e7a8      	b.n	80086ba <_vfiprintf_r+0xfe>
 8008768:	2300      	movs	r3, #0
 800876a:	3401      	adds	r4, #1
 800876c:	9305      	str	r3, [sp, #20]
 800876e:	4619      	mov	r1, r3
 8008770:	f04f 0c0a 	mov.w	ip, #10
 8008774:	4620      	mov	r0, r4
 8008776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800877a:	3a30      	subs	r2, #48	@ 0x30
 800877c:	2a09      	cmp	r2, #9
 800877e:	d903      	bls.n	8008788 <_vfiprintf_r+0x1cc>
 8008780:	2b00      	cmp	r3, #0
 8008782:	d0c6      	beq.n	8008712 <_vfiprintf_r+0x156>
 8008784:	9105      	str	r1, [sp, #20]
 8008786:	e7c4      	b.n	8008712 <_vfiprintf_r+0x156>
 8008788:	fb0c 2101 	mla	r1, ip, r1, r2
 800878c:	4604      	mov	r4, r0
 800878e:	2301      	movs	r3, #1
 8008790:	e7f0      	b.n	8008774 <_vfiprintf_r+0x1b8>
 8008792:	ab03      	add	r3, sp, #12
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	462a      	mov	r2, r5
 8008798:	4b12      	ldr	r3, [pc, #72]	@ (80087e4 <_vfiprintf_r+0x228>)
 800879a:	a904      	add	r1, sp, #16
 800879c:	4630      	mov	r0, r6
 800879e:	f7fb ff6d 	bl	800467c <_printf_float>
 80087a2:	4607      	mov	r7, r0
 80087a4:	1c78      	adds	r0, r7, #1
 80087a6:	d1d6      	bne.n	8008756 <_vfiprintf_r+0x19a>
 80087a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087aa:	07d9      	lsls	r1, r3, #31
 80087ac:	d405      	bmi.n	80087ba <_vfiprintf_r+0x1fe>
 80087ae:	89ab      	ldrh	r3, [r5, #12]
 80087b0:	059a      	lsls	r2, r3, #22
 80087b2:	d402      	bmi.n	80087ba <_vfiprintf_r+0x1fe>
 80087b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087b6:	f7fc fee1 	bl	800557c <__retarget_lock_release_recursive>
 80087ba:	89ab      	ldrh	r3, [r5, #12]
 80087bc:	065b      	lsls	r3, r3, #25
 80087be:	f53f af1f 	bmi.w	8008600 <_vfiprintf_r+0x44>
 80087c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087c4:	e71e      	b.n	8008604 <_vfiprintf_r+0x48>
 80087c6:	ab03      	add	r3, sp, #12
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	462a      	mov	r2, r5
 80087cc:	4b05      	ldr	r3, [pc, #20]	@ (80087e4 <_vfiprintf_r+0x228>)
 80087ce:	a904      	add	r1, sp, #16
 80087d0:	4630      	mov	r0, r6
 80087d2:	f7fc f9eb 	bl	8004bac <_printf_i>
 80087d6:	e7e4      	b.n	80087a2 <_vfiprintf_r+0x1e6>
 80087d8:	0800a559 	.word	0x0800a559
 80087dc:	0800a563 	.word	0x0800a563
 80087e0:	0800467d 	.word	0x0800467d
 80087e4:	08008599 	.word	0x08008599
 80087e8:	0800a55f 	.word	0x0800a55f

080087ec <__swbuf_r>:
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	460e      	mov	r6, r1
 80087f0:	4614      	mov	r4, r2
 80087f2:	4605      	mov	r5, r0
 80087f4:	b118      	cbz	r0, 80087fe <__swbuf_r+0x12>
 80087f6:	6a03      	ldr	r3, [r0, #32]
 80087f8:	b90b      	cbnz	r3, 80087fe <__swbuf_r+0x12>
 80087fa:	f7fc fd97 	bl	800532c <__sinit>
 80087fe:	69a3      	ldr	r3, [r4, #24]
 8008800:	60a3      	str	r3, [r4, #8]
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	071a      	lsls	r2, r3, #28
 8008806:	d501      	bpl.n	800880c <__swbuf_r+0x20>
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	b943      	cbnz	r3, 800881e <__swbuf_r+0x32>
 800880c:	4621      	mov	r1, r4
 800880e:	4628      	mov	r0, r5
 8008810:	f000 f82a 	bl	8008868 <__swsetup_r>
 8008814:	b118      	cbz	r0, 800881e <__swbuf_r+0x32>
 8008816:	f04f 37ff 	mov.w	r7, #4294967295
 800881a:	4638      	mov	r0, r7
 800881c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	6922      	ldr	r2, [r4, #16]
 8008822:	1a98      	subs	r0, r3, r2
 8008824:	6963      	ldr	r3, [r4, #20]
 8008826:	b2f6      	uxtb	r6, r6
 8008828:	4283      	cmp	r3, r0
 800882a:	4637      	mov	r7, r6
 800882c:	dc05      	bgt.n	800883a <__swbuf_r+0x4e>
 800882e:	4621      	mov	r1, r4
 8008830:	4628      	mov	r0, r5
 8008832:	f7ff fa57 	bl	8007ce4 <_fflush_r>
 8008836:	2800      	cmp	r0, #0
 8008838:	d1ed      	bne.n	8008816 <__swbuf_r+0x2a>
 800883a:	68a3      	ldr	r3, [r4, #8]
 800883c:	3b01      	subs	r3, #1
 800883e:	60a3      	str	r3, [r4, #8]
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	1c5a      	adds	r2, r3, #1
 8008844:	6022      	str	r2, [r4, #0]
 8008846:	701e      	strb	r6, [r3, #0]
 8008848:	6962      	ldr	r2, [r4, #20]
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	429a      	cmp	r2, r3
 800884e:	d004      	beq.n	800885a <__swbuf_r+0x6e>
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	07db      	lsls	r3, r3, #31
 8008854:	d5e1      	bpl.n	800881a <__swbuf_r+0x2e>
 8008856:	2e0a      	cmp	r6, #10
 8008858:	d1df      	bne.n	800881a <__swbuf_r+0x2e>
 800885a:	4621      	mov	r1, r4
 800885c:	4628      	mov	r0, r5
 800885e:	f7ff fa41 	bl	8007ce4 <_fflush_r>
 8008862:	2800      	cmp	r0, #0
 8008864:	d0d9      	beq.n	800881a <__swbuf_r+0x2e>
 8008866:	e7d6      	b.n	8008816 <__swbuf_r+0x2a>

08008868 <__swsetup_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4b29      	ldr	r3, [pc, #164]	@ (8008910 <__swsetup_r+0xa8>)
 800886c:	4605      	mov	r5, r0
 800886e:	6818      	ldr	r0, [r3, #0]
 8008870:	460c      	mov	r4, r1
 8008872:	b118      	cbz	r0, 800887c <__swsetup_r+0x14>
 8008874:	6a03      	ldr	r3, [r0, #32]
 8008876:	b90b      	cbnz	r3, 800887c <__swsetup_r+0x14>
 8008878:	f7fc fd58 	bl	800532c <__sinit>
 800887c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008880:	0719      	lsls	r1, r3, #28
 8008882:	d422      	bmi.n	80088ca <__swsetup_r+0x62>
 8008884:	06da      	lsls	r2, r3, #27
 8008886:	d407      	bmi.n	8008898 <__swsetup_r+0x30>
 8008888:	2209      	movs	r2, #9
 800888a:	602a      	str	r2, [r5, #0]
 800888c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008890:	81a3      	strh	r3, [r4, #12]
 8008892:	f04f 30ff 	mov.w	r0, #4294967295
 8008896:	e033      	b.n	8008900 <__swsetup_r+0x98>
 8008898:	0758      	lsls	r0, r3, #29
 800889a:	d512      	bpl.n	80088c2 <__swsetup_r+0x5a>
 800889c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800889e:	b141      	cbz	r1, 80088b2 <__swsetup_r+0x4a>
 80088a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088a4:	4299      	cmp	r1, r3
 80088a6:	d002      	beq.n	80088ae <__swsetup_r+0x46>
 80088a8:	4628      	mov	r0, r5
 80088aa:	f7fd fcbd 	bl	8006228 <_free_r>
 80088ae:	2300      	movs	r3, #0
 80088b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088b8:	81a3      	strh	r3, [r4, #12]
 80088ba:	2300      	movs	r3, #0
 80088bc:	6063      	str	r3, [r4, #4]
 80088be:	6923      	ldr	r3, [r4, #16]
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	f043 0308 	orr.w	r3, r3, #8
 80088c8:	81a3      	strh	r3, [r4, #12]
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	b94b      	cbnz	r3, 80088e2 <__swsetup_r+0x7a>
 80088ce:	89a3      	ldrh	r3, [r4, #12]
 80088d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088d8:	d003      	beq.n	80088e2 <__swsetup_r+0x7a>
 80088da:	4621      	mov	r1, r4
 80088dc:	4628      	mov	r0, r5
 80088de:	f000 f883 	bl	80089e8 <__smakebuf_r>
 80088e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e6:	f013 0201 	ands.w	r2, r3, #1
 80088ea:	d00a      	beq.n	8008902 <__swsetup_r+0x9a>
 80088ec:	2200      	movs	r2, #0
 80088ee:	60a2      	str	r2, [r4, #8]
 80088f0:	6962      	ldr	r2, [r4, #20]
 80088f2:	4252      	negs	r2, r2
 80088f4:	61a2      	str	r2, [r4, #24]
 80088f6:	6922      	ldr	r2, [r4, #16]
 80088f8:	b942      	cbnz	r2, 800890c <__swsetup_r+0xa4>
 80088fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088fe:	d1c5      	bne.n	800888c <__swsetup_r+0x24>
 8008900:	bd38      	pop	{r3, r4, r5, pc}
 8008902:	0799      	lsls	r1, r3, #30
 8008904:	bf58      	it	pl
 8008906:	6962      	ldrpl	r2, [r4, #20]
 8008908:	60a2      	str	r2, [r4, #8]
 800890a:	e7f4      	b.n	80088f6 <__swsetup_r+0x8e>
 800890c:	2000      	movs	r0, #0
 800890e:	e7f7      	b.n	8008900 <__swsetup_r+0x98>
 8008910:	20003518 	.word	0x20003518

08008914 <_raise_r>:
 8008914:	291f      	cmp	r1, #31
 8008916:	b538      	push	{r3, r4, r5, lr}
 8008918:	4605      	mov	r5, r0
 800891a:	460c      	mov	r4, r1
 800891c:	d904      	bls.n	8008928 <_raise_r+0x14>
 800891e:	2316      	movs	r3, #22
 8008920:	6003      	str	r3, [r0, #0]
 8008922:	f04f 30ff 	mov.w	r0, #4294967295
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800892a:	b112      	cbz	r2, 8008932 <_raise_r+0x1e>
 800892c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008930:	b94b      	cbnz	r3, 8008946 <_raise_r+0x32>
 8008932:	4628      	mov	r0, r5
 8008934:	f000 f830 	bl	8008998 <_getpid_r>
 8008938:	4622      	mov	r2, r4
 800893a:	4601      	mov	r1, r0
 800893c:	4628      	mov	r0, r5
 800893e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008942:	f000 b817 	b.w	8008974 <_kill_r>
 8008946:	2b01      	cmp	r3, #1
 8008948:	d00a      	beq.n	8008960 <_raise_r+0x4c>
 800894a:	1c59      	adds	r1, r3, #1
 800894c:	d103      	bne.n	8008956 <_raise_r+0x42>
 800894e:	2316      	movs	r3, #22
 8008950:	6003      	str	r3, [r0, #0]
 8008952:	2001      	movs	r0, #1
 8008954:	e7e7      	b.n	8008926 <_raise_r+0x12>
 8008956:	2100      	movs	r1, #0
 8008958:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800895c:	4620      	mov	r0, r4
 800895e:	4798      	blx	r3
 8008960:	2000      	movs	r0, #0
 8008962:	e7e0      	b.n	8008926 <_raise_r+0x12>

08008964 <raise>:
 8008964:	4b02      	ldr	r3, [pc, #8]	@ (8008970 <raise+0xc>)
 8008966:	4601      	mov	r1, r0
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	f7ff bfd3 	b.w	8008914 <_raise_r>
 800896e:	bf00      	nop
 8008970:	20003518 	.word	0x20003518

08008974 <_kill_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4d07      	ldr	r5, [pc, #28]	@ (8008994 <_kill_r+0x20>)
 8008978:	2300      	movs	r3, #0
 800897a:	4604      	mov	r4, r0
 800897c:	4608      	mov	r0, r1
 800897e:	4611      	mov	r1, r2
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	f7f9 f9dc 	bl	8001d3e <_kill>
 8008986:	1c43      	adds	r3, r0, #1
 8008988:	d102      	bne.n	8008990 <_kill_r+0x1c>
 800898a:	682b      	ldr	r3, [r5, #0]
 800898c:	b103      	cbz	r3, 8008990 <_kill_r+0x1c>
 800898e:	6023      	str	r3, [r4, #0]
 8008990:	bd38      	pop	{r3, r4, r5, pc}
 8008992:	bf00      	nop
 8008994:	200038fc 	.word	0x200038fc

08008998 <_getpid_r>:
 8008998:	f7f9 b9c9 	b.w	8001d2e <_getpid>

0800899c <__swhatbuf_r>:
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	460c      	mov	r4, r1
 80089a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a4:	2900      	cmp	r1, #0
 80089a6:	b096      	sub	sp, #88	@ 0x58
 80089a8:	4615      	mov	r5, r2
 80089aa:	461e      	mov	r6, r3
 80089ac:	da0d      	bge.n	80089ca <__swhatbuf_r+0x2e>
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089b4:	f04f 0100 	mov.w	r1, #0
 80089b8:	bf14      	ite	ne
 80089ba:	2340      	movne	r3, #64	@ 0x40
 80089bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089c0:	2000      	movs	r0, #0
 80089c2:	6031      	str	r1, [r6, #0]
 80089c4:	602b      	str	r3, [r5, #0]
 80089c6:	b016      	add	sp, #88	@ 0x58
 80089c8:	bd70      	pop	{r4, r5, r6, pc}
 80089ca:	466a      	mov	r2, sp
 80089cc:	f000 f848 	bl	8008a60 <_fstat_r>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	dbec      	blt.n	80089ae <__swhatbuf_r+0x12>
 80089d4:	9901      	ldr	r1, [sp, #4]
 80089d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089de:	4259      	negs	r1, r3
 80089e0:	4159      	adcs	r1, r3
 80089e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089e6:	e7eb      	b.n	80089c0 <__swhatbuf_r+0x24>

080089e8 <__smakebuf_r>:
 80089e8:	898b      	ldrh	r3, [r1, #12]
 80089ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089ec:	079d      	lsls	r5, r3, #30
 80089ee:	4606      	mov	r6, r0
 80089f0:	460c      	mov	r4, r1
 80089f2:	d507      	bpl.n	8008a04 <__smakebuf_r+0x1c>
 80089f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	6123      	str	r3, [r4, #16]
 80089fc:	2301      	movs	r3, #1
 80089fe:	6163      	str	r3, [r4, #20]
 8008a00:	b003      	add	sp, #12
 8008a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a04:	ab01      	add	r3, sp, #4
 8008a06:	466a      	mov	r2, sp
 8008a08:	f7ff ffc8 	bl	800899c <__swhatbuf_r>
 8008a0c:	9f00      	ldr	r7, [sp, #0]
 8008a0e:	4605      	mov	r5, r0
 8008a10:	4639      	mov	r1, r7
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7fb fd06 	bl	8004424 <_malloc_r>
 8008a18:	b948      	cbnz	r0, 8008a2e <__smakebuf_r+0x46>
 8008a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a1e:	059a      	lsls	r2, r3, #22
 8008a20:	d4ee      	bmi.n	8008a00 <__smakebuf_r+0x18>
 8008a22:	f023 0303 	bic.w	r3, r3, #3
 8008a26:	f043 0302 	orr.w	r3, r3, #2
 8008a2a:	81a3      	strh	r3, [r4, #12]
 8008a2c:	e7e2      	b.n	80089f4 <__smakebuf_r+0xc>
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	6020      	str	r0, [r4, #0]
 8008a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a36:	81a3      	strh	r3, [r4, #12]
 8008a38:	9b01      	ldr	r3, [sp, #4]
 8008a3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a3e:	b15b      	cbz	r3, 8008a58 <__smakebuf_r+0x70>
 8008a40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a44:	4630      	mov	r0, r6
 8008a46:	f000 f81d 	bl	8008a84 <_isatty_r>
 8008a4a:	b128      	cbz	r0, 8008a58 <__smakebuf_r+0x70>
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	f023 0303 	bic.w	r3, r3, #3
 8008a52:	f043 0301 	orr.w	r3, r3, #1
 8008a56:	81a3      	strh	r3, [r4, #12]
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	431d      	orrs	r5, r3
 8008a5c:	81a5      	strh	r5, [r4, #12]
 8008a5e:	e7cf      	b.n	8008a00 <__smakebuf_r+0x18>

08008a60 <_fstat_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4d07      	ldr	r5, [pc, #28]	@ (8008a80 <_fstat_r+0x20>)
 8008a64:	2300      	movs	r3, #0
 8008a66:	4604      	mov	r4, r0
 8008a68:	4608      	mov	r0, r1
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	602b      	str	r3, [r5, #0]
 8008a6e:	f7f9 f9c6 	bl	8001dfe <_fstat>
 8008a72:	1c43      	adds	r3, r0, #1
 8008a74:	d102      	bne.n	8008a7c <_fstat_r+0x1c>
 8008a76:	682b      	ldr	r3, [r5, #0]
 8008a78:	b103      	cbz	r3, 8008a7c <_fstat_r+0x1c>
 8008a7a:	6023      	str	r3, [r4, #0]
 8008a7c:	bd38      	pop	{r3, r4, r5, pc}
 8008a7e:	bf00      	nop
 8008a80:	200038fc 	.word	0x200038fc

08008a84 <_isatty_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4d06      	ldr	r5, [pc, #24]	@ (8008aa0 <_isatty_r+0x1c>)
 8008a88:	2300      	movs	r3, #0
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	602b      	str	r3, [r5, #0]
 8008a90:	f7f9 f9c5 	bl	8001e1e <_isatty>
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	d102      	bne.n	8008a9e <_isatty_r+0x1a>
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	b103      	cbz	r3, 8008a9e <_isatty_r+0x1a>
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	200038fc 	.word	0x200038fc

08008aa4 <pow>:
 8008aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa6:	ed2d 8b02 	vpush	{d8}
 8008aaa:	eeb0 8a40 	vmov.f32	s16, s0
 8008aae:	eef0 8a60 	vmov.f32	s17, s1
 8008ab2:	ec55 4b11 	vmov	r4, r5, d1
 8008ab6:	f000 f977 	bl	8008da8 <__ieee754_pow>
 8008aba:	4622      	mov	r2, r4
 8008abc:	462b      	mov	r3, r5
 8008abe:	4620      	mov	r0, r4
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	ec57 6b10 	vmov	r6, r7, d0
 8008ac6:	f7f8 f839 	bl	8000b3c <__aeabi_dcmpun>
 8008aca:	2800      	cmp	r0, #0
 8008acc:	d13b      	bne.n	8008b46 <pow+0xa2>
 8008ace:	ec51 0b18 	vmov	r0, r1, d8
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f7f7 ffff 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ada:	b1b8      	cbz	r0, 8008b0c <pow+0x68>
 8008adc:	2200      	movs	r2, #0
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	f7f7 fff8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d146      	bne.n	8008b7a <pow+0xd6>
 8008aec:	ec45 4b10 	vmov	d0, r4, r5
 8008af0:	f000 f874 	bl	8008bdc <finite>
 8008af4:	b338      	cbz	r0, 8008b46 <pow+0xa2>
 8008af6:	2200      	movs	r2, #0
 8008af8:	2300      	movs	r3, #0
 8008afa:	4620      	mov	r0, r4
 8008afc:	4629      	mov	r1, r5
 8008afe:	f7f7 fff5 	bl	8000aec <__aeabi_dcmplt>
 8008b02:	b300      	cbz	r0, 8008b46 <pow+0xa2>
 8008b04:	f7fc fd0e 	bl	8005524 <__errno>
 8008b08:	2322      	movs	r3, #34	@ 0x22
 8008b0a:	e01b      	b.n	8008b44 <pow+0xa0>
 8008b0c:	ec47 6b10 	vmov	d0, r6, r7
 8008b10:	f000 f864 	bl	8008bdc <finite>
 8008b14:	b9e0      	cbnz	r0, 8008b50 <pow+0xac>
 8008b16:	eeb0 0a48 	vmov.f32	s0, s16
 8008b1a:	eef0 0a68 	vmov.f32	s1, s17
 8008b1e:	f000 f85d 	bl	8008bdc <finite>
 8008b22:	b1a8      	cbz	r0, 8008b50 <pow+0xac>
 8008b24:	ec45 4b10 	vmov	d0, r4, r5
 8008b28:	f000 f858 	bl	8008bdc <finite>
 8008b2c:	b180      	cbz	r0, 8008b50 <pow+0xac>
 8008b2e:	4632      	mov	r2, r6
 8008b30:	463b      	mov	r3, r7
 8008b32:	4630      	mov	r0, r6
 8008b34:	4639      	mov	r1, r7
 8008b36:	f7f8 f801 	bl	8000b3c <__aeabi_dcmpun>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d0e2      	beq.n	8008b04 <pow+0x60>
 8008b3e:	f7fc fcf1 	bl	8005524 <__errno>
 8008b42:	2321      	movs	r3, #33	@ 0x21
 8008b44:	6003      	str	r3, [r0, #0]
 8008b46:	ecbd 8b02 	vpop	{d8}
 8008b4a:	ec47 6b10 	vmov	d0, r6, r7
 8008b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b50:	2200      	movs	r2, #0
 8008b52:	2300      	movs	r3, #0
 8008b54:	4630      	mov	r0, r6
 8008b56:	4639      	mov	r1, r7
 8008b58:	f7f7 ffbe 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d0f2      	beq.n	8008b46 <pow+0xa2>
 8008b60:	eeb0 0a48 	vmov.f32	s0, s16
 8008b64:	eef0 0a68 	vmov.f32	s1, s17
 8008b68:	f000 f838 	bl	8008bdc <finite>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d0ea      	beq.n	8008b46 <pow+0xa2>
 8008b70:	ec45 4b10 	vmov	d0, r4, r5
 8008b74:	f000 f832 	bl	8008bdc <finite>
 8008b78:	e7c3      	b.n	8008b02 <pow+0x5e>
 8008b7a:	4f01      	ldr	r7, [pc, #4]	@ (8008b80 <pow+0xdc>)
 8008b7c:	2600      	movs	r6, #0
 8008b7e:	e7e2      	b.n	8008b46 <pow+0xa2>
 8008b80:	3ff00000 	.word	0x3ff00000

08008b84 <sqrt>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	ed2d 8b02 	vpush	{d8}
 8008b8a:	ec55 4b10 	vmov	r4, r5, d0
 8008b8e:	f000 f831 	bl	8008bf4 <__ieee754_sqrt>
 8008b92:	4622      	mov	r2, r4
 8008b94:	462b      	mov	r3, r5
 8008b96:	4620      	mov	r0, r4
 8008b98:	4629      	mov	r1, r5
 8008b9a:	eeb0 8a40 	vmov.f32	s16, s0
 8008b9e:	eef0 8a60 	vmov.f32	s17, s1
 8008ba2:	f7f7 ffcb 	bl	8000b3c <__aeabi_dcmpun>
 8008ba6:	b990      	cbnz	r0, 8008bce <sqrt+0x4a>
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2300      	movs	r3, #0
 8008bac:	4620      	mov	r0, r4
 8008bae:	4629      	mov	r1, r5
 8008bb0:	f7f7 ff9c 	bl	8000aec <__aeabi_dcmplt>
 8008bb4:	b158      	cbz	r0, 8008bce <sqrt+0x4a>
 8008bb6:	f7fc fcb5 	bl	8005524 <__errno>
 8008bba:	2321      	movs	r3, #33	@ 0x21
 8008bbc:	6003      	str	r3, [r0, #0]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	f7f7 fe49 	bl	800085c <__aeabi_ddiv>
 8008bca:	ec41 0b18 	vmov	d8, r0, r1
 8008bce:	eeb0 0a48 	vmov.f32	s0, s16
 8008bd2:	eef0 0a68 	vmov.f32	s1, s17
 8008bd6:	ecbd 8b02 	vpop	{d8}
 8008bda:	bd38      	pop	{r3, r4, r5, pc}

08008bdc <finite>:
 8008bdc:	b082      	sub	sp, #8
 8008bde:	ed8d 0b00 	vstr	d0, [sp]
 8008be2:	9801      	ldr	r0, [sp, #4]
 8008be4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008be8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008bec:	0fc0      	lsrs	r0, r0, #31
 8008bee:	b002      	add	sp, #8
 8008bf0:	4770      	bx	lr
	...

08008bf4 <__ieee754_sqrt>:
 8008bf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf8:	4a68      	ldr	r2, [pc, #416]	@ (8008d9c <__ieee754_sqrt+0x1a8>)
 8008bfa:	ec55 4b10 	vmov	r4, r5, d0
 8008bfe:	43aa      	bics	r2, r5
 8008c00:	462b      	mov	r3, r5
 8008c02:	4621      	mov	r1, r4
 8008c04:	d110      	bne.n	8008c28 <__ieee754_sqrt+0x34>
 8008c06:	4622      	mov	r2, r4
 8008c08:	4620      	mov	r0, r4
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	f7f7 fcfc 	bl	8000608 <__aeabi_dmul>
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	4620      	mov	r0, r4
 8008c16:	4629      	mov	r1, r5
 8008c18:	f7f7 fb40 	bl	800029c <__adddf3>
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	460d      	mov	r5, r1
 8008c20:	ec45 4b10 	vmov	d0, r4, r5
 8008c24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c28:	2d00      	cmp	r5, #0
 8008c2a:	dc0e      	bgt.n	8008c4a <__ieee754_sqrt+0x56>
 8008c2c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008c30:	4322      	orrs	r2, r4
 8008c32:	d0f5      	beq.n	8008c20 <__ieee754_sqrt+0x2c>
 8008c34:	b19d      	cbz	r5, 8008c5e <__ieee754_sqrt+0x6a>
 8008c36:	4622      	mov	r2, r4
 8008c38:	4620      	mov	r0, r4
 8008c3a:	4629      	mov	r1, r5
 8008c3c:	f7f7 fb2c 	bl	8000298 <__aeabi_dsub>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	f7f7 fe0a 	bl	800085c <__aeabi_ddiv>
 8008c48:	e7e8      	b.n	8008c1c <__ieee754_sqrt+0x28>
 8008c4a:	152a      	asrs	r2, r5, #20
 8008c4c:	d115      	bne.n	8008c7a <__ieee754_sqrt+0x86>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	e009      	b.n	8008c66 <__ieee754_sqrt+0x72>
 8008c52:	0acb      	lsrs	r3, r1, #11
 8008c54:	3a15      	subs	r2, #21
 8008c56:	0549      	lsls	r1, r1, #21
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0fa      	beq.n	8008c52 <__ieee754_sqrt+0x5e>
 8008c5c:	e7f7      	b.n	8008c4e <__ieee754_sqrt+0x5a>
 8008c5e:	462a      	mov	r2, r5
 8008c60:	e7fa      	b.n	8008c58 <__ieee754_sqrt+0x64>
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	3001      	adds	r0, #1
 8008c66:	02dc      	lsls	r4, r3, #11
 8008c68:	d5fb      	bpl.n	8008c62 <__ieee754_sqrt+0x6e>
 8008c6a:	1e44      	subs	r4, r0, #1
 8008c6c:	1b12      	subs	r2, r2, r4
 8008c6e:	f1c0 0420 	rsb	r4, r0, #32
 8008c72:	fa21 f404 	lsr.w	r4, r1, r4
 8008c76:	4323      	orrs	r3, r4
 8008c78:	4081      	lsls	r1, r0
 8008c7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c7e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8008c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c86:	07d2      	lsls	r2, r2, #31
 8008c88:	bf5c      	itt	pl
 8008c8a:	005b      	lslpl	r3, r3, #1
 8008c8c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c94:	bf58      	it	pl
 8008c96:	0049      	lslpl	r1, r1, #1
 8008c98:	2600      	movs	r6, #0
 8008c9a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008c9e:	106d      	asrs	r5, r5, #1
 8008ca0:	0049      	lsls	r1, r1, #1
 8008ca2:	2016      	movs	r0, #22
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008caa:	1917      	adds	r7, r2, r4
 8008cac:	429f      	cmp	r7, r3
 8008cae:	bfde      	ittt	le
 8008cb0:	193a      	addle	r2, r7, r4
 8008cb2:	1bdb      	suble	r3, r3, r7
 8008cb4:	1936      	addle	r6, r6, r4
 8008cb6:	0fcf      	lsrs	r7, r1, #31
 8008cb8:	3801      	subs	r0, #1
 8008cba:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8008cbe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008cc2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008cc6:	d1f0      	bne.n	8008caa <__ieee754_sqrt+0xb6>
 8008cc8:	4604      	mov	r4, r0
 8008cca:	2720      	movs	r7, #32
 8008ccc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	eb00 0e0c 	add.w	lr, r0, ip
 8008cd6:	db02      	blt.n	8008cde <__ieee754_sqrt+0xea>
 8008cd8:	d113      	bne.n	8008d02 <__ieee754_sqrt+0x10e>
 8008cda:	458e      	cmp	lr, r1
 8008cdc:	d811      	bhi.n	8008d02 <__ieee754_sqrt+0x10e>
 8008cde:	f1be 0f00 	cmp.w	lr, #0
 8008ce2:	eb0e 000c 	add.w	r0, lr, ip
 8008ce6:	da42      	bge.n	8008d6e <__ieee754_sqrt+0x17a>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	db40      	blt.n	8008d6e <__ieee754_sqrt+0x17a>
 8008cec:	f102 0801 	add.w	r8, r2, #1
 8008cf0:	1a9b      	subs	r3, r3, r2
 8008cf2:	458e      	cmp	lr, r1
 8008cf4:	bf88      	it	hi
 8008cf6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008cfa:	eba1 010e 	sub.w	r1, r1, lr
 8008cfe:	4464      	add	r4, ip
 8008d00:	4642      	mov	r2, r8
 8008d02:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008d06:	3f01      	subs	r7, #1
 8008d08:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008d0c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d10:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008d14:	d1dc      	bne.n	8008cd0 <__ieee754_sqrt+0xdc>
 8008d16:	4319      	orrs	r1, r3
 8008d18:	d01b      	beq.n	8008d52 <__ieee754_sqrt+0x15e>
 8008d1a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008da0 <__ieee754_sqrt+0x1ac>
 8008d1e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008da4 <__ieee754_sqrt+0x1b0>
 8008d22:	e9da 0100 	ldrd	r0, r1, [sl]
 8008d26:	e9db 2300 	ldrd	r2, r3, [fp]
 8008d2a:	f7f7 fab5 	bl	8000298 <__aeabi_dsub>
 8008d2e:	e9da 8900 	ldrd	r8, r9, [sl]
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4640      	mov	r0, r8
 8008d38:	4649      	mov	r1, r9
 8008d3a:	f7f7 fee1 	bl	8000b00 <__aeabi_dcmple>
 8008d3e:	b140      	cbz	r0, 8008d52 <__ieee754_sqrt+0x15e>
 8008d40:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008d44:	e9da 0100 	ldrd	r0, r1, [sl]
 8008d48:	e9db 2300 	ldrd	r2, r3, [fp]
 8008d4c:	d111      	bne.n	8008d72 <__ieee754_sqrt+0x17e>
 8008d4e:	3601      	adds	r6, #1
 8008d50:	463c      	mov	r4, r7
 8008d52:	1072      	asrs	r2, r6, #1
 8008d54:	0863      	lsrs	r3, r4, #1
 8008d56:	07f1      	lsls	r1, r6, #31
 8008d58:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008d5c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008d60:	bf48      	it	mi
 8008d62:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008d66:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	e756      	b.n	8008c1c <__ieee754_sqrt+0x28>
 8008d6e:	4690      	mov	r8, r2
 8008d70:	e7be      	b.n	8008cf0 <__ieee754_sqrt+0xfc>
 8008d72:	f7f7 fa93 	bl	800029c <__adddf3>
 8008d76:	e9da 8900 	ldrd	r8, r9, [sl]
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4640      	mov	r0, r8
 8008d80:	4649      	mov	r1, r9
 8008d82:	f7f7 feb3 	bl	8000aec <__aeabi_dcmplt>
 8008d86:	b120      	cbz	r0, 8008d92 <__ieee754_sqrt+0x19e>
 8008d88:	1ca0      	adds	r0, r4, #2
 8008d8a:	bf08      	it	eq
 8008d8c:	3601      	addeq	r6, #1
 8008d8e:	3402      	adds	r4, #2
 8008d90:	e7df      	b.n	8008d52 <__ieee754_sqrt+0x15e>
 8008d92:	1c63      	adds	r3, r4, #1
 8008d94:	f023 0401 	bic.w	r4, r3, #1
 8008d98:	e7db      	b.n	8008d52 <__ieee754_sqrt+0x15e>
 8008d9a:	bf00      	nop
 8008d9c:	7ff00000 	.word	0x7ff00000
 8008da0:	200036e0 	.word	0x200036e0
 8008da4:	200036d8 	.word	0x200036d8

08008da8 <__ieee754_pow>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	b091      	sub	sp, #68	@ 0x44
 8008dae:	ed8d 1b00 	vstr	d1, [sp]
 8008db2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008db6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008dba:	ea5a 0001 	orrs.w	r0, sl, r1
 8008dbe:	ec57 6b10 	vmov	r6, r7, d0
 8008dc2:	d113      	bne.n	8008dec <__ieee754_pow+0x44>
 8008dc4:	19b3      	adds	r3, r6, r6
 8008dc6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008dca:	4152      	adcs	r2, r2
 8008dcc:	4298      	cmp	r0, r3
 8008dce:	4b98      	ldr	r3, [pc, #608]	@ (8009030 <__ieee754_pow+0x288>)
 8008dd0:	4193      	sbcs	r3, r2
 8008dd2:	f080 84ea 	bcs.w	80097aa <__ieee754_pow+0xa02>
 8008dd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dda:	4630      	mov	r0, r6
 8008ddc:	4639      	mov	r1, r7
 8008dde:	f7f7 fa5d 	bl	800029c <__adddf3>
 8008de2:	ec41 0b10 	vmov	d0, r0, r1
 8008de6:	b011      	add	sp, #68	@ 0x44
 8008de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dec:	4a91      	ldr	r2, [pc, #580]	@ (8009034 <__ieee754_pow+0x28c>)
 8008dee:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008df2:	4590      	cmp	r8, r2
 8008df4:	463d      	mov	r5, r7
 8008df6:	4633      	mov	r3, r6
 8008df8:	d806      	bhi.n	8008e08 <__ieee754_pow+0x60>
 8008dfa:	d101      	bne.n	8008e00 <__ieee754_pow+0x58>
 8008dfc:	2e00      	cmp	r6, #0
 8008dfe:	d1ea      	bne.n	8008dd6 <__ieee754_pow+0x2e>
 8008e00:	4592      	cmp	sl, r2
 8008e02:	d801      	bhi.n	8008e08 <__ieee754_pow+0x60>
 8008e04:	d10e      	bne.n	8008e24 <__ieee754_pow+0x7c>
 8008e06:	b169      	cbz	r1, 8008e24 <__ieee754_pow+0x7c>
 8008e08:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008e0c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008e10:	431d      	orrs	r5, r3
 8008e12:	d1e0      	bne.n	8008dd6 <__ieee754_pow+0x2e>
 8008e14:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008e18:	18db      	adds	r3, r3, r3
 8008e1a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008e1e:	4152      	adcs	r2, r2
 8008e20:	429d      	cmp	r5, r3
 8008e22:	e7d4      	b.n	8008dce <__ieee754_pow+0x26>
 8008e24:	2d00      	cmp	r5, #0
 8008e26:	46c3      	mov	fp, r8
 8008e28:	da3a      	bge.n	8008ea0 <__ieee754_pow+0xf8>
 8008e2a:	4a83      	ldr	r2, [pc, #524]	@ (8009038 <__ieee754_pow+0x290>)
 8008e2c:	4592      	cmp	sl, r2
 8008e2e:	d84d      	bhi.n	8008ecc <__ieee754_pow+0x124>
 8008e30:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008e34:	4592      	cmp	sl, r2
 8008e36:	f240 84c7 	bls.w	80097c8 <__ieee754_pow+0xa20>
 8008e3a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008e3e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008e42:	2a14      	cmp	r2, #20
 8008e44:	dd0f      	ble.n	8008e66 <__ieee754_pow+0xbe>
 8008e46:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008e4a:	fa21 f402 	lsr.w	r4, r1, r2
 8008e4e:	fa04 f202 	lsl.w	r2, r4, r2
 8008e52:	428a      	cmp	r2, r1
 8008e54:	f040 84b8 	bne.w	80097c8 <__ieee754_pow+0xa20>
 8008e58:	f004 0401 	and.w	r4, r4, #1
 8008e5c:	f1c4 0402 	rsb	r4, r4, #2
 8008e60:	2900      	cmp	r1, #0
 8008e62:	d158      	bne.n	8008f16 <__ieee754_pow+0x16e>
 8008e64:	e00e      	b.n	8008e84 <__ieee754_pow+0xdc>
 8008e66:	2900      	cmp	r1, #0
 8008e68:	d154      	bne.n	8008f14 <__ieee754_pow+0x16c>
 8008e6a:	f1c2 0214 	rsb	r2, r2, #20
 8008e6e:	fa4a f402 	asr.w	r4, sl, r2
 8008e72:	fa04 f202 	lsl.w	r2, r4, r2
 8008e76:	4552      	cmp	r2, sl
 8008e78:	f040 84a3 	bne.w	80097c2 <__ieee754_pow+0xa1a>
 8008e7c:	f004 0401 	and.w	r4, r4, #1
 8008e80:	f1c4 0402 	rsb	r4, r4, #2
 8008e84:	4a6d      	ldr	r2, [pc, #436]	@ (800903c <__ieee754_pow+0x294>)
 8008e86:	4592      	cmp	sl, r2
 8008e88:	d12e      	bne.n	8008ee8 <__ieee754_pow+0x140>
 8008e8a:	f1b9 0f00 	cmp.w	r9, #0
 8008e8e:	f280 8494 	bge.w	80097ba <__ieee754_pow+0xa12>
 8008e92:	496a      	ldr	r1, [pc, #424]	@ (800903c <__ieee754_pow+0x294>)
 8008e94:	4632      	mov	r2, r6
 8008e96:	463b      	mov	r3, r7
 8008e98:	2000      	movs	r0, #0
 8008e9a:	f7f7 fcdf 	bl	800085c <__aeabi_ddiv>
 8008e9e:	e7a0      	b.n	8008de2 <__ieee754_pow+0x3a>
 8008ea0:	2400      	movs	r4, #0
 8008ea2:	bbc1      	cbnz	r1, 8008f16 <__ieee754_pow+0x16e>
 8008ea4:	4a63      	ldr	r2, [pc, #396]	@ (8009034 <__ieee754_pow+0x28c>)
 8008ea6:	4592      	cmp	sl, r2
 8008ea8:	d1ec      	bne.n	8008e84 <__ieee754_pow+0xdc>
 8008eaa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008eae:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	f000 8479 	beq.w	80097aa <__ieee754_pow+0xa02>
 8008eb8:	4b61      	ldr	r3, [pc, #388]	@ (8009040 <__ieee754_pow+0x298>)
 8008eba:	4598      	cmp	r8, r3
 8008ebc:	d908      	bls.n	8008ed0 <__ieee754_pow+0x128>
 8008ebe:	f1b9 0f00 	cmp.w	r9, #0
 8008ec2:	f2c0 8476 	blt.w	80097b2 <__ieee754_pow+0xa0a>
 8008ec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eca:	e78a      	b.n	8008de2 <__ieee754_pow+0x3a>
 8008ecc:	2402      	movs	r4, #2
 8008ece:	e7e8      	b.n	8008ea2 <__ieee754_pow+0xfa>
 8008ed0:	f1b9 0f00 	cmp.w	r9, #0
 8008ed4:	f04f 0000 	mov.w	r0, #0
 8008ed8:	f04f 0100 	mov.w	r1, #0
 8008edc:	da81      	bge.n	8008de2 <__ieee754_pow+0x3a>
 8008ede:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008ee2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008ee6:	e77c      	b.n	8008de2 <__ieee754_pow+0x3a>
 8008ee8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008eec:	d106      	bne.n	8008efc <__ieee754_pow+0x154>
 8008eee:	4632      	mov	r2, r6
 8008ef0:	463b      	mov	r3, r7
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	4639      	mov	r1, r7
 8008ef6:	f7f7 fb87 	bl	8000608 <__aeabi_dmul>
 8008efa:	e772      	b.n	8008de2 <__ieee754_pow+0x3a>
 8008efc:	4a51      	ldr	r2, [pc, #324]	@ (8009044 <__ieee754_pow+0x29c>)
 8008efe:	4591      	cmp	r9, r2
 8008f00:	d109      	bne.n	8008f16 <__ieee754_pow+0x16e>
 8008f02:	2d00      	cmp	r5, #0
 8008f04:	db07      	blt.n	8008f16 <__ieee754_pow+0x16e>
 8008f06:	ec47 6b10 	vmov	d0, r6, r7
 8008f0a:	b011      	add	sp, #68	@ 0x44
 8008f0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	f7ff be70 	b.w	8008bf4 <__ieee754_sqrt>
 8008f14:	2400      	movs	r4, #0
 8008f16:	ec47 6b10 	vmov	d0, r6, r7
 8008f1a:	9302      	str	r3, [sp, #8]
 8008f1c:	f000 fc88 	bl	8009830 <fabs>
 8008f20:	9b02      	ldr	r3, [sp, #8]
 8008f22:	ec51 0b10 	vmov	r0, r1, d0
 8008f26:	bb53      	cbnz	r3, 8008f7e <__ieee754_pow+0x1d6>
 8008f28:	4b44      	ldr	r3, [pc, #272]	@ (800903c <__ieee754_pow+0x294>)
 8008f2a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d002      	beq.n	8008f38 <__ieee754_pow+0x190>
 8008f32:	f1b8 0f00 	cmp.w	r8, #0
 8008f36:	d122      	bne.n	8008f7e <__ieee754_pow+0x1d6>
 8008f38:	f1b9 0f00 	cmp.w	r9, #0
 8008f3c:	da05      	bge.n	8008f4a <__ieee754_pow+0x1a2>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	2000      	movs	r0, #0
 8008f44:	493d      	ldr	r1, [pc, #244]	@ (800903c <__ieee754_pow+0x294>)
 8008f46:	f7f7 fc89 	bl	800085c <__aeabi_ddiv>
 8008f4a:	2d00      	cmp	r5, #0
 8008f4c:	f6bf af49 	bge.w	8008de2 <__ieee754_pow+0x3a>
 8008f50:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008f54:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008f58:	ea58 0804 	orrs.w	r8, r8, r4
 8008f5c:	d108      	bne.n	8008f70 <__ieee754_pow+0x1c8>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4610      	mov	r0, r2
 8008f64:	4619      	mov	r1, r3
 8008f66:	f7f7 f997 	bl	8000298 <__aeabi_dsub>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	e794      	b.n	8008e9a <__ieee754_pow+0xf2>
 8008f70:	2c01      	cmp	r4, #1
 8008f72:	f47f af36 	bne.w	8008de2 <__ieee754_pow+0x3a>
 8008f76:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	e731      	b.n	8008de2 <__ieee754_pow+0x3a>
 8008f7e:	0feb      	lsrs	r3, r5, #31
 8008f80:	3b01      	subs	r3, #1
 8008f82:	ea53 0204 	orrs.w	r2, r3, r4
 8008f86:	d102      	bne.n	8008f8e <__ieee754_pow+0x1e6>
 8008f88:	4632      	mov	r2, r6
 8008f8a:	463b      	mov	r3, r7
 8008f8c:	e7e9      	b.n	8008f62 <__ieee754_pow+0x1ba>
 8008f8e:	3c01      	subs	r4, #1
 8008f90:	431c      	orrs	r4, r3
 8008f92:	d016      	beq.n	8008fc2 <__ieee754_pow+0x21a>
 8008f94:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009020 <__ieee754_pow+0x278>
 8008f98:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008f9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008fa0:	f240 8112 	bls.w	80091c8 <__ieee754_pow+0x420>
 8008fa4:	4b28      	ldr	r3, [pc, #160]	@ (8009048 <__ieee754_pow+0x2a0>)
 8008fa6:	459a      	cmp	sl, r3
 8008fa8:	4b25      	ldr	r3, [pc, #148]	@ (8009040 <__ieee754_pow+0x298>)
 8008faa:	d916      	bls.n	8008fda <__ieee754_pow+0x232>
 8008fac:	4598      	cmp	r8, r3
 8008fae:	d80b      	bhi.n	8008fc8 <__ieee754_pow+0x220>
 8008fb0:	f1b9 0f00 	cmp.w	r9, #0
 8008fb4:	da0b      	bge.n	8008fce <__ieee754_pow+0x226>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	b011      	add	sp, #68	@ 0x44
 8008fba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbe:	f000 bcf3 	b.w	80099a8 <__math_oflow>
 8008fc2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8009028 <__ieee754_pow+0x280>
 8008fc6:	e7e7      	b.n	8008f98 <__ieee754_pow+0x1f0>
 8008fc8:	f1b9 0f00 	cmp.w	r9, #0
 8008fcc:	dcf3      	bgt.n	8008fb6 <__ieee754_pow+0x20e>
 8008fce:	2000      	movs	r0, #0
 8008fd0:	b011      	add	sp, #68	@ 0x44
 8008fd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd6:	f000 bcdf 	b.w	8009998 <__math_uflow>
 8008fda:	4598      	cmp	r8, r3
 8008fdc:	d20c      	bcs.n	8008ff8 <__ieee754_pow+0x250>
 8008fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f7f7 fd81 	bl	8000aec <__aeabi_dcmplt>
 8008fea:	3800      	subs	r0, #0
 8008fec:	bf18      	it	ne
 8008fee:	2001      	movne	r0, #1
 8008ff0:	f1b9 0f00 	cmp.w	r9, #0
 8008ff4:	daec      	bge.n	8008fd0 <__ieee754_pow+0x228>
 8008ff6:	e7df      	b.n	8008fb8 <__ieee754_pow+0x210>
 8008ff8:	4b10      	ldr	r3, [pc, #64]	@ (800903c <__ieee754_pow+0x294>)
 8008ffa:	4598      	cmp	r8, r3
 8008ffc:	f04f 0200 	mov.w	r2, #0
 8009000:	d924      	bls.n	800904c <__ieee754_pow+0x2a4>
 8009002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009006:	2300      	movs	r3, #0
 8009008:	f7f7 fd70 	bl	8000aec <__aeabi_dcmplt>
 800900c:	3800      	subs	r0, #0
 800900e:	bf18      	it	ne
 8009010:	2001      	movne	r0, #1
 8009012:	f1b9 0f00 	cmp.w	r9, #0
 8009016:	dccf      	bgt.n	8008fb8 <__ieee754_pow+0x210>
 8009018:	e7da      	b.n	8008fd0 <__ieee754_pow+0x228>
 800901a:	bf00      	nop
 800901c:	f3af 8000 	nop.w
 8009020:	00000000 	.word	0x00000000
 8009024:	3ff00000 	.word	0x3ff00000
 8009028:	00000000 	.word	0x00000000
 800902c:	bff00000 	.word	0xbff00000
 8009030:	fff00000 	.word	0xfff00000
 8009034:	7ff00000 	.word	0x7ff00000
 8009038:	433fffff 	.word	0x433fffff
 800903c:	3ff00000 	.word	0x3ff00000
 8009040:	3fefffff 	.word	0x3fefffff
 8009044:	3fe00000 	.word	0x3fe00000
 8009048:	43f00000 	.word	0x43f00000
 800904c:	4b5a      	ldr	r3, [pc, #360]	@ (80091b8 <__ieee754_pow+0x410>)
 800904e:	f7f7 f923 	bl	8000298 <__aeabi_dsub>
 8009052:	a351      	add	r3, pc, #324	@ (adr r3, 8009198 <__ieee754_pow+0x3f0>)
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	4604      	mov	r4, r0
 800905a:	460d      	mov	r5, r1
 800905c:	f7f7 fad4 	bl	8000608 <__aeabi_dmul>
 8009060:	a34f      	add	r3, pc, #316	@ (adr r3, 80091a0 <__ieee754_pow+0x3f8>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	4606      	mov	r6, r0
 8009068:	460f      	mov	r7, r1
 800906a:	4620      	mov	r0, r4
 800906c:	4629      	mov	r1, r5
 800906e:	f7f7 facb 	bl	8000608 <__aeabi_dmul>
 8009072:	4b52      	ldr	r3, [pc, #328]	@ (80091bc <__ieee754_pow+0x414>)
 8009074:	4682      	mov	sl, r0
 8009076:	468b      	mov	fp, r1
 8009078:	2200      	movs	r2, #0
 800907a:	4620      	mov	r0, r4
 800907c:	4629      	mov	r1, r5
 800907e:	f7f7 fac3 	bl	8000608 <__aeabi_dmul>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	a148      	add	r1, pc, #288	@ (adr r1, 80091a8 <__ieee754_pow+0x400>)
 8009088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800908c:	f7f7 f904 	bl	8000298 <__aeabi_dsub>
 8009090:	4622      	mov	r2, r4
 8009092:	462b      	mov	r3, r5
 8009094:	f7f7 fab8 	bl	8000608 <__aeabi_dmul>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	2000      	movs	r0, #0
 800909e:	4948      	ldr	r1, [pc, #288]	@ (80091c0 <__ieee754_pow+0x418>)
 80090a0:	f7f7 f8fa 	bl	8000298 <__aeabi_dsub>
 80090a4:	4622      	mov	r2, r4
 80090a6:	4680      	mov	r8, r0
 80090a8:	4689      	mov	r9, r1
 80090aa:	462b      	mov	r3, r5
 80090ac:	4620      	mov	r0, r4
 80090ae:	4629      	mov	r1, r5
 80090b0:	f7f7 faaa 	bl	8000608 <__aeabi_dmul>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4640      	mov	r0, r8
 80090ba:	4649      	mov	r1, r9
 80090bc:	f7f7 faa4 	bl	8000608 <__aeabi_dmul>
 80090c0:	a33b      	add	r3, pc, #236	@ (adr r3, 80091b0 <__ieee754_pow+0x408>)
 80090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c6:	f7f7 fa9f 	bl	8000608 <__aeabi_dmul>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4650      	mov	r0, sl
 80090d0:	4659      	mov	r1, fp
 80090d2:	f7f7 f8e1 	bl	8000298 <__aeabi_dsub>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4680      	mov	r8, r0
 80090dc:	4689      	mov	r9, r1
 80090de:	4630      	mov	r0, r6
 80090e0:	4639      	mov	r1, r7
 80090e2:	f7f7 f8db 	bl	800029c <__adddf3>
 80090e6:	2400      	movs	r4, #0
 80090e8:	4632      	mov	r2, r6
 80090ea:	463b      	mov	r3, r7
 80090ec:	4620      	mov	r0, r4
 80090ee:	460d      	mov	r5, r1
 80090f0:	f7f7 f8d2 	bl	8000298 <__aeabi_dsub>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4640      	mov	r0, r8
 80090fa:	4649      	mov	r1, r9
 80090fc:	f7f7 f8cc 	bl	8000298 <__aeabi_dsub>
 8009100:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009104:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009108:	2300      	movs	r3, #0
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009110:	4606      	mov	r6, r0
 8009112:	460f      	mov	r7, r1
 8009114:	4652      	mov	r2, sl
 8009116:	465b      	mov	r3, fp
 8009118:	e9dd 0100 	ldrd	r0, r1, [sp]
 800911c:	f7f7 f8bc 	bl	8000298 <__aeabi_dsub>
 8009120:	4622      	mov	r2, r4
 8009122:	462b      	mov	r3, r5
 8009124:	f7f7 fa70 	bl	8000608 <__aeabi_dmul>
 8009128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800912c:	4680      	mov	r8, r0
 800912e:	4689      	mov	r9, r1
 8009130:	4630      	mov	r0, r6
 8009132:	4639      	mov	r1, r7
 8009134:	f7f7 fa68 	bl	8000608 <__aeabi_dmul>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	4640      	mov	r0, r8
 800913e:	4649      	mov	r1, r9
 8009140:	f7f7 f8ac 	bl	800029c <__adddf3>
 8009144:	4652      	mov	r2, sl
 8009146:	465b      	mov	r3, fp
 8009148:	4606      	mov	r6, r0
 800914a:	460f      	mov	r7, r1
 800914c:	4620      	mov	r0, r4
 800914e:	4629      	mov	r1, r5
 8009150:	f7f7 fa5a 	bl	8000608 <__aeabi_dmul>
 8009154:	460b      	mov	r3, r1
 8009156:	4602      	mov	r2, r0
 8009158:	4680      	mov	r8, r0
 800915a:	4689      	mov	r9, r1
 800915c:	4630      	mov	r0, r6
 800915e:	4639      	mov	r1, r7
 8009160:	f7f7 f89c 	bl	800029c <__adddf3>
 8009164:	4b17      	ldr	r3, [pc, #92]	@ (80091c4 <__ieee754_pow+0x41c>)
 8009166:	4299      	cmp	r1, r3
 8009168:	4604      	mov	r4, r0
 800916a:	460d      	mov	r5, r1
 800916c:	468a      	mov	sl, r1
 800916e:	468b      	mov	fp, r1
 8009170:	f340 82ef 	ble.w	8009752 <__ieee754_pow+0x9aa>
 8009174:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009178:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800917c:	4303      	orrs	r3, r0
 800917e:	f000 81e8 	beq.w	8009552 <__ieee754_pow+0x7aa>
 8009182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009186:	2200      	movs	r2, #0
 8009188:	2300      	movs	r3, #0
 800918a:	f7f7 fcaf 	bl	8000aec <__aeabi_dcmplt>
 800918e:	3800      	subs	r0, #0
 8009190:	bf18      	it	ne
 8009192:	2001      	movne	r0, #1
 8009194:	e710      	b.n	8008fb8 <__ieee754_pow+0x210>
 8009196:	bf00      	nop
 8009198:	60000000 	.word	0x60000000
 800919c:	3ff71547 	.word	0x3ff71547
 80091a0:	f85ddf44 	.word	0xf85ddf44
 80091a4:	3e54ae0b 	.word	0x3e54ae0b
 80091a8:	55555555 	.word	0x55555555
 80091ac:	3fd55555 	.word	0x3fd55555
 80091b0:	652b82fe 	.word	0x652b82fe
 80091b4:	3ff71547 	.word	0x3ff71547
 80091b8:	3ff00000 	.word	0x3ff00000
 80091bc:	3fd00000 	.word	0x3fd00000
 80091c0:	3fe00000 	.word	0x3fe00000
 80091c4:	408fffff 	.word	0x408fffff
 80091c8:	4bd5      	ldr	r3, [pc, #852]	@ (8009520 <__ieee754_pow+0x778>)
 80091ca:	402b      	ands	r3, r5
 80091cc:	2200      	movs	r2, #0
 80091ce:	b92b      	cbnz	r3, 80091dc <__ieee754_pow+0x434>
 80091d0:	4bd4      	ldr	r3, [pc, #848]	@ (8009524 <__ieee754_pow+0x77c>)
 80091d2:	f7f7 fa19 	bl	8000608 <__aeabi_dmul>
 80091d6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80091da:	468b      	mov	fp, r1
 80091dc:	ea4f 532b 	mov.w	r3, fp, asr #20
 80091e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80091e4:	4413      	add	r3, r2
 80091e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80091e8:	4bcf      	ldr	r3, [pc, #828]	@ (8009528 <__ieee754_pow+0x780>)
 80091ea:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80091ee:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80091f2:	459b      	cmp	fp, r3
 80091f4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80091f8:	dd08      	ble.n	800920c <__ieee754_pow+0x464>
 80091fa:	4bcc      	ldr	r3, [pc, #816]	@ (800952c <__ieee754_pow+0x784>)
 80091fc:	459b      	cmp	fp, r3
 80091fe:	f340 81a5 	ble.w	800954c <__ieee754_pow+0x7a4>
 8009202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009204:	3301      	adds	r3, #1
 8009206:	930a      	str	r3, [sp, #40]	@ 0x28
 8009208:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800920c:	f04f 0a00 	mov.w	sl, #0
 8009210:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009214:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009216:	4bc6      	ldr	r3, [pc, #792]	@ (8009530 <__ieee754_pow+0x788>)
 8009218:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800921c:	ed93 7b00 	vldr	d7, [r3]
 8009220:	4629      	mov	r1, r5
 8009222:	ec53 2b17 	vmov	r2, r3, d7
 8009226:	ed8d 7b06 	vstr	d7, [sp, #24]
 800922a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800922e:	f7f7 f833 	bl	8000298 <__aeabi_dsub>
 8009232:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009236:	4606      	mov	r6, r0
 8009238:	460f      	mov	r7, r1
 800923a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800923e:	f7f7 f82d 	bl	800029c <__adddf3>
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	2000      	movs	r0, #0
 8009248:	49ba      	ldr	r1, [pc, #744]	@ (8009534 <__ieee754_pow+0x78c>)
 800924a:	f7f7 fb07 	bl	800085c <__aeabi_ddiv>
 800924e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4630      	mov	r0, r6
 8009258:	4639      	mov	r1, r7
 800925a:	f7f7 f9d5 	bl	8000608 <__aeabi_dmul>
 800925e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009262:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009266:	106d      	asrs	r5, r5, #1
 8009268:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800926c:	f04f 0b00 	mov.w	fp, #0
 8009270:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009274:	4661      	mov	r1, ip
 8009276:	2200      	movs	r2, #0
 8009278:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800927c:	4658      	mov	r0, fp
 800927e:	46e1      	mov	r9, ip
 8009280:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009284:	4614      	mov	r4, r2
 8009286:	461d      	mov	r5, r3
 8009288:	f7f7 f9be 	bl	8000608 <__aeabi_dmul>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4630      	mov	r0, r6
 8009292:	4639      	mov	r1, r7
 8009294:	f7f7 f800 	bl	8000298 <__aeabi_dsub>
 8009298:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800929c:	4606      	mov	r6, r0
 800929e:	460f      	mov	r7, r1
 80092a0:	4620      	mov	r0, r4
 80092a2:	4629      	mov	r1, r5
 80092a4:	f7f6 fff8 	bl	8000298 <__aeabi_dsub>
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80092b0:	f7f6 fff2 	bl	8000298 <__aeabi_dsub>
 80092b4:	465a      	mov	r2, fp
 80092b6:	464b      	mov	r3, r9
 80092b8:	f7f7 f9a6 	bl	8000608 <__aeabi_dmul>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4630      	mov	r0, r6
 80092c2:	4639      	mov	r1, r7
 80092c4:	f7f6 ffe8 	bl	8000298 <__aeabi_dsub>
 80092c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80092cc:	f7f7 f99c 	bl	8000608 <__aeabi_dmul>
 80092d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80092d8:	4610      	mov	r0, r2
 80092da:	4619      	mov	r1, r3
 80092dc:	f7f7 f994 	bl	8000608 <__aeabi_dmul>
 80092e0:	a37d      	add	r3, pc, #500	@ (adr r3, 80094d8 <__ieee754_pow+0x730>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	4604      	mov	r4, r0
 80092e8:	460d      	mov	r5, r1
 80092ea:	f7f7 f98d 	bl	8000608 <__aeabi_dmul>
 80092ee:	a37c      	add	r3, pc, #496	@ (adr r3, 80094e0 <__ieee754_pow+0x738>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	f7f6 ffd2 	bl	800029c <__adddf3>
 80092f8:	4622      	mov	r2, r4
 80092fa:	462b      	mov	r3, r5
 80092fc:	f7f7 f984 	bl	8000608 <__aeabi_dmul>
 8009300:	a379      	add	r3, pc, #484	@ (adr r3, 80094e8 <__ieee754_pow+0x740>)
 8009302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009306:	f7f6 ffc9 	bl	800029c <__adddf3>
 800930a:	4622      	mov	r2, r4
 800930c:	462b      	mov	r3, r5
 800930e:	f7f7 f97b 	bl	8000608 <__aeabi_dmul>
 8009312:	a377      	add	r3, pc, #476	@ (adr r3, 80094f0 <__ieee754_pow+0x748>)
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	f7f6 ffc0 	bl	800029c <__adddf3>
 800931c:	4622      	mov	r2, r4
 800931e:	462b      	mov	r3, r5
 8009320:	f7f7 f972 	bl	8000608 <__aeabi_dmul>
 8009324:	a374      	add	r3, pc, #464	@ (adr r3, 80094f8 <__ieee754_pow+0x750>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f6 ffb7 	bl	800029c <__adddf3>
 800932e:	4622      	mov	r2, r4
 8009330:	462b      	mov	r3, r5
 8009332:	f7f7 f969 	bl	8000608 <__aeabi_dmul>
 8009336:	a372      	add	r3, pc, #456	@ (adr r3, 8009500 <__ieee754_pow+0x758>)
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	f7f6 ffae 	bl	800029c <__adddf3>
 8009340:	4622      	mov	r2, r4
 8009342:	4606      	mov	r6, r0
 8009344:	460f      	mov	r7, r1
 8009346:	462b      	mov	r3, r5
 8009348:	4620      	mov	r0, r4
 800934a:	4629      	mov	r1, r5
 800934c:	f7f7 f95c 	bl	8000608 <__aeabi_dmul>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f7f7 f956 	bl	8000608 <__aeabi_dmul>
 800935c:	465a      	mov	r2, fp
 800935e:	4604      	mov	r4, r0
 8009360:	460d      	mov	r5, r1
 8009362:	464b      	mov	r3, r9
 8009364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009368:	f7f6 ff98 	bl	800029c <__adddf3>
 800936c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009370:	f7f7 f94a 	bl	8000608 <__aeabi_dmul>
 8009374:	4622      	mov	r2, r4
 8009376:	462b      	mov	r3, r5
 8009378:	f7f6 ff90 	bl	800029c <__adddf3>
 800937c:	465a      	mov	r2, fp
 800937e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009382:	464b      	mov	r3, r9
 8009384:	4658      	mov	r0, fp
 8009386:	4649      	mov	r1, r9
 8009388:	f7f7 f93e 	bl	8000608 <__aeabi_dmul>
 800938c:	4b6a      	ldr	r3, [pc, #424]	@ (8009538 <__ieee754_pow+0x790>)
 800938e:	2200      	movs	r2, #0
 8009390:	4606      	mov	r6, r0
 8009392:	460f      	mov	r7, r1
 8009394:	f7f6 ff82 	bl	800029c <__adddf3>
 8009398:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800939c:	f7f6 ff7e 	bl	800029c <__adddf3>
 80093a0:	46d8      	mov	r8, fp
 80093a2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80093a6:	460d      	mov	r5, r1
 80093a8:	465a      	mov	r2, fp
 80093aa:	460b      	mov	r3, r1
 80093ac:	4640      	mov	r0, r8
 80093ae:	4649      	mov	r1, r9
 80093b0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80093b4:	f7f7 f928 	bl	8000608 <__aeabi_dmul>
 80093b8:	465c      	mov	r4, fp
 80093ba:	4680      	mov	r8, r0
 80093bc:	4689      	mov	r9, r1
 80093be:	4b5e      	ldr	r3, [pc, #376]	@ (8009538 <__ieee754_pow+0x790>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	4620      	mov	r0, r4
 80093c4:	4629      	mov	r1, r5
 80093c6:	f7f6 ff67 	bl	8000298 <__aeabi_dsub>
 80093ca:	4632      	mov	r2, r6
 80093cc:	463b      	mov	r3, r7
 80093ce:	f7f6 ff63 	bl	8000298 <__aeabi_dsub>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093da:	f7f6 ff5d 	bl	8000298 <__aeabi_dsub>
 80093de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093e2:	f7f7 f911 	bl	8000608 <__aeabi_dmul>
 80093e6:	4622      	mov	r2, r4
 80093e8:	4606      	mov	r6, r0
 80093ea:	460f      	mov	r7, r1
 80093ec:	462b      	mov	r3, r5
 80093ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093f2:	f7f7 f909 	bl	8000608 <__aeabi_dmul>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	4630      	mov	r0, r6
 80093fc:	4639      	mov	r1, r7
 80093fe:	f7f6 ff4d 	bl	800029c <__adddf3>
 8009402:	4606      	mov	r6, r0
 8009404:	460f      	mov	r7, r1
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	4640      	mov	r0, r8
 800940c:	4649      	mov	r1, r9
 800940e:	f7f6 ff45 	bl	800029c <__adddf3>
 8009412:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8009416:	a33c      	add	r3, pc, #240	@ (adr r3, 8009508 <__ieee754_pow+0x760>)
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	4658      	mov	r0, fp
 800941e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8009422:	460d      	mov	r5, r1
 8009424:	f7f7 f8f0 	bl	8000608 <__aeabi_dmul>
 8009428:	465c      	mov	r4, fp
 800942a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800942e:	4642      	mov	r2, r8
 8009430:	464b      	mov	r3, r9
 8009432:	4620      	mov	r0, r4
 8009434:	4629      	mov	r1, r5
 8009436:	f7f6 ff2f 	bl	8000298 <__aeabi_dsub>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	4630      	mov	r0, r6
 8009440:	4639      	mov	r1, r7
 8009442:	f7f6 ff29 	bl	8000298 <__aeabi_dsub>
 8009446:	a332      	add	r3, pc, #200	@ (adr r3, 8009510 <__ieee754_pow+0x768>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f7f7 f8dc 	bl	8000608 <__aeabi_dmul>
 8009450:	a331      	add	r3, pc, #196	@ (adr r3, 8009518 <__ieee754_pow+0x770>)
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	4606      	mov	r6, r0
 8009458:	460f      	mov	r7, r1
 800945a:	4620      	mov	r0, r4
 800945c:	4629      	mov	r1, r5
 800945e:	f7f7 f8d3 	bl	8000608 <__aeabi_dmul>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4630      	mov	r0, r6
 8009468:	4639      	mov	r1, r7
 800946a:	f7f6 ff17 	bl	800029c <__adddf3>
 800946e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009470:	4b32      	ldr	r3, [pc, #200]	@ (800953c <__ieee754_pow+0x794>)
 8009472:	4413      	add	r3, r2
 8009474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009478:	f7f6 ff10 	bl	800029c <__adddf3>
 800947c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009480:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009482:	f7f7 f857 	bl	8000534 <__aeabi_i2d>
 8009486:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009488:	4b2d      	ldr	r3, [pc, #180]	@ (8009540 <__ieee754_pow+0x798>)
 800948a:	4413      	add	r3, r2
 800948c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009490:	4606      	mov	r6, r0
 8009492:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009496:	460f      	mov	r7, r1
 8009498:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800949c:	f7f6 fefe 	bl	800029c <__adddf3>
 80094a0:	4642      	mov	r2, r8
 80094a2:	464b      	mov	r3, r9
 80094a4:	f7f6 fefa 	bl	800029c <__adddf3>
 80094a8:	4632      	mov	r2, r6
 80094aa:	463b      	mov	r3, r7
 80094ac:	f7f6 fef6 	bl	800029c <__adddf3>
 80094b0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80094b4:	4632      	mov	r2, r6
 80094b6:	463b      	mov	r3, r7
 80094b8:	4658      	mov	r0, fp
 80094ba:	460d      	mov	r5, r1
 80094bc:	f7f6 feec 	bl	8000298 <__aeabi_dsub>
 80094c0:	4642      	mov	r2, r8
 80094c2:	464b      	mov	r3, r9
 80094c4:	f7f6 fee8 	bl	8000298 <__aeabi_dsub>
 80094c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094cc:	f7f6 fee4 	bl	8000298 <__aeabi_dsub>
 80094d0:	465c      	mov	r4, fp
 80094d2:	4602      	mov	r2, r0
 80094d4:	e036      	b.n	8009544 <__ieee754_pow+0x79c>
 80094d6:	bf00      	nop
 80094d8:	4a454eef 	.word	0x4a454eef
 80094dc:	3fca7e28 	.word	0x3fca7e28
 80094e0:	93c9db65 	.word	0x93c9db65
 80094e4:	3fcd864a 	.word	0x3fcd864a
 80094e8:	a91d4101 	.word	0xa91d4101
 80094ec:	3fd17460 	.word	0x3fd17460
 80094f0:	518f264d 	.word	0x518f264d
 80094f4:	3fd55555 	.word	0x3fd55555
 80094f8:	db6fabff 	.word	0xdb6fabff
 80094fc:	3fdb6db6 	.word	0x3fdb6db6
 8009500:	33333303 	.word	0x33333303
 8009504:	3fe33333 	.word	0x3fe33333
 8009508:	e0000000 	.word	0xe0000000
 800950c:	3feec709 	.word	0x3feec709
 8009510:	dc3a03fd 	.word	0xdc3a03fd
 8009514:	3feec709 	.word	0x3feec709
 8009518:	145b01f5 	.word	0x145b01f5
 800951c:	be3e2fe0 	.word	0xbe3e2fe0
 8009520:	7ff00000 	.word	0x7ff00000
 8009524:	43400000 	.word	0x43400000
 8009528:	0003988e 	.word	0x0003988e
 800952c:	000bb679 	.word	0x000bb679
 8009530:	0800a630 	.word	0x0800a630
 8009534:	3ff00000 	.word	0x3ff00000
 8009538:	40080000 	.word	0x40080000
 800953c:	0800a610 	.word	0x0800a610
 8009540:	0800a620 	.word	0x0800a620
 8009544:	460b      	mov	r3, r1
 8009546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800954a:	e5d7      	b.n	80090fc <__ieee754_pow+0x354>
 800954c:	f04f 0a01 	mov.w	sl, #1
 8009550:	e65e      	b.n	8009210 <__ieee754_pow+0x468>
 8009552:	a3b4      	add	r3, pc, #720	@ (adr r3, 8009824 <__ieee754_pow+0xa7c>)
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	4630      	mov	r0, r6
 800955a:	4639      	mov	r1, r7
 800955c:	f7f6 fe9e 	bl	800029c <__adddf3>
 8009560:	4642      	mov	r2, r8
 8009562:	e9cd 0100 	strd	r0, r1, [sp]
 8009566:	464b      	mov	r3, r9
 8009568:	4620      	mov	r0, r4
 800956a:	4629      	mov	r1, r5
 800956c:	f7f6 fe94 	bl	8000298 <__aeabi_dsub>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009578:	f7f7 fad6 	bl	8000b28 <__aeabi_dcmpgt>
 800957c:	2800      	cmp	r0, #0
 800957e:	f47f ae00 	bne.w	8009182 <__ieee754_pow+0x3da>
 8009582:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009586:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800958a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800958e:	fa43 fa0a 	asr.w	sl, r3, sl
 8009592:	44da      	add	sl, fp
 8009594:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009598:	489d      	ldr	r0, [pc, #628]	@ (8009810 <__ieee754_pow+0xa68>)
 800959a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800959e:	4108      	asrs	r0, r1
 80095a0:	ea00 030a 	and.w	r3, r0, sl
 80095a4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80095a8:	f1c1 0114 	rsb	r1, r1, #20
 80095ac:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80095b0:	fa4a fa01 	asr.w	sl, sl, r1
 80095b4:	f1bb 0f00 	cmp.w	fp, #0
 80095b8:	4640      	mov	r0, r8
 80095ba:	4649      	mov	r1, r9
 80095bc:	f04f 0200 	mov.w	r2, #0
 80095c0:	bfb8      	it	lt
 80095c2:	f1ca 0a00 	rsblt	sl, sl, #0
 80095c6:	f7f6 fe67 	bl	8000298 <__aeabi_dsub>
 80095ca:	4680      	mov	r8, r0
 80095cc:	4689      	mov	r9, r1
 80095ce:	4632      	mov	r2, r6
 80095d0:	463b      	mov	r3, r7
 80095d2:	4640      	mov	r0, r8
 80095d4:	4649      	mov	r1, r9
 80095d6:	f7f6 fe61 	bl	800029c <__adddf3>
 80095da:	2400      	movs	r4, #0
 80095dc:	a37c      	add	r3, pc, #496	@ (adr r3, 80097d0 <__ieee754_pow+0xa28>)
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	4620      	mov	r0, r4
 80095e4:	460d      	mov	r5, r1
 80095e6:	f7f7 f80f 	bl	8000608 <__aeabi_dmul>
 80095ea:	4642      	mov	r2, r8
 80095ec:	e9cd 0100 	strd	r0, r1, [sp]
 80095f0:	464b      	mov	r3, r9
 80095f2:	4620      	mov	r0, r4
 80095f4:	4629      	mov	r1, r5
 80095f6:	f7f6 fe4f 	bl	8000298 <__aeabi_dsub>
 80095fa:	4602      	mov	r2, r0
 80095fc:	460b      	mov	r3, r1
 80095fe:	4630      	mov	r0, r6
 8009600:	4639      	mov	r1, r7
 8009602:	f7f6 fe49 	bl	8000298 <__aeabi_dsub>
 8009606:	a374      	add	r3, pc, #464	@ (adr r3, 80097d8 <__ieee754_pow+0xa30>)
 8009608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960c:	f7f6 fffc 	bl	8000608 <__aeabi_dmul>
 8009610:	a373      	add	r3, pc, #460	@ (adr r3, 80097e0 <__ieee754_pow+0xa38>)
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	4680      	mov	r8, r0
 8009618:	4689      	mov	r9, r1
 800961a:	4620      	mov	r0, r4
 800961c:	4629      	mov	r1, r5
 800961e:	f7f6 fff3 	bl	8000608 <__aeabi_dmul>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4640      	mov	r0, r8
 8009628:	4649      	mov	r1, r9
 800962a:	f7f6 fe37 	bl	800029c <__adddf3>
 800962e:	4604      	mov	r4, r0
 8009630:	460d      	mov	r5, r1
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	e9dd 0100 	ldrd	r0, r1, [sp]
 800963a:	f7f6 fe2f 	bl	800029c <__adddf3>
 800963e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009642:	4680      	mov	r8, r0
 8009644:	4689      	mov	r9, r1
 8009646:	f7f6 fe27 	bl	8000298 <__aeabi_dsub>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4620      	mov	r0, r4
 8009650:	4629      	mov	r1, r5
 8009652:	f7f6 fe21 	bl	8000298 <__aeabi_dsub>
 8009656:	4642      	mov	r2, r8
 8009658:	4606      	mov	r6, r0
 800965a:	460f      	mov	r7, r1
 800965c:	464b      	mov	r3, r9
 800965e:	4640      	mov	r0, r8
 8009660:	4649      	mov	r1, r9
 8009662:	f7f6 ffd1 	bl	8000608 <__aeabi_dmul>
 8009666:	a360      	add	r3, pc, #384	@ (adr r3, 80097e8 <__ieee754_pow+0xa40>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	4604      	mov	r4, r0
 800966e:	460d      	mov	r5, r1
 8009670:	f7f6 ffca 	bl	8000608 <__aeabi_dmul>
 8009674:	a35e      	add	r3, pc, #376	@ (adr r3, 80097f0 <__ieee754_pow+0xa48>)
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	f7f6 fe0d 	bl	8000298 <__aeabi_dsub>
 800967e:	4622      	mov	r2, r4
 8009680:	462b      	mov	r3, r5
 8009682:	f7f6 ffc1 	bl	8000608 <__aeabi_dmul>
 8009686:	a35c      	add	r3, pc, #368	@ (adr r3, 80097f8 <__ieee754_pow+0xa50>)
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	f7f6 fe06 	bl	800029c <__adddf3>
 8009690:	4622      	mov	r2, r4
 8009692:	462b      	mov	r3, r5
 8009694:	f7f6 ffb8 	bl	8000608 <__aeabi_dmul>
 8009698:	a359      	add	r3, pc, #356	@ (adr r3, 8009800 <__ieee754_pow+0xa58>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f6 fdfb 	bl	8000298 <__aeabi_dsub>
 80096a2:	4622      	mov	r2, r4
 80096a4:	462b      	mov	r3, r5
 80096a6:	f7f6 ffaf 	bl	8000608 <__aeabi_dmul>
 80096aa:	a357      	add	r3, pc, #348	@ (adr r3, 8009808 <__ieee754_pow+0xa60>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	f7f6 fdf4 	bl	800029c <__adddf3>
 80096b4:	4622      	mov	r2, r4
 80096b6:	462b      	mov	r3, r5
 80096b8:	f7f6 ffa6 	bl	8000608 <__aeabi_dmul>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4640      	mov	r0, r8
 80096c2:	4649      	mov	r1, r9
 80096c4:	f7f6 fde8 	bl	8000298 <__aeabi_dsub>
 80096c8:	4604      	mov	r4, r0
 80096ca:	460d      	mov	r5, r1
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4640      	mov	r0, r8
 80096d2:	4649      	mov	r1, r9
 80096d4:	f7f6 ff98 	bl	8000608 <__aeabi_dmul>
 80096d8:	2200      	movs	r2, #0
 80096da:	e9cd 0100 	strd	r0, r1, [sp]
 80096de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80096e2:	4620      	mov	r0, r4
 80096e4:	4629      	mov	r1, r5
 80096e6:	f7f6 fdd7 	bl	8000298 <__aeabi_dsub>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096f2:	f7f7 f8b3 	bl	800085c <__aeabi_ddiv>
 80096f6:	4632      	mov	r2, r6
 80096f8:	4604      	mov	r4, r0
 80096fa:	460d      	mov	r5, r1
 80096fc:	463b      	mov	r3, r7
 80096fe:	4640      	mov	r0, r8
 8009700:	4649      	mov	r1, r9
 8009702:	f7f6 ff81 	bl	8000608 <__aeabi_dmul>
 8009706:	4632      	mov	r2, r6
 8009708:	463b      	mov	r3, r7
 800970a:	f7f6 fdc7 	bl	800029c <__adddf3>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4620      	mov	r0, r4
 8009714:	4629      	mov	r1, r5
 8009716:	f7f6 fdbf 	bl	8000298 <__aeabi_dsub>
 800971a:	4642      	mov	r2, r8
 800971c:	464b      	mov	r3, r9
 800971e:	f7f6 fdbb 	bl	8000298 <__aeabi_dsub>
 8009722:	460b      	mov	r3, r1
 8009724:	4602      	mov	r2, r0
 8009726:	493b      	ldr	r1, [pc, #236]	@ (8009814 <__ieee754_pow+0xa6c>)
 8009728:	2000      	movs	r0, #0
 800972a:	f7f6 fdb5 	bl	8000298 <__aeabi_dsub>
 800972e:	ec41 0b10 	vmov	d0, r0, r1
 8009732:	ee10 3a90 	vmov	r3, s1
 8009736:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800973a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800973e:	da30      	bge.n	80097a2 <__ieee754_pow+0x9fa>
 8009740:	4650      	mov	r0, sl
 8009742:	f000 f87d 	bl	8009840 <scalbn>
 8009746:	ec51 0b10 	vmov	r0, r1, d0
 800974a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800974e:	f7ff bbd2 	b.w	8008ef6 <__ieee754_pow+0x14e>
 8009752:	4c31      	ldr	r4, [pc, #196]	@ (8009818 <__ieee754_pow+0xa70>)
 8009754:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009758:	42a3      	cmp	r3, r4
 800975a:	d91a      	bls.n	8009792 <__ieee754_pow+0x9ea>
 800975c:	4b2f      	ldr	r3, [pc, #188]	@ (800981c <__ieee754_pow+0xa74>)
 800975e:	440b      	add	r3, r1
 8009760:	4303      	orrs	r3, r0
 8009762:	d009      	beq.n	8009778 <__ieee754_pow+0x9d0>
 8009764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009768:	2200      	movs	r2, #0
 800976a:	2300      	movs	r3, #0
 800976c:	f7f7 f9be 	bl	8000aec <__aeabi_dcmplt>
 8009770:	3800      	subs	r0, #0
 8009772:	bf18      	it	ne
 8009774:	2001      	movne	r0, #1
 8009776:	e42b      	b.n	8008fd0 <__ieee754_pow+0x228>
 8009778:	4642      	mov	r2, r8
 800977a:	464b      	mov	r3, r9
 800977c:	f7f6 fd8c 	bl	8000298 <__aeabi_dsub>
 8009780:	4632      	mov	r2, r6
 8009782:	463b      	mov	r3, r7
 8009784:	f7f7 f9c6 	bl	8000b14 <__aeabi_dcmpge>
 8009788:	2800      	cmp	r0, #0
 800978a:	d1eb      	bne.n	8009764 <__ieee754_pow+0x9bc>
 800978c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800982c <__ieee754_pow+0xa84>
 8009790:	e6f7      	b.n	8009582 <__ieee754_pow+0x7da>
 8009792:	469a      	mov	sl, r3
 8009794:	4b22      	ldr	r3, [pc, #136]	@ (8009820 <__ieee754_pow+0xa78>)
 8009796:	459a      	cmp	sl, r3
 8009798:	f63f aef3 	bhi.w	8009582 <__ieee754_pow+0x7da>
 800979c:	f8dd a010 	ldr.w	sl, [sp, #16]
 80097a0:	e715      	b.n	80095ce <__ieee754_pow+0x826>
 80097a2:	ec51 0b10 	vmov	r0, r1, d0
 80097a6:	4619      	mov	r1, r3
 80097a8:	e7cf      	b.n	800974a <__ieee754_pow+0x9a2>
 80097aa:	491a      	ldr	r1, [pc, #104]	@ (8009814 <__ieee754_pow+0xa6c>)
 80097ac:	2000      	movs	r0, #0
 80097ae:	f7ff bb18 	b.w	8008de2 <__ieee754_pow+0x3a>
 80097b2:	2000      	movs	r0, #0
 80097b4:	2100      	movs	r1, #0
 80097b6:	f7ff bb14 	b.w	8008de2 <__ieee754_pow+0x3a>
 80097ba:	4630      	mov	r0, r6
 80097bc:	4639      	mov	r1, r7
 80097be:	f7ff bb10 	b.w	8008de2 <__ieee754_pow+0x3a>
 80097c2:	460c      	mov	r4, r1
 80097c4:	f7ff bb5e 	b.w	8008e84 <__ieee754_pow+0xdc>
 80097c8:	2400      	movs	r4, #0
 80097ca:	f7ff bb49 	b.w	8008e60 <__ieee754_pow+0xb8>
 80097ce:	bf00      	nop
 80097d0:	00000000 	.word	0x00000000
 80097d4:	3fe62e43 	.word	0x3fe62e43
 80097d8:	fefa39ef 	.word	0xfefa39ef
 80097dc:	3fe62e42 	.word	0x3fe62e42
 80097e0:	0ca86c39 	.word	0x0ca86c39
 80097e4:	be205c61 	.word	0xbe205c61
 80097e8:	72bea4d0 	.word	0x72bea4d0
 80097ec:	3e663769 	.word	0x3e663769
 80097f0:	c5d26bf1 	.word	0xc5d26bf1
 80097f4:	3ebbbd41 	.word	0x3ebbbd41
 80097f8:	af25de2c 	.word	0xaf25de2c
 80097fc:	3f11566a 	.word	0x3f11566a
 8009800:	16bebd93 	.word	0x16bebd93
 8009804:	3f66c16c 	.word	0x3f66c16c
 8009808:	5555553e 	.word	0x5555553e
 800980c:	3fc55555 	.word	0x3fc55555
 8009810:	fff00000 	.word	0xfff00000
 8009814:	3ff00000 	.word	0x3ff00000
 8009818:	4090cbff 	.word	0x4090cbff
 800981c:	3f6f3400 	.word	0x3f6f3400
 8009820:	3fe00000 	.word	0x3fe00000
 8009824:	652b82fe 	.word	0x652b82fe
 8009828:	3c971547 	.word	0x3c971547
 800982c:	4090cc00 	.word	0x4090cc00

08009830 <fabs>:
 8009830:	ec51 0b10 	vmov	r0, r1, d0
 8009834:	4602      	mov	r2, r0
 8009836:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800983a:	ec43 2b10 	vmov	d0, r2, r3
 800983e:	4770      	bx	lr

08009840 <scalbn>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	ec55 4b10 	vmov	r4, r5, d0
 8009846:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800984a:	4606      	mov	r6, r0
 800984c:	462b      	mov	r3, r5
 800984e:	b991      	cbnz	r1, 8009876 <scalbn+0x36>
 8009850:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009854:	4323      	orrs	r3, r4
 8009856:	d03d      	beq.n	80098d4 <scalbn+0x94>
 8009858:	4b35      	ldr	r3, [pc, #212]	@ (8009930 <scalbn+0xf0>)
 800985a:	4620      	mov	r0, r4
 800985c:	4629      	mov	r1, r5
 800985e:	2200      	movs	r2, #0
 8009860:	f7f6 fed2 	bl	8000608 <__aeabi_dmul>
 8009864:	4b33      	ldr	r3, [pc, #204]	@ (8009934 <scalbn+0xf4>)
 8009866:	429e      	cmp	r6, r3
 8009868:	4604      	mov	r4, r0
 800986a:	460d      	mov	r5, r1
 800986c:	da0f      	bge.n	800988e <scalbn+0x4e>
 800986e:	a328      	add	r3, pc, #160	@ (adr r3, 8009910 <scalbn+0xd0>)
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	e01e      	b.n	80098b4 <scalbn+0x74>
 8009876:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800987a:	4291      	cmp	r1, r2
 800987c:	d10b      	bne.n	8009896 <scalbn+0x56>
 800987e:	4622      	mov	r2, r4
 8009880:	4620      	mov	r0, r4
 8009882:	4629      	mov	r1, r5
 8009884:	f7f6 fd0a 	bl	800029c <__adddf3>
 8009888:	4604      	mov	r4, r0
 800988a:	460d      	mov	r5, r1
 800988c:	e022      	b.n	80098d4 <scalbn+0x94>
 800988e:	460b      	mov	r3, r1
 8009890:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009894:	3936      	subs	r1, #54	@ 0x36
 8009896:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800989a:	4296      	cmp	r6, r2
 800989c:	dd0d      	ble.n	80098ba <scalbn+0x7a>
 800989e:	2d00      	cmp	r5, #0
 80098a0:	a11d      	add	r1, pc, #116	@ (adr r1, 8009918 <scalbn+0xd8>)
 80098a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098a6:	da02      	bge.n	80098ae <scalbn+0x6e>
 80098a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8009920 <scalbn+0xe0>)
 80098aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ae:	a31a      	add	r3, pc, #104	@ (adr r3, 8009918 <scalbn+0xd8>)
 80098b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b4:	f7f6 fea8 	bl	8000608 <__aeabi_dmul>
 80098b8:	e7e6      	b.n	8009888 <scalbn+0x48>
 80098ba:	1872      	adds	r2, r6, r1
 80098bc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80098c0:	428a      	cmp	r2, r1
 80098c2:	dcec      	bgt.n	800989e <scalbn+0x5e>
 80098c4:	2a00      	cmp	r2, #0
 80098c6:	dd08      	ble.n	80098da <scalbn+0x9a>
 80098c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80098cc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80098d0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098d4:	ec45 4b10 	vmov	d0, r4, r5
 80098d8:	bd70      	pop	{r4, r5, r6, pc}
 80098da:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80098de:	da08      	bge.n	80098f2 <scalbn+0xb2>
 80098e0:	2d00      	cmp	r5, #0
 80098e2:	a10b      	add	r1, pc, #44	@ (adr r1, 8009910 <scalbn+0xd0>)
 80098e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098e8:	dac1      	bge.n	800986e <scalbn+0x2e>
 80098ea:	a10f      	add	r1, pc, #60	@ (adr r1, 8009928 <scalbn+0xe8>)
 80098ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098f0:	e7bd      	b.n	800986e <scalbn+0x2e>
 80098f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80098f6:	3236      	adds	r2, #54	@ 0x36
 80098f8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80098fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009900:	4620      	mov	r0, r4
 8009902:	4b0d      	ldr	r3, [pc, #52]	@ (8009938 <scalbn+0xf8>)
 8009904:	4629      	mov	r1, r5
 8009906:	2200      	movs	r2, #0
 8009908:	e7d4      	b.n	80098b4 <scalbn+0x74>
 800990a:	bf00      	nop
 800990c:	f3af 8000 	nop.w
 8009910:	c2f8f359 	.word	0xc2f8f359
 8009914:	01a56e1f 	.word	0x01a56e1f
 8009918:	8800759c 	.word	0x8800759c
 800991c:	7e37e43c 	.word	0x7e37e43c
 8009920:	8800759c 	.word	0x8800759c
 8009924:	fe37e43c 	.word	0xfe37e43c
 8009928:	c2f8f359 	.word	0xc2f8f359
 800992c:	81a56e1f 	.word	0x81a56e1f
 8009930:	43500000 	.word	0x43500000
 8009934:	ffff3cb0 	.word	0xffff3cb0
 8009938:	3c900000 	.word	0x3c900000

0800993c <with_errno>:
 800993c:	b510      	push	{r4, lr}
 800993e:	ed2d 8b02 	vpush	{d8}
 8009942:	eeb0 8a40 	vmov.f32	s16, s0
 8009946:	eef0 8a60 	vmov.f32	s17, s1
 800994a:	4604      	mov	r4, r0
 800994c:	f7fb fdea 	bl	8005524 <__errno>
 8009950:	eeb0 0a48 	vmov.f32	s0, s16
 8009954:	eef0 0a68 	vmov.f32	s1, s17
 8009958:	ecbd 8b02 	vpop	{d8}
 800995c:	6004      	str	r4, [r0, #0]
 800995e:	bd10      	pop	{r4, pc}

08009960 <xflow>:
 8009960:	4603      	mov	r3, r0
 8009962:	b507      	push	{r0, r1, r2, lr}
 8009964:	ec51 0b10 	vmov	r0, r1, d0
 8009968:	b183      	cbz	r3, 800998c <xflow+0x2c>
 800996a:	4602      	mov	r2, r0
 800996c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009970:	e9cd 2300 	strd	r2, r3, [sp]
 8009974:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009978:	f7f6 fe46 	bl	8000608 <__aeabi_dmul>
 800997c:	ec41 0b10 	vmov	d0, r0, r1
 8009980:	2022      	movs	r0, #34	@ 0x22
 8009982:	b003      	add	sp, #12
 8009984:	f85d eb04 	ldr.w	lr, [sp], #4
 8009988:	f7ff bfd8 	b.w	800993c <with_errno>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	e7ee      	b.n	8009970 <xflow+0x10>
 8009992:	0000      	movs	r0, r0
 8009994:	0000      	movs	r0, r0
	...

08009998 <__math_uflow>:
 8009998:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80099a0 <__math_uflow+0x8>
 800999c:	f7ff bfe0 	b.w	8009960 <xflow>
 80099a0:	00000000 	.word	0x00000000
 80099a4:	10000000 	.word	0x10000000

080099a8 <__math_oflow>:
 80099a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80099b0 <__math_oflow+0x8>
 80099ac:	f7ff bfd8 	b.w	8009960 <xflow>
 80099b0:	00000000 	.word	0x00000000
 80099b4:	70000000 	.word	0x70000000

080099b8 <_init>:
 80099b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ba:	bf00      	nop
 80099bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099be:	bc08      	pop	{r3}
 80099c0:	469e      	mov	lr, r3
 80099c2:	4770      	bx	lr

080099c4 <_fini>:
 80099c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c6:	bf00      	nop
 80099c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ca:	bc08      	pop	{r3}
 80099cc:	469e      	mov	lr, r3
 80099ce:	4770      	bx	lr
